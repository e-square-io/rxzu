{
    "pipes": [],
    "interfaces": [
        {
            "name": "DagreEngineOptions",
            "id": "interface-DagreEngineOptions-712ddff38d4188468f10d88bf4962a78",
            "file": "libs/angular/src/lib/plugins/dagre-engine.plugin.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { DiagramModel, PointModel } from '@ngx-diagrams/core';\nimport * as dagre from 'dagre';\nimport { EdgeConfig, GraphLabel, NodeConfig } from 'dagre';\n\nexport interface DagreEngineOptions {\n  graph?: GraphLabel;\n  layout?: GraphLabel & NodeConfig & EdgeConfig;\n  /**\n   * Will also layout links\n   */\n  includeLinks?: boolean;\n}\n\n@Injectable()\nexport class DagreEngine {\n  g: dagre.graphlib.Graph;\n\n  instantiate() {\n    try {\n      this.g = new dagre.graphlib.Graph({ multigraph: true });\n    } catch (error) {\n      console.warn(\"`dagre` packages isn't installed, please install it before using the DagreEngine plugin\");\n    }\n  }\n\n  redistribute(model: DiagramModel, options: DagreEngineOptions = {}): void {\n    this.instantiate();\n\n    this.g.setGraph(options.graph || {});\n\n    this.g.setDefaultEdgeLabel(() => {\n      return {};\n    });\n\n    const processedlinks: { [id: string]: boolean } = {};\n\n    // set nodes\n    model.getNodes().forEach((node) => {\n      this.g.setNode(node.id, {\n        width: node.getWidth(),\n        height: node.getHeight()\n      });\n    });\n\n    model.getLinks().forEach((link) => {\n      // set edges\n      if (link.getSourcePort() && link.getTargetPort()) {\n        processedlinks[link.id] = true;\n        this.g.setEdge({\n          v: link.getSourcePort().getNode().id,\n          w: link.getTargetPort().getNode().id,\n          name: link.id\n        });\n      }\n    });\n\n    // layout the graph\n    dagre.layout(this.g, options.layout);\n\n    this.g.nodes().forEach((v) => {\n      const { x, y } = this.g.node(v);\n      model.getNode(v).setCoords({ x, y });\n    });\n\n    // also include links?\n    if (options.includeLinks) {\n      this.g.edges().forEach((e) => {\n        const edge = this.g.edge(e);\n        const link = model.getLink(e.name);\n\n        const points = [link.getFirstPoint()];\n        for (let i = 1; i < edge.points.length - 2; i++) {\n          points.push(new PointModel(link, { x: edge.points[i].x, y: edge.points[i].y }));\n        }\n        link.setPoints(points.concat(link.getLastPoint()));\n      });\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "graph",
                    "type": "GraphLabel",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "includeLinks",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Will also layout links</p>\n",
                    "line": 12
                },
                {
                    "name": "layout",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ZonedClass",
            "id": "interface-ZonedClass-95a8ba087560debc8f9321814c92650b",
            "file": "libs/angular/src/lib/utils/decorators.ts",
            "type": "interface",
            "sourceCode": "import { NgZone } from '@angular/core';\n\nexport interface ZonedClass {\n  ngZone: NgZone;\n}\n\nexport function OutsideZone<T extends ZonedClass>(targetClass: T, functionName: string, descriptor) {\n  const source = descriptor.value;\n  descriptor.value = function (...data) {\n    if (!this.ngZone) {\n      throw new Error(\"Class with 'OutsideZone' decorator should have 'ngZone' class property with 'NgZone' class.\");\n    }\n    return this.ngZone.runOutsideAngular(() => source.call(this, ...data));\n  };\n  return descriptor;\n}\n",
            "properties": [
                {
                    "name": "ngZone",
                    "type": "NgZone",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "DagreEngine",
            "id": "injectable-DagreEngine-712ddff38d4188468f10d88bf4962a78",
            "file": "libs/angular/src/lib/plugins/dagre-engine.plugin.ts",
            "properties": [
                {
                    "name": "g",
                    "type": "dagre.graphlib.Graph",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methods": [
                {
                    "name": "instantiate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                },
                {
                    "name": "redistribute",
                    "args": [
                        {
                            "name": "model",
                            "type": "DiagramModel"
                        },
                        {
                            "name": "options",
                            "type": "DagreEngineOptions",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "DiagramModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "DagreEngineOptions",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { DiagramModel, PointModel } from '@ngx-diagrams/core';\nimport * as dagre from 'dagre';\nimport { EdgeConfig, GraphLabel, NodeConfig } from 'dagre';\n\nexport interface DagreEngineOptions {\n  graph?: GraphLabel;\n  layout?: GraphLabel & NodeConfig & EdgeConfig;\n  /**\n   * Will also layout links\n   */\n  includeLinks?: boolean;\n}\n\n@Injectable()\nexport class DagreEngine {\n  g: dagre.graphlib.Graph;\n\n  instantiate() {\n    try {\n      this.g = new dagre.graphlib.Graph({ multigraph: true });\n    } catch (error) {\n      console.warn(\"`dagre` packages isn't installed, please install it before using the DagreEngine plugin\");\n    }\n  }\n\n  redistribute(model: DiagramModel, options: DagreEngineOptions = {}): void {\n    this.instantiate();\n\n    this.g.setGraph(options.graph || {});\n\n    this.g.setDefaultEdgeLabel(() => {\n      return {};\n    });\n\n    const processedlinks: { [id: string]: boolean } = {};\n\n    // set nodes\n    model.getNodes().forEach((node) => {\n      this.g.setNode(node.id, {\n        width: node.getWidth(),\n        height: node.getHeight()\n      });\n    });\n\n    model.getLinks().forEach((link) => {\n      // set edges\n      if (link.getSourcePort() && link.getTargetPort()) {\n        processedlinks[link.id] = true;\n        this.g.setEdge({\n          v: link.getSourcePort().getNode().id,\n          w: link.getTargetPort().getNode().id,\n          name: link.id\n        });\n      }\n    });\n\n    // layout the graph\n    dagre.layout(this.g, options.layout);\n\n    this.g.nodes().forEach((v) => {\n      const { x, y } = this.g.node(v);\n      model.getNode(v).setCoords({ x, y });\n    });\n\n    // also include links?\n    if (options.includeLinks) {\n      this.g.edges().forEach((e) => {\n        const edge = this.g.edge(e);\n        const link = model.getLink(e.name);\n\n        const points = [link.getFirstPoint()];\n        for (let i = 1; i < edge.points.length - 2; i++) {\n          points.push(new PointModel(link, { x: edge.points[i].x, y: edge.points[i].y }));\n        }\n        link.setPoints(points.concat(link.getLastPoint()));\n      });\n    }\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "DiagramEngine",
            "id": "injectable-DiagramEngine-1329df60fd0bfdebf49e012c90acac70",
            "file": "libs/angular/src/lib/engine.service.ts",
            "properties": [
                {
                    "name": "_renderer",
                    "type": "Renderer2",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        113
                    ]
                }
            ],
            "methods": [
                {
                    "name": "registerDefaultFactories",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "description": "",
            "sourceCode": "import { ComponentFactoryResolver, Injectable, Renderer2, RendererFactory2 } from '@angular/core';\nimport { DiagramEngineCore } from '@ngx-diagrams/core';\nimport { DefaultLabelFactory, DefaultLinkFactory, DefaultNodeFactory, DefaultPortFactory } from './defaults';\nimport { NgxDiagramsModule } from './ngx-diagrams.module';\n\n@Injectable({ providedIn: NgxDiagramsModule })\nexport class DiagramEngine extends DiagramEngineCore {\n  protected _renderer: Renderer2;\n\n  constructor(protected resolver: ComponentFactoryResolver, protected rendererFactory: RendererFactory2) {\n    super();\n    this._renderer = this.rendererFactory.createRenderer(null, null);\n  }\n\n  registerDefaultFactories() {\n    const factoriesManager = this.getFactoriesManager();\n    factoriesManager.registerFactory({\n      type: 'nodeFactories',\n      factory: new DefaultNodeFactory(this.resolver, this._renderer)\n    });\n\n    factoriesManager.registerFactory({\n      type: 'linkFactories',\n      factory: new DefaultLinkFactory(this.resolver, this._renderer)\n    });\n\n    factoriesManager.registerFactory({\n      type: 'portFactories',\n      factory: new DefaultPortFactory(this.resolver, this._renderer)\n    });\n\n    factoriesManager.registerFactory({\n      type: 'labelFactories',\n      factory: new DefaultLabelFactory(this.resolver, this._renderer)\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver"
                    },
                    {
                        "name": "rendererFactory",
                        "type": "RendererFactory2"
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "rendererFactory",
                        "type": "RendererFactory2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "DiagramEngineCore",
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "CustomLabelFactory",
            "id": "class-CustomLabelFactory-17ab79b2cb0b843028ef4ce01020a152",
            "file": "libs/angular/stories/label/custom/custom.factory.ts",
            "type": "class",
            "sourceCode": "import { ViewContainerRef, ComponentRef, ComponentFactoryResolver, ComponentFactory, Renderer2 } from '@angular/core';\nimport { AbstractAngularFactory, DefaultLabelModel } from '@ngx-diagrams/core';\nimport { CustomLabelComponent } from './custom-label.component';\n\nexport class CustomLabelFactory extends AbstractAngularFactory<CustomLabelComponent> {\n  constructor(private resolver: ComponentFactoryResolver, private renderer: Renderer2) {\n    super('custom-label');\n  }\n\n  generateWidget({\n    host,\n    model\n  }: {\n    model: DefaultLabelModel;\n    host: ViewContainerRef;\n  }): ComponentRef<CustomLabelComponent> {\n    const componentRef = host.createComponent(this.getRecipe());\n\n    // attach coordinates and default positional behaviour to the generated component host\n    const rootNode = componentRef.location.nativeElement;\n\n    // default style for link\n    this.renderer.setStyle(rootNode, 'position', 'absolute');\n\n    // data attributes\n    this.renderer.setAttribute(rootNode, 'data-labelid', model.id);\n\n    // on destroy make sure to destroy the componentRef\n    model.onEntityDestroy().subscribe(() => {\n      componentRef.destroy();\n    });\n\n    // assign all passed properties to node initialization.\n    Object.entries(model).forEach(([key, value]) => {\n      componentRef.instance[key] = value;\n    });\n\n    return componentRef;\n  }\n\n  getRecipe(): ComponentFactory<CustomLabelComponent> {\n    return this.resolver.resolveComponentFactory(CustomLabelComponent);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<CustomLabelComponent>",
                    "typeParameters": [],
                    "line": 10,
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRecipe",
                    "args": [],
                    "optional": false,
                    "returnType": "ComponentFactory<CustomLabelComponent>",
                    "typeParameters": [],
                    "line": 41
                }
            ],
            "indexSignatures": [],
            "extends": "AbstractAngularFactory",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CustomLinkFactory",
            "id": "class-CustomLinkFactory-c5a06e3b0bb9d56834483e30d96d02ca",
            "file": "libs/angular/stories/link/custom/custom.factory.ts",
            "type": "class",
            "sourceCode": "import { ViewContainerRef, ComponentRef, ComponentFactoryResolver, ComponentFactory, Renderer2 } from '@angular/core';\nimport { AbstractAngularFactory, DefaultLinkModel } from '@ngx-diagrams/core';\nimport { CustomLinkComponent } from './custom-link.component';\n\nexport class CustomLinkFactory extends AbstractAngularFactory<CustomLinkComponent> {\n  constructor(private resolver: ComponentFactoryResolver, private renderer: Renderer2) {\n    super('custom-link');\n  }\n\n  generateWidget({\n    host,\n    model\n  }: {\n    model: DefaultLinkModel;\n    host: ViewContainerRef;\n  }): ComponentRef<CustomLinkComponent> {\n    const componentRef = host.createComponent(this.getRecipe());\n    model.setWidth(1);\n    model.setColor('pink');\n    // attach coordinates and default positional behaviour to the generated component host\n    const rootNode = componentRef.location.nativeElement;\n\n    // default style for link\n    this.renderer.setStyle(rootNode, 'position', 'absolute');\n\n    // data attributes\n    this.renderer.setAttribute(rootNode, 'data-linkid', model.id);\n\n    // on destroy make sure to destroy the componentRef\n    model.onEntityDestroy().subscribe(() => {\n      componentRef.destroy();\n    });\n\n    // assign all passed properties to node initialization.\n    Object.entries(model).forEach(([key, value]) => {\n      componentRef.instance[key] = value;\n    });\n\n    return componentRef;\n  }\n\n  getRecipe(): ComponentFactory<CustomLinkComponent> {\n    return this.resolver.resolveComponentFactory(CustomLinkComponent);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<CustomLinkComponent>",
                    "typeParameters": [],
                    "line": 10,
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRecipe",
                    "args": [],
                    "optional": false,
                    "returnType": "ComponentFactory<CustomLinkComponent>",
                    "typeParameters": [],
                    "line": 42
                }
            ],
            "indexSignatures": [],
            "extends": "AbstractAngularFactory",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CustomNodeFactory",
            "id": "class-CustomNodeFactory-a7da5ce150e2e5cac920a0e77e67bb13",
            "file": "libs/angular/stories/node/custom/custom.factory.ts",
            "type": "class",
            "sourceCode": "import { ComponentFactoryResolver, ViewContainerRef, ComponentRef, ComponentFactory, Renderer2 } from '@angular/core';\nimport { AbstractAngularFactory, DefaultNodeModel } from '@ngx-diagrams/core';\nimport { CustomNodeComponent } from './custom.component';\n\nexport class CustomNodeFactory extends AbstractAngularFactory<DefaultNodeModel> {\n  constructor(private resolver: ComponentFactoryResolver, private renderer: Renderer2) {\n    super('custom-node');\n  }\n\n  generateWidget({\n    model,\n    host\n  }: {\n    model: DefaultNodeModel;\n    host: ViewContainerRef;\n  }): ComponentRef<CustomNodeComponent> {\n    const componentRef = host.createComponent(this.getRecipe());\n\n    // attach coordinates and default positional behaviour to the generated component host\n    const rootNode = componentRef.location.nativeElement;\n\n    // default style for node\n    this.renderer.setStyle(rootNode, 'position', 'absolute');\n    this.renderer.setStyle(rootNode, 'display', 'block');\n\n    // data attributes\n    this.renderer.setAttribute(rootNode, 'data-nodeid', model.id);\n\n    // subscribe to node coordinates\n    model.selectCoords().subscribe(({ x, y }) => {\n      this.renderer.setStyle(rootNode, 'left', `${x}px`);\n      this.renderer.setStyle(rootNode, 'top', `${y}px`);\n    });\n\n    model.selectionChanges().subscribe((e) => {\n      e.isSelected ? this.renderer.addClass(rootNode, 'selected') : this.renderer.removeClass(rootNode, 'selected');\n    });\n\n    model.onEntityDestroy().subscribe((e) => {\n      componentRef.destroy();\n    });\n\n    // assign all passed properties to node initialization.\n    Object.entries(model).forEach(([key, value]) => {\n      componentRef.instance[key] = value;\n    });\n\n    return componentRef;\n  }\n\n  getRecipe(): ComponentFactory<CustomNodeComponent> {\n    return this.resolver.resolveComponentFactory(CustomNodeComponent);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<CustomNodeComponent>",
                    "typeParameters": [],
                    "line": 10,
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRecipe",
                    "args": [],
                    "optional": false,
                    "returnType": "ComponentFactory<CustomNodeComponent>",
                    "typeParameters": [],
                    "line": 51
                }
            ],
            "indexSignatures": [],
            "extends": "AbstractAngularFactory",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CustomPortFactory",
            "id": "class-CustomPortFactory-5b43803def54da415fb55524b30f078f",
            "file": "libs/angular/stories/port/custom/custom.factory.ts",
            "type": "class",
            "sourceCode": "import { ViewContainerRef, ComponentRef, ComponentFactory, ComponentFactoryResolver, Renderer2 } from '@angular/core';\nimport { AbstractAngularFactory, DefaultPortModel } from '@ngx-diagrams/core';\nimport { Observable } from 'rxjs';\nimport { map, takeUntil } from 'rxjs/operators';\nimport { CustomPortComponent } from './custom.component';\n\nexport class CustomPortFactory extends AbstractAngularFactory<CustomPortComponent> {\n  constructor(private resolver: ComponentFactoryResolver, private renderer: Renderer2) {\n    super('custom-port');\n  }\n\n  generateWidget({\n    model,\n    host\n  }: {\n    model: DefaultPortModel;\n    host: ViewContainerRef;\n  }): ComponentRef<CustomPortComponent> {\n    const componentRef = host.createComponent(this.getRecipe());\n\n    // attach coordinates and default positional behaviour to the generated component host\n    const rootNode = componentRef.location.nativeElement as HTMLElement;\n\n    // data attributes\n    this.renderer.setAttribute(rootNode, 'data-portid', model.id);\n    this.renderer.setAttribute(rootNode, 'data-name', model.getName());\n\n    model.in ? this.renderer.addClass(rootNode, 'in') : this.renderer.addClass(rootNode, 'out');\n\n    // assign all passed properties to node initialization.\n    Object.entries(model).forEach(([key, value]) => {\n      componentRef.instance[key] = value;\n    });\n\n    // this method will add classes to all ports that have links\n    this.isConnected(model).subscribe((connected) => {\n      connected ? this.renderer.addClass(rootNode, 'connected') : this.renderer.removeClass(rootNode, 'connected');\n    });\n\n    model.onEntityDestroy().subscribe(() => {\n      componentRef.destroy();\n    });\n\n    return componentRef;\n  }\n\n  getRecipe(): ComponentFactory<CustomPortComponent> {\n    return this.resolver.resolveComponentFactory(CustomPortComponent);\n  }\n\n  isConnected(port: DefaultPortModel): Observable<boolean> {\n    return port.selectLinks().pipe(\n      takeUntil(port.onEntityDestroy()),\n      map((links) => Object.keys(links).length > 0)\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<CustomPortComponent>",
                    "typeParameters": [],
                    "line": 12,
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRecipe",
                    "args": [],
                    "optional": false,
                    "returnType": "ComponentFactory<CustomPortComponent>",
                    "typeParameters": [],
                    "line": 47
                },
                {
                    "name": "isConnected",
                    "args": [
                        {
                            "name": "port",
                            "type": "DefaultPortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "DefaultPortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": "AbstractAngularFactory",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DefaultLabelFactory",
            "id": "class-DefaultLabelFactory-5bf0a067c472cbcf1fe8bfcb3eb9f851",
            "file": "libs/angular/src/lib/defaults/factories/default-label.factory.ts",
            "type": "class",
            "sourceCode": "import { ViewContainerRef, ComponentRef, ComponentFactoryResolver, ComponentFactory, Renderer2 } from '@angular/core';\nimport { AbstractAngularFactory, DefaultLabelModel } from '@ngx-diagrams/core';\nimport { DefaultLabelComponent } from '../components/default-label/default-label.component';\n\nexport class DefaultLabelFactory extends AbstractAngularFactory<DefaultLabelComponent> {\n  constructor(protected resolver: ComponentFactoryResolver, protected renderer: Renderer2) {\n    super('default');\n  }\n\n  generateWidget({\n    model,\n    host\n  }: {\n    model: DefaultLabelModel;\n    host: ViewContainerRef;\n  }): ComponentRef<DefaultLabelComponent> {\n    const componentRef = host.createComponent(this.getRecipe());\n\n    // attach coordinates and default positional behaviour to the generated component host\n    const rootNode = componentRef.location.nativeElement;\n\n    // default style for link\n    this.renderer.setStyle(rootNode, 'position', 'absolute');\n\n    // data attributes\n    this.renderer.setAttribute(rootNode, 'data-labelid', model.id);\n\n    // on destroy make sure to destroy the componentRef\n    model.onEntityDestroy().subscribe(() => {\n      componentRef.destroy();\n    });\n\n    // assign all passed properties to node initialization.\n    Object.entries(model).forEach(([key, value]) => {\n      componentRef.instance[key] = value;\n    });\n\n    componentRef.instance.setPainted(true);\n    return componentRef;\n  }\n\n  getRecipe(): ComponentFactory<DefaultLabelComponent> {\n    return this.resolver.resolveComponentFactory(DefaultLabelComponent);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<DefaultLabelComponent>",
                    "typeParameters": [],
                    "line": 10,
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRecipe",
                    "args": [],
                    "optional": false,
                    "returnType": "ComponentFactory<DefaultLabelComponent>",
                    "typeParameters": [],
                    "line": 42
                }
            ],
            "indexSignatures": [],
            "extends": "AbstractAngularFactory",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DefaultLinkFactory",
            "id": "class-DefaultLinkFactory-ce9ef181f66ff566139a6af30f845382",
            "file": "libs/angular/src/lib/defaults/factories/default-link.factory.ts",
            "type": "class",
            "sourceCode": "import { DefaultLinkComponent } from '../components/default-link/default-link.component';\nimport { ViewContainerRef, ComponentRef, ComponentFactoryResolver, ComponentFactory, Renderer2 } from '@angular/core';\nimport { AbstractAngularFactory, DefaultLinkModel } from '@ngx-diagrams/core';\n\nexport class DefaultLinkFactory extends AbstractAngularFactory<DefaultLinkComponent> {\n  constructor(protected resolver: ComponentFactoryResolver, protected renderer: Renderer2) {\n    super('default');\n  }\n\n  generateWidget({\n    model,\n    host\n  }: {\n    model: DefaultLinkModel;\n    host: ViewContainerRef;\n  }): ComponentRef<DefaultLinkComponent> {\n    const componentRef = host.createComponent(this.getRecipe());\n\n    // attach coordinates and default positional behaviour to the generated component host\n    const rootNode = componentRef.location.nativeElement;\n\n    // default style for link\n    this.renderer.setStyle(rootNode, 'position', 'absolute');\n    this.renderer.addClass(rootNode, 'label');\n\n    // data attributes\n    this.renderer.setAttribute(rootNode, 'data-linkid', model.id);\n\n    // on destroy make sure to destroy the componentRef\n    model.onEntityDestroy().subscribe(() => {\n      componentRef.destroy();\n    });\n\n    // assign all passed properties to link initialization.\n    Object.entries(model).forEach(([key, value]) => {\n      componentRef.instance[key] = value;\n    });\n\n    componentRef.instance.setPainted(true);\n    return componentRef;\n  }\n\n  getRecipe(): ComponentFactory<DefaultLinkComponent> {\n    return this.resolver.resolveComponentFactory(DefaultLinkComponent);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<DefaultLinkComponent>",
                    "typeParameters": [],
                    "line": 10,
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRecipe",
                    "args": [],
                    "optional": false,
                    "returnType": "ComponentFactory<DefaultLinkComponent>",
                    "typeParameters": [],
                    "line": 43
                }
            ],
            "indexSignatures": [],
            "extends": "AbstractAngularFactory",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DefaultNodeFactory",
            "id": "class-DefaultNodeFactory-4194409a38503f75476e49410a6a3bf6",
            "file": "libs/angular/src/lib/defaults/factories/default-node.factory.ts",
            "type": "class",
            "sourceCode": "import { DefaultNodeComponent } from '../components/default-node/default-node.component';\nimport { ComponentFactoryResolver, ViewContainerRef, ComponentRef, ComponentFactory, Renderer2 } from '@angular/core';\nimport { AbstractAngularFactory, DefaultNodeModel } from '@ngx-diagrams/core';\n\nexport class DefaultNodeFactory extends AbstractAngularFactory<DefaultNodeComponent> {\n  constructor(protected resolver: ComponentFactoryResolver, protected renderer: Renderer2) {\n    super('default');\n  }\n\n  generateWidget({\n    model,\n    host\n  }: {\n    model: DefaultNodeModel;\n    host: ViewContainerRef;\n  }): ComponentRef<DefaultNodeComponent> {\n    const componentRef = host.createComponent(this.getRecipe());\n\n    // attach coordinates and default positional behaviour to the generated component host\n    const rootNode = componentRef.location.nativeElement;\n\n    // default style for node\n    this.renderer.setStyle(rootNode, 'position', 'absolute');\n    this.renderer.setStyle(rootNode, 'display', 'block');\n\n    // data attributes\n    this.renderer.setAttribute(rootNode, 'data-nodeid', model.id);\n\n    // subscribe to node coordinates\n    model.selectCoords().subscribe(({ x, y }) => {\n      this.renderer.setStyle(rootNode, 'left', `${x}px`);\n      this.renderer.setStyle(rootNode, 'top', `${y}px`);\n    });\n\n    model.selectionChanges().subscribe((e) => {\n      e.isSelected ? this.renderer.addClass(rootNode, 'selected') : this.renderer.removeClass(rootNode, 'selected');\n    });\n\n    model.onEntityDestroy().subscribe(() => {\n      componentRef.destroy();\n    });\n\n    // assign all passed properties to node initialization.\n    Object.entries(model).forEach(([key, value]) => {\n      componentRef.instance[key] = value;\n    });\n\n    componentRef.instance.setPainted(true);\n    return componentRef;\n  }\n\n  getRecipe(): ComponentFactory<DefaultNodeComponent> {\n    return this.resolver.resolveComponentFactory(DefaultNodeComponent);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<DefaultNodeComponent>",
                    "typeParameters": [],
                    "line": 10,
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRecipe",
                    "args": [],
                    "optional": false,
                    "returnType": "ComponentFactory<DefaultNodeComponent>",
                    "typeParameters": [],
                    "line": 52
                }
            ],
            "indexSignatures": [],
            "extends": "AbstractAngularFactory",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DefaultPortFactory",
            "id": "class-DefaultPortFactory-9ad717d74f50ddfc5d2e478fed19ad7f",
            "file": "libs/angular/src/lib/defaults/factories/default-port.factory.ts",
            "type": "class",
            "sourceCode": "import { ViewContainerRef, ComponentRef, ComponentFactory, ComponentFactoryResolver, Renderer2 } from '@angular/core';\nimport { AbstractAngularFactory, DefaultPortModel } from '@ngx-diagrams/core';\nimport { DefaultPortComponent } from '../components/default-port/default-port.component';\n\nexport class DefaultPortFactory extends AbstractAngularFactory<DefaultPortComponent> {\n  constructor(protected resolver: ComponentFactoryResolver, protected renderer: Renderer2) {\n    super('default');\n  }\n\n  generateWidget({\n    model,\n    host\n  }: {\n    model: DefaultPortModel;\n    host: ViewContainerRef;\n  }): ComponentRef<DefaultPortComponent> {\n    const componentRef = host.createComponent(this.getRecipe());\n\n    // attach coordinates and default positional behaviour to the generated component host\n    const rootNode = componentRef.location.nativeElement as HTMLElement;\n\n    // data attributes\n    this.renderer.setAttribute(rootNode, 'data-portid', model.id);\n    this.renderer.setAttribute(rootNode, 'data-name', model.getName());\n\n    model.in ? this.renderer.addClass(rootNode, 'in') : this.renderer.addClass(rootNode, 'out');\n\n    // assign all passed properties to node initialization.\n    Object.entries(model).forEach(([key, value]) => {\n      componentRef.instance[key] = value;\n    });\n\n    model.onEntityDestroy().subscribe(() => {\n      componentRef.destroy();\n    });\n\n    componentRef.instance.setPainted(true);\n    return componentRef;\n  }\n\n  getRecipe(): ComponentFactory<DefaultPortComponent> {\n    return this.resolver.resolveComponentFactory(DefaultPortComponent);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<DefaultPortComponent>",
                    "typeParameters": [],
                    "line": 10,
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRecipe",
                    "args": [],
                    "optional": false,
                    "returnType": "ComponentFactory<DefaultPortComponent>",
                    "typeParameters": [],
                    "line": 41
                }
            ],
            "indexSignatures": [],
            "extends": "AbstractAngularFactory",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PathFinding",
            "id": "class-PathFinding-2437a5de865646440efb7e0b15ff6525",
            "file": "libs/angular/src/lib/plugins/smart-routing.plugin.ts",
            "type": "class",
            "sourceCode": "import { DiagramEngine } from '../services/engine.service';\nimport * as PF from 'pathfinding';\n\nexport const ROUTING_SCALING_FACTOR = 10;\n\nexport class PathFinding {\n  private pathFinderInstance:\n    | PF.JPFNeverMoveDiagonally\n    | PF.JPFAlwaysMoveDiagonally\n    | PF.JPFMoveDiagonallyIfNoObstacles\n    | PF.JPFMoveDiagonallyIfAtMostOneObstacle;\n\n  constructor(private diagramEngine: DiagramEngine, heuristic = PF.Heuristic.manhattan) {\n    this.pathFinderInstance = new PF.AStarFinder({\n      heuristic,\n      diagonalMovement: PF.DiagonalMovement.Always,\n      weight: 0\n    });\n  }\n\n  /**\n   * Taking as argument a fully unblocked walking matrix, this method\n   * finds a direct path from point A to B.\n   */\n  calculateDirectPath(\n    from: {\n      x: number;\n      y: number;\n    },\n    to: {\n      x: number;\n      y: number;\n    }\n  ): number[][] {\n    const matrix = this.diagramEngine.getCanvasMatrix();\n    const grid = new PF.Grid(matrix);\n\n    const fromX = this.diagramEngine.translateRoutingX(Math.floor(from.x / ROUTING_SCALING_FACTOR));\n    const toX = this.diagramEngine.translateRoutingX(Math.floor(to.x / ROUTING_SCALING_FACTOR));\n    const fromY = this.diagramEngine.translateRoutingX(Math.floor(from.y / ROUTING_SCALING_FACTOR));\n    const toY = this.diagramEngine.translateRoutingX(Math.floor(to.y / ROUTING_SCALING_FACTOR));\n\n    const path = this.pathFinderInstance.findPath(fromX, fromY, toX, toY, grid);\n    return path;\n  }\n\n  /**\n   * Using @link{#calculateDirectPath}'s result as input, we here\n   * determine the first walkable point found in the matrix that includes\n   * blocked paths.\n   */\n  calculateLinkStartEndCoords(\n    matrix: number[][],\n    path: number[][]\n  ): {\n    start: {\n      x: number;\n      y: number;\n    };\n    end: {\n      x: number;\n      y: number;\n    };\n    pathToStart: number[][];\n    pathToEnd: number[][];\n  } {\n    const startIndex = path.findIndex((point) => matrix[point[1]][point[0]] === 0);\n    const endIndex =\n      path.length -\n      1 -\n      path\n        .slice()\n        .reverse()\n        .findIndex((point) => matrix[point[1]][point[0]] === 0);\n\n    // are we trying to create a path exclusively through blocked areas?\n    // if so, let's fallback to the linear routing\n    if (startIndex === -1 || endIndex === -1) {\n      return undefined;\n    }\n\n    const pathToStart = path.slice(0, startIndex);\n    const pathToEnd = path.slice(endIndex);\n\n    return {\n      start: {\n        x: path[startIndex][0],\n        y: path[startIndex][1]\n      },\n      end: {\n        x: path[endIndex][0],\n        y: path[endIndex][1]\n      },\n      pathToStart,\n      pathToEnd\n    };\n  }\n\n  /**\n   * Puts everything together: merges the paths from/to the centre of the ports,\n   * with the path calculated around other elements.\n   */\n  calculateDynamicPath(\n    routingMatrix: number[][],\n    start: {\n      x: number;\n      y: number;\n    },\n    end: {\n      x: number;\n      y: number;\n    },\n    pathToStart: number[][],\n    pathToEnd: number[][]\n  ) {\n    // generate the path based on the matrix with obstacles\n    const grid = new PF.Grid(routingMatrix);\n    const dynamicPath = this.pathFinderInstance.findPath(start.x, start.y, end.x, end.y, grid);\n\n    // aggregate everything to have the calculated path ready for rendering\n    const pathCoords = pathToStart\n      .concat(dynamicPath, pathToEnd)\n      .map((coords) => [\n        this.diagramEngine.translateRoutingX(coords[0], true),\n        this.diagramEngine.translateRoutingY(coords[1], true)\n      ]);\n\n    return PF.Util.compressPath(pathCoords);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine"
                    },
                    {
                        "name": "heuristic",
                        "type": "",
                        "defaultValue": "PF.Heuristic.manhattan"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "heuristic",
                        "type": "",
                        "defaultValue": "PF.Heuristic.manhattan",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "pathFinderInstance",
                    "type": "PF.JPFNeverMoveDiagonally | PF.JPFAlwaysMoveDiagonally | PF.JPFMoveDiagonallyIfNoObstacles | PF.JPFMoveDiagonallyIfAtMostOneObstacle",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "calculateDirectPath",
                    "args": [
                        {
                            "name": "from",
                            "type": "literal type"
                        },
                        {
                            "name": "to",
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "[][]",
                    "typeParameters": [],
                    "line": 25,
                    "description": "<p>Taking as argument a fully unblocked walking matrix, this method\nfinds a direct path from point A to B.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "from",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "to",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calculateDynamicPath",
                    "args": [
                        {
                            "name": "routingMatrix",
                            "type": "number[][]"
                        },
                        {
                            "name": "start",
                            "type": "literal type"
                        },
                        {
                            "name": "end",
                            "type": "literal type"
                        },
                        {
                            "name": "pathToStart",
                            "type": "number[][]"
                        },
                        {
                            "name": "pathToEnd",
                            "type": "number[][]"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 103,
                    "description": "<p>Puts everything together: merges the paths from/to the centre of the ports,\nwith the path calculated around other elements.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "routingMatrix",
                            "type": "number[][]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "start",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "end",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pathToStart",
                            "type": "number[][]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pathToEnd",
                            "type": "number[][]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calculateLinkStartEndCoords",
                    "args": [
                        {
                            "name": "matrix",
                            "type": "number[][]"
                        },
                        {
                            "name": "path",
                            "type": "number[][]"
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 52,
                    "description": "<p>Using @link{#calculateDirectPath}&#39;s result as input, we here\ndetermine the first walkable point found in the matrix that includes\nblocked paths.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "matrix",
                            "type": "number[][]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "type": "number[][]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TemplateVarContext",
            "id": "class-TemplateVarContext-adff97d20031c06a8d3472e4695578f7",
            "file": "libs/angular/src/lib/utils/template-var.directive.ts",
            "type": "class",
            "sourceCode": "import { Directive, EmbeddedViewRef, Input, TemplateRef, ViewContainerRef } from '@angular/core';\n\nclass TemplateVarContext {\n  $implicit: any;\n  templateVar: any;\n}\n\n@Directive({\n  selector: '[templateVar]'\n})\nexport class TemplateVarDirective {\n  view: EmbeddedViewRef<any>;\n\n  protected context = new TemplateVarContext();\n\n  @Input()\n  set templateVar(context: any) {\n    this.context.$implicit = this.context.templateVar = context;\n    this.updateView();\n  }\n\n  constructor(protected vcRef: ViewContainerRef, protected templateRef: TemplateRef<any>) {}\n\n  updateView() {\n    if (!this.view) {\n      this.vcRef.clear();\n      this.view = this.vcRef.createEmbeddedView(this.templateRef, this.context);\n    } else {\n      this.view.markForCheck();\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "$implicit",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "templateVar",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "TemplateVarDirective",
            "id": "directive-TemplateVarDirective-adff97d20031c06a8d3472e4695578f7",
            "file": "libs/angular/src/lib/utils/template-var.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, EmbeddedViewRef, Input, TemplateRef, ViewContainerRef } from '@angular/core';\n\nclass TemplateVarContext {\n  $implicit: any;\n  templateVar: any;\n}\n\n@Directive({\n  selector: '[templateVar]'\n})\nexport class TemplateVarDirective {\n  view: EmbeddedViewRef<any>;\n\n  protected context = new TemplateVarContext();\n\n  @Input()\n  set templateVar(context: any) {\n    this.context.$implicit = this.context.templateVar = context;\n    this.updateView();\n  }\n\n  constructor(protected vcRef: ViewContainerRef, protected templateRef: TemplateRef<any>) {}\n\n  updateView() {\n    if (!this.view) {\n      this.vcRef.clear();\n      this.view = this.vcRef.createEmbeddedView(this.templateRef, this.context);\n    } else {\n      this.view.markForCheck();\n    }\n  }\n}\n",
            "selector": "[templateVar]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "templateVar",
                    "line": 17,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "context",
                    "defaultValue": "new TemplateVarContext()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "view",
                    "type": "EmbeddedViewRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "updateView",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "vcRef",
                        "type": "ViewContainerRef"
                    },
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "vcRef",
                        "type": "ViewContainerRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "templateVar": {
                    "name": "templateVar",
                    "setSignature": {
                        "name": "templateVar",
                        "type": "void",
                        "args": [
                            {
                                "name": "context",
                                "type": "any"
                            }
                        ],
                        "returnType": "void",
                        "line": 17,
                        "jsdoctags": [
                            {
                                "name": "context",
                                "type": "any",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        }
    ],
    "components": [
        {
            "name": "AutoArrangeExampleStoryComponent",
            "id": "component-AutoArrangeExampleStoryComponent-cf38e20b8be4da92645b2b1c5fafc062",
            "file": "libs/angular/stories/examples/auto-arrange/auto-arrange.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "../demo-diagram.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"action-bar\">\n  <button (click)=\"autoArrange()\">Auto Arrange</button>\n</div>\n<ngdx-diagram class=\"demo-diagram\" [model]=\"diagramModel\"></ngdx-diagram>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "diagramModel",
                    "type": "DiagramModel",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "autoArrange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { DiagramEngine, DagreEngine } from '@ngx-diagrams/angular';\nimport { DiagramModel, DefaultNodeModel } from '@ngx-diagrams/core';\n\n@Component({\n  selector: 'app-root',\n  template: `\n    <div class=\"action-bar\">\n      <button (click)=\"autoArrange()\">Auto Arrange</button>\n    </div>\n    <ngdx-diagram class=\"demo-diagram\" [model]=\"diagramModel\"></ngdx-diagram>\n  `,\n  styleUrls: ['../demo-diagram.component.scss']\n})\nexport class AutoArrangeExampleStoryComponent implements OnInit {\n  diagramModel: DiagramModel;\n\n  constructor(private diagramEngine: DiagramEngine, private dagreEngine: DagreEngine) {}\n\n  ngOnInit() {\n    const nodesDefaultDimensions = { height: 200, width: 200 };\n    this.diagramEngine.registerDefaultFactories();\n\n    this.diagramModel = this.diagramEngine.createDiagram();\n\n    const node1 = new DefaultNodeModel();\n    node1.setCoords({ x: 500, y: 300 });\n    node1.setDimensions(nodesDefaultDimensions);\n    const outport1 = node1.addOutPort({ name: 'outport1' });\n\n    const node2 = new DefaultNodeModel();\n    node2.setCoords({ x: 1000, y: 0 });\n    node2.setDimensions(nodesDefaultDimensions);\n    const inport = node2.addInPort({ name: 'inport2' });\n\n    for (let index = 0; index < 2; index++) {\n      const nodeLoop = new DefaultNodeModel();\n      nodeLoop.setCoords({\n        x: 1000 * (Math.random() * 10),\n        y: 300 + index * (Math.random() * 10) * 300\n      });\n      nodeLoop.setDimensions(nodesDefaultDimensions);\n      const inportLoop = nodeLoop.addInPort({ name: `inport${index + 3}` });\n\n      this.diagramModel.addNode(nodeLoop);\n\n      const linkLoop = outport1.link(inportLoop);\n      this.diagramModel.addLink(linkLoop);\n    }\n\n    const link = outport1.link(inport);\n\n    this.diagramModel.addAll(node1, node2, link);\n\n    this.diagramEngine.zoomToFit();\n  }\n\n  autoArrange() {\n    this.dagreEngine.redistribute(this.diagramModel, {\n      graph: { align: 'DL', rankdir: 'LR', ranksep: 150 }\n    });\n    this.diagramEngine.zoomToFit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".demo-diagram {\n  display: flex;\n  height: 100%;\n  min-height: 100vh;\n  background-color: #3c3c3c;\n  background-image: linear-gradient(\n      0deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    ),\n    linear-gradient(\n      90deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    );\n  background-size: 50px 50px;\n}\n\n.action-bar {\n  position: relative;\n  width: 100%;\n  height: 40px;\n  z-index: 2000;\n  background-color: white;\n  display: flex;\n  align-items: center;\n  * {\n    margin: 0 10px;\n  }\n}\n",
                    "styleUrl": "../demo-diagram.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine"
                    },
                    {
                        "name": "dagreEngine",
                        "type": "DagreEngine"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dagreEngine",
                        "type": "DagreEngine",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "BasicExampleStoryComponent",
            "id": "component-BasicExampleStoryComponent-eecdec20a1e7dcfeb5109c52973df697",
            "file": "libs/angular/stories/examples/basic/basic.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "../demo-diagram.component.scss"
            ],
            "styles": [],
            "template": "<ngdx-diagram class=\"demo-diagram\" [model]=\"diagramModel\"></ngdx-diagram>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "diagramModel",
                    "type": "DiagramModel",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { DiagramEngine } from '@ngx-diagrams/angular';\nimport { DiagramModel, DefaultNodeModel } from '@ngx-diagrams/core';\n\n@Component({\n  selector: 'app-root',\n  template: `<ngdx-diagram class=\"demo-diagram\" [model]=\"diagramModel\"></ngdx-diagram>`,\n  styleUrls: ['../demo-diagram.component.scss']\n})\nexport class BasicExampleStoryComponent implements OnInit {\n  diagramModel: DiagramModel;\n\n  constructor(private diagramEngine: DiagramEngine) {}\n\n  ngOnInit() {\n    const nodesDefaultDimensions = { height: 200, width: 200 };\n    this.diagramEngine.registerDefaultFactories();\n\n    this.diagramModel = this.diagramEngine.createDiagram();\n\n    const node1 = new DefaultNodeModel();\n    node1.setCoords({ x: 500, y: 300 });\n    node1.setDimensions(nodesDefaultDimensions);\n    const outport1 = node1.addOutPort({ name: 'outport1' });\n\n    const node2 = new DefaultNodeModel();\n    node2.setCoords({ x: 1000, y: 0 });\n    node2.setDimensions(nodesDefaultDimensions);\n    const inport = node2.addInPort({ name: 'inport2' });\n\n    for (let index = 0; index < 2; index++) {\n      const nodeLoop = new DefaultNodeModel();\n      nodeLoop.setCoords({ x: 1000, y: 300 + index * 300 });\n      nodeLoop.setDimensions(nodesDefaultDimensions);\n      nodeLoop.addInPort({ name: `inport${index + 3}` });\n\n      this.diagramModel.addNode(nodeLoop);\n    }\n\n    const link = outport1.link(inport);\n    link.setLocked();\n\n    this.diagramModel.addAll(node1, node2, link);\n\n    this.diagramModel.getDiagramEngine().zoomToFit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".demo-diagram {\n  display: flex;\n  height: 100%;\n  min-height: 100vh;\n  background-color: #3c3c3c;\n  background-image: linear-gradient(\n      0deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    ),\n    linear-gradient(\n      90deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    );\n  background-size: 50px 50px;\n}\n\n.action-bar {\n  position: relative;\n  width: 100%;\n  height: 40px;\n  z-index: 2000;\n  background-color: white;\n  display: flex;\n  align-items: center;\n  * {\n    margin: 0 10px;\n  }\n}\n",
                    "styleUrl": "../demo-diagram.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "CustomLabelComponent",
            "id": "component-CustomLabelComponent-f93b7c503e48087643166adbf763857e",
            "file": "libs/angular/stories/label/custom/custom-label.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "custom-label",
            "styleUrls": [
                "./custom-label.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./custom-label.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { DefaultLabelModel } from '@ngx-diagrams/core';\n\n@Component({\n  selector: 'custom-label',\n  templateUrl: './custom-label.component.html',\n  styleUrls: ['./custom-label.component.scss']\n})\nexport class CustomLabelComponent extends DefaultLabelModel {\n  constructor() {\n    super('custom');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".default-label {\n  background-image: linear-gradient(to left, violet, indigo, blue, green, yellow, orange, red);\n  background-clip: text;\n  color: transparent;\n  font-size: 24px;\n  user-select: none;\n}\n",
                    "styleUrl": "./custom-label.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "extends": "DefaultLabelModel",
            "templateData": "<div\n  class=\"default-label\"\n  [ngStyle]=\"{\n    transform:\n      'translate(' +\n      (selectCoords() | async).x +\n      'px, ' +\n      (selectCoords() | async).y +\n      'px)' +\n      'rotate(' +\n      (selectRotation() | async) +\n      'deg)'\n  }\"\n>\n  {{ selectLabel() | async }}\n</div>\n"
        },
        {
            "name": "CustomLabelDiagramComponent",
            "id": "component-CustomLabelDiagramComponent-7727e1d97b423a8462edb218c89d75c1",
            "file": "libs/angular/stories/label/custom/diagram.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "../demo-diagram.component.scss"
            ],
            "styles": [],
            "template": "<ngdx-diagram class=\"demo-diagram\" [model]=\"diagramModel\"></ngdx-diagram>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "diagramModel",
                    "type": "DiagramModel",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ComponentFactoryResolver, OnInit, Renderer2 } from '@angular/core';\nimport { DiagramEngine } from '@ngx-diagrams/angular';\nimport { DiagramModel, DefaultNodeModel, DefaultLabelModel } from '@ngx-diagrams/core';\nimport { CustomLabelFactory } from './custom.factory';\n\n@Component({\n  selector: 'app-root',\n  template: `<ngdx-diagram class=\"demo-diagram\" [model]=\"diagramModel\"></ngdx-diagram>`,\n  styleUrls: ['../demo-diagram.component.scss']\n})\nexport class CustomLabelDiagramComponent implements OnInit {\n  diagramModel: DiagramModel;\n\n  constructor(\n    private diagramEngine: DiagramEngine,\n    private resolver: ComponentFactoryResolver,\n    private renderer: Renderer2\n  ) {}\n\n  ngOnInit() {\n    const nodesDefaultDimensions = { height: 200, width: 200 };\n    this.diagramEngine.registerDefaultFactories();\n    this.diagramEngine\n      .getFactoriesManager()\n      .registerFactory({ type: 'labelFactories', factory: new CustomLabelFactory(this.resolver, this.renderer) });\n\n    this.diagramModel = this.diagramEngine.createDiagram();\n\n    const node1 = new DefaultNodeModel();\n    node1.setCoords({ x: 500, y: 300 });\n    node1.setDimensions(nodesDefaultDimensions);\n    const outport1 = node1.addOutPort({ name: 'outport1' });\n\n    const node2 = new DefaultNodeModel();\n    node2.setCoords({ x: 1500, y: 300 });\n    node2.setDimensions(nodesDefaultDimensions);\n    const inport = node2.addInPort({ name: 'inport2' });\n\n    const link = outport1.link(inport);\n    const label = new DefaultLabelModel(\"I'm a custom label\", 'custom-label');\n    link.setLabel(label);\n    link.setLocked();\n\n    this.diagramModel.addAll(node1, node2, link);\n\n    this.diagramModel.getDiagramEngine().zoomToFit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".demo-diagram {\n  display: flex;\n  height: 100%;\n  min-height: 100vh;\n  background-color: #3c3c3c;\n  background-image: linear-gradient(\n      0deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    ),\n    linear-gradient(\n      90deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    );\n  background-size: 50px 50px;\n}\n",
                    "styleUrl": "../demo-diagram.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine"
                    },
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "CustomLinkComponent",
            "id": "component-CustomLinkComponent-83001f6c4ed1bf1210cdc07dd69c6464",
            "file": "libs/angular/stories/link/custom/custom-link.component.ts",
            "changeDetection": "ChangeDetectionStrategy.Default",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "custom-link",
            "styleUrls": [
                "./custom-link.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./custom-link.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_path$",
                    "defaultValue": "new BehaviorSubject('')",
                    "type": "BehaviorSubject<string>",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "hover",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "labelLayer",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'labelLayer', {read: ViewContainerRef, static: true}"
                        }
                    ]
                },
                {
                    "name": "path$",
                    "defaultValue": "this._path$.pipe(\n    this.entityPipe('path'),\n    tap(() => this.cd.detectChanges())\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "calcCenterOfPath",
                    "args": [],
                    "optional": false,
                    "returnType": "Coords",
                    "typeParameters": [],
                    "line": 57
                },
                {
                    "name": "deleteLink",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ViewChild,\n  ViewContainerRef\n} from '@angular/core';\nimport { DefaultLinkModel, generateCurvePath, Coords } from '@ngx-diagrams/core';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'custom-link',\n  templateUrl: './custom-link.component.html',\n  styleUrls: ['./custom-link.component.scss'],\n  changeDetection: ChangeDetectionStrategy.Default\n})\nexport class CustomLinkComponent extends DefaultLinkModel implements AfterViewInit {\n  @ViewChild('labelLayer', { read: ViewContainerRef, static: true })\n  labelLayer: ViewContainerRef;\n\n  _path$: BehaviorSubject<string> = new BehaviorSubject('');\n  path$ = this._path$.pipe(\n    this.entityPipe('path'),\n    tap(() => this.cd.detectChanges())\n  );\n\n  hover = false;\n\n  constructor(private cd: ChangeDetectorRef) {\n    super({ type: 'custom-link', logPrefix: '[CustomLink]' });\n  }\n\n  ngAfterViewInit() {\n    const firstPCoords$ = this.getFirstPoint().selectCoords();\n    const lastPCoords$ = this.getLastPoint().selectCoords();\n\n    combineLatest([firstPCoords$, lastPCoords$]).subscribe(([firstPCoords, lastPCoords]) => {\n      const points = [firstPCoords, lastPCoords];\n\n      const isHorizontal = Math.abs(firstPCoords.x - lastPCoords.x) > Math.abs(firstPCoords.y - lastPCoords.y);\n      const xOrY = isHorizontal ? 'x' : 'y';\n\n      // draw the smoothing\n      // if the points are too close, just draw a straight line\n      let isStraight = false;\n      if (Math.abs(points[0][xOrY] - points[1][xOrY]) < 150) {\n        isStraight = true;\n      }\n\n      const path = generateCurvePath(firstPCoords, lastPCoords, isStraight ? 0 : 200);\n      this._path$.next(path);\n    });\n  }\n\n  calcCenterOfPath(): Coords {\n    const firstPointCoords = this.getFirstPoint().getCoords();\n    const lastPointCoords = this.getLastPoint().getCoords();\n    return { x: (firstPointCoords.x + lastPointCoords.x) / 2, y: (firstPointCoords.y + lastPointCoords.y) / 2 };\n  }\n\n  deleteLink() {\n    this.destroy();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".custom-link {\n  #triangle {\n    path {\n      fill: currentColor;\n    }\n  }\n}\n\n.custom-link-container {\n  position: relative;\n  fill: none;\n  overflow: visible;\n  pointer-events: all;\n}\n\n.default-point {\n  color: lightgray;\n  overflow: visible;\n  pointer-events: all;\n\n  &.hovered {\n    color: rgb(0, 192, 255);\n  }\n}\n\n.delete-icon {\n  color: white;\n  cursor: pointer;\n  display: flex;\n  pointer-events: all;\n}\n",
                    "styleUrl": "./custom-link.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "DefaultLinkModel",
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<!-- Label Host -->\n<ng-template #labelLayer></ng-template>\n\n<svg class=\"custom-link-container\" [ngStyle]=\"{ color: selectColor() | async }\">\n  <g>\n    <defs>\n      <marker\n        id=\"triangle\"\n        viewBox=\"0 0 20 20\"\n        refX=\"15\"\n        refY=\"4\"\n        markerUnits=\"strokeWidth\"\n        markerWidth=\"1\"\n        markerHeight=\"1\"\n        orient=\"auto\"\n      >\n        <path\n          d=\"M 0 0 L 10 5 L 0 10 z\"\n          fill=\"currentcolor\"\n          stroke=\"currentcolor\"\n        />\n      </marker>\n    </defs>\n    <path\n      [attr.stroke-width]=\"width\"\n      [attr.stroke]=\"selectColor() | async\"\n      [attr.d]=\"path$ | async\"\n      class=\"custom-link\"\n      (mouseleave)=\"setHovered(false)\"\n      (mouseenter)=\"setHovered()\"\n      [ngClass]=\"{ hovered: selectHovered() | async }\"\n      marker-end=\"url(#triangle)\"\n    ></path>\n    <path\n      class=\"custom-link\"\n      (mouseleave)=\"setHovered(false)\"\n      (mouseenter)=\"setHovered()\"\n      [attr.stroke-width]=\"20\"\n      [attr.stroke]=\"selectColor() | async\"\n      [attr.stroke-linecap]=\"'round'\"\n      [attr.data-linkid]=\"id\"\n      [attr.stroke-opacity]=\"(selectHovered() | async) ? '0.1' : '0'\"\n      [attr.d]=\"path$ | async\"\n      marker-end=\"url(#triangle)\"\n    ></path>\n  </g>\n\n  <!-- Points -->\n  <g *ngFor=\"let point of getPoints()\" [id]=\"point.id\">\n    <circle\n      fill=\"currentColor\"\n      [attr.cx]=\"point.selectX() | async\"\n      [attr.cy]=\"point.selectY() | async\"\n      r=\"5\"\n      class=\"default-point\"\n      [ngClass]=\"{ hovered: point.selectHovered() | async }\"\n    />\n    <circle\n      [attr.data-pointid]=\"point.id\"\n      [attr.data-linkid]=\"id\"\n      (mouseleave)=\"point.setHovered(false); setHovered(false)\"\n      (mouseenter)=\"point.setHovered(); setHovered()\"\n      [attr.cx]=\"point.selectX() | async\"\n      [attr.cy]=\"point.selectY() | async\"\n      r=\"15\"\n      [attr.opacity]=\"0\"\n      [ngClass]=\"{ selected: point.selectSelected() | async }\"\n    />\n  </g>\n</svg>\n\n<div\n  (click)=\"deleteLink()\"\n  class=\"delete-icon\"\n  [ngStyle]=\"{\n    transform:\n      'translate(' +\n      calcCenterOfPath().x +\n      'px, ' +\n      (calcCenterOfPath().y - 200) +\n      'px)'\n  }\"\n>\n  <svg\n    fill=\"currentcolor\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    height=\"30px\"\n    viewBox=\"-47 0 512 512\"\n    width=\"30px\"\n  >\n    <path\n      fill=\"currentcolor\"\n      d=\"m416.875 114.441406-11.304688-33.886718c-4.304687-12.90625-16.339843-21.578126-29.941406-21.578126h-95.011718v-30.933593c0-15.460938-12.570313-28.042969-28.027344-28.042969h-87.007813c-15.453125 0-28.027343 12.582031-28.027343 28.042969v30.933593h-95.007813c-13.605469 0-25.640625 8.671876-29.945313 21.578126l-11.304687 33.886718c-2.574219 7.714844-1.2695312 16.257813 3.484375 22.855469 4.753906 6.597656 12.445312 10.539063 20.578125 10.539063h11.816406l26.007813 321.605468c1.933594 23.863282 22.183594 42.558594 46.109375 42.558594h204.863281c23.921875 0 44.175781-18.695312 46.105469-42.5625l26.007812-321.601562h6.542969c8.132812 0 15.824219-3.941407 20.578125-10.535157 4.753906-6.597656 6.058594-15.144531 3.484375-22.859375zm-249.320312-84.441406h83.0625v28.976562h-83.0625zm162.804687 437.019531c-.679687 8.402344-7.796875 14.980469-16.203125 14.980469h-204.863281c-8.40625 0-15.523438-6.578125-16.203125-14.980469l-25.816406-319.183593h288.898437zm-298.566406-349.183593 9.269531-27.789063c.210938-.640625.808594-1.070313 1.484375-1.070313h333.082031c.675782 0 1.269532.429688 1.484375 1.070313l9.269531 27.789063zm0 0\"\n    />\n    <path\n      fill=\"currentcolor\"\n      d=\"m282.515625 465.957031c.265625.015625.527344.019531.792969.019531 7.925781 0 14.550781-6.210937 14.964844-14.21875l14.085937-270.398437c.429687-8.273437-5.929687-15.332031-14.199219-15.761719-8.292968-.441406-15.328125 5.925782-15.761718 14.199219l-14.082032 270.398437c-.429687 8.273438 5.925782 15.332032 14.199219 15.761719zm0 0\"\n    />\n    <path\n      fill=\"currentcolor\"\n      d=\"m120.566406 451.792969c.4375 7.996093 7.054688 14.183593 14.964844 14.183593.273438 0 .554688-.007812.832031-.023437 8.269531-.449219 14.609375-7.519531 14.160157-15.792969l-14.753907-270.398437c-.449219-8.273438-7.519531-14.613281-15.792969-14.160157-8.269531.449219-14.609374 7.519532-14.160156 15.792969zm0 0\"\n    />\n    <path\n      fill=\"currentcolor\"\n      d=\"m209.253906 465.976562c8.285156 0 15-6.714843 15-15v-270.398437c0-8.285156-6.714844-15-15-15s-15 6.714844-15 15v270.398437c0 8.285157 6.714844 15 15 15zm0 0\"\n    />\n  </svg>\n</div>\n"
        },
        {
            "name": "CustomLinkDiagramComponent",
            "id": "component-CustomLinkDiagramComponent-ead309da89e6c46c66297ce941ffef84",
            "file": "libs/angular/stories/link/custom/diagram.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "../demo-diagram.component.scss"
            ],
            "styles": [],
            "template": "<ngdx-diagram class=\"demo-diagram\" [model]=\"diagramModel\"></ngdx-diagram>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "nodeHeight",
                    "defaultValue": "200",
                    "line": 13
                },
                {
                    "name": "nodeWidth",
                    "defaultValue": "200",
                    "line": 14
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "diagramModel",
                    "type": "DiagramModel",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ComponentFactoryResolver, Input, OnInit, Renderer2 } from '@angular/core';\nimport { DiagramEngine } from '@ngx-diagrams/angular';\nimport { DiagramModel, DefaultNodeModel, DefaultLinkModel } from '@ngx-diagrams/core';\nimport { CustomLinkFactory } from './custom.factory';\n\n@Component({\n  selector: 'app-root',\n  template: `<ngdx-diagram class=\"demo-diagram\" [model]=\"diagramModel\"></ngdx-diagram>`,\n  styleUrls: ['../demo-diagram.component.scss']\n})\nexport class CustomLinkDiagramComponent implements OnInit {\n  diagramModel: DiagramModel;\n  @Input() nodeHeight = 200;\n  @Input() nodeWidth = 200;\n\n  constructor(\n    private diagramEngine: DiagramEngine,\n    private resolver: ComponentFactoryResolver,\n    private renderer: Renderer2\n  ) {}\n\n  ngOnInit() {\n    const nodesDefaultDimensions = {\n      height: this.nodeHeight,\n      width: this.nodeWidth\n    };\n    this.diagramEngine.registerDefaultFactories();\n    this.diagramEngine\n      .getFactoriesManager()\n      .registerFactory({ type: 'linkFactories', factory: new CustomLinkFactory(this.resolver, this.renderer) });\n\n    this.diagramModel = this.diagramEngine.createDiagram();\n\n    const node1 = new DefaultNodeModel();\n    node1.setCoords({ x: 500, y: 300 });\n    node1.setDimensions(nodesDefaultDimensions);\n    const outport1 = node1.addOutPort({\n      name: 'outport1',\n      linkType: 'custom-link',\n      maximumLinks: 3\n    });\n\n    const node2 = new DefaultNodeModel();\n    node2.setCoords({ x: 1000, y: 300 });\n    node2.setDimensions(nodesDefaultDimensions);\n    const inport = node2.addInPort({ name: 'inport2' });\n\n    const link = new DefaultLinkModel({ type: 'custom-link' });\n\n    link.setSourcePort(outport1);\n    link.setTargetPort(inport);\n\n    this.diagramModel.addAll(node1, node2, link);\n\n    this.diagramModel.getDiagramEngine().zoomToFit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".demo-diagram {\n  display: flex;\n  height: 100%;\n  min-height: 100vh;\n  background-color: #3c3c3c;\n  background-image: linear-gradient(\n      0deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    ),\n    linear-gradient(\n      90deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    );\n  background-size: 50px 50px;\n}\n",
                    "styleUrl": "../demo-diagram.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine"
                    },
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "CustomNodeComponent",
            "id": "component-CustomNodeComponent-68dfa7e9328e8a477304852ae513e34b",
            "file": "libs/angular/stories/node/custom/custom.component.ts",
            "changeDetection": "ChangeDetectionStrategy.Default",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "custom-node",
            "styleUrls": [
                "./custom.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./custom.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "nodeContent",
                    "defaultValue": "'Pick me!'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport { DefaultNodeModel } from '@ngx-diagrams/core';\n\n@Component({\n  selector: 'custom-node',\n  templateUrl: './custom.component.html',\n  styleUrls: ['./custom.component.scss'],\n  changeDetection: ChangeDetectionStrategy.Default\n})\nexport class CustomNodeComponent extends DefaultNodeModel implements OnInit {\n  nodeContent = 'Pick me!';\n\n  constructor() {\n    super({ type: 'custom-node' });\n  }\n\n  ngOnInit() {\n    this.selectSelected().subscribe((selected) => {\n      this.nodeContent = selected ? 'Thank you 🙏' : 'Pick me!';\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  &.selected {\n    .custom-node {\n      &:after {\n        box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\n        border-color: #86d8b9;\n      }\n    }\n  }\n\n  .custom-node {\n    user-select: none;\n    pointer-events: all;\n    background-color: white !important;\n    border-radius: 16px;\n    transition: all 0.3s ease-in-out;\n    padding: 20px;\n    cursor: auto;\n    border: 1px solid #e1e2e6;\n\n    &:hover {\n      cursor: pointer;\n      border-color: #86d8b9;\n    }\n\n    &:after {\n      transition: all 0.3s ease-in-out;\n      content: '';\n      position: absolute;\n      top: 12px;\n      right: 4px;\n      bottom: 4px;\n      left: 12px;\n      z-index: -1;\n      margin: -9px;\n      border-radius: 16px;\n    }\n\n    &:after {\n      background: #86d8b9;\n    }\n  }\n}\n",
                    "styleUrl": "./custom.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "extends": "DefaultNodeModel",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"custom-node\">\n  <div>{{ nodeContent }}</div>\n\n  <div class=\"ports\">\n    <ng-template #portsLayer></ng-template>\n  </div>\n</div>\n"
        },
        {
            "name": "CustomNodeDiagramComponent",
            "id": "component-CustomNodeDiagramComponent-013c95c76235e6a97569eebd904bf2ad",
            "file": "libs/angular/stories/node/custom/diagram.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "../demo-diagram.component.scss"
            ],
            "styles": [],
            "template": "<ngdx-diagram class=\"demo-diagram\" [model]=\"diagramModel\"></ngdx-diagram>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "nodeHeight",
                    "defaultValue": "200",
                    "line": 13
                },
                {
                    "name": "nodeWidth",
                    "defaultValue": "200",
                    "line": 14
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "diagramModel",
                    "type": "DiagramModel",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "e",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ComponentFactoryResolver, Input, OnChanges, OnInit, Renderer2, SimpleChanges } from '@angular/core';\nimport { DiagramEngine } from '@ngx-diagrams/angular';\nimport { DiagramModel, DefaultNodeModel } from '@ngx-diagrams/core';\nimport { CustomNodeFactory } from './custom.factory';\n\n@Component({\n  selector: 'app-root',\n  template: `<ngdx-diagram class=\"demo-diagram\" [model]=\"diagramModel\"></ngdx-diagram>`,\n  styleUrls: ['../demo-diagram.component.scss']\n})\nexport class CustomNodeDiagramComponent implements OnInit, OnChanges {\n  diagramModel: DiagramModel;\n  @Input() nodeHeight = 200;\n  @Input() nodeWidth = 200;\n\n  constructor(\n    private diagramEngine: DiagramEngine,\n    private resolver: ComponentFactoryResolver,\n    private renderer: Renderer2\n  ) {}\n\n  ngOnInit() {\n    const nodesDefaultDimensions = {\n      height: this.nodeHeight,\n      width: this.nodeWidth\n    };\n    this.diagramEngine.registerDefaultFactories();\n    this.diagramEngine\n      .getFactoriesManager()\n      .registerFactory({ type: 'nodeFactories', factory: new CustomNodeFactory(this.resolver, this.renderer) });\n\n    this.diagramModel = this.diagramEngine.createDiagram();\n\n    const node1 = new DefaultNodeModel({ type: 'custom-node' });\n    node1.setCoords({ x: 500, y: 300 });\n    node1.setDimensions(nodesDefaultDimensions);\n\n    this.diagramModel.addAll(node1);\n\n    this.diagramModel.getDiagramEngine().zoomToFit();\n  }\n\n  ngOnChanges(e: SimpleChanges) {\n    if (this.diagramModel) {\n      if (e.nodeHeight) {\n        Object.values(this.diagramModel.getNodes()).forEach((node) => {\n          node.setHeight(e.nodeHeight.currentValue);\n        });\n      }\n\n      if (e.nodeWidth) {\n        Object.values(this.diagramModel.getNodes()).forEach((node) => {\n          node.setWidth(e.nodeWidth.currentValue);\n        });\n      }\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".demo-diagram {\n  display: flex;\n  height: 100%;\n  min-height: 100vh;\n  background-color: #3c3c3c;\n  background-image: linear-gradient(\n      0deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    ),\n    linear-gradient(\n      90deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    );\n  background-size: 50px 50px;\n}\n",
                    "styleUrl": "../demo-diagram.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine"
                    },
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ]
        },
        {
            "name": "CustomPortComponent",
            "id": "component-CustomPortComponent-de5b9e332550ce97ba600116557be7e2",
            "file": "libs/angular/stories/port/custom/custom.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "custom-port",
            "styleUrls": [
                "./custom.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./custom.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { DefaultPortModel } from '@ngx-diagrams/core';\n\n@Component({\n  selector: 'custom-port',\n  templateUrl: './custom.component.html',\n  styleUrls: ['./custom.component.scss']\n})\nexport class CustomPortComponent extends DefaultPortModel {\n  constructor() {\n    super();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  position: absolute;\n\n  &.in {\n    left: 45%;\n    top: -10px;\n  }\n}\n",
                    "styleUrl": "./custom.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "extends": "DefaultPortModel",
            "templateData": "<svg class=\"in\" *ngIf=\"in\" width=\"24\" height=\"16\" viewBox=\"0 0 24 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n  <path\n    d=\"M23.4092 0.839456L23.4096 0.839967C23.4709 0.93801 23.5 1.04467 23.5 1.14951C23.5 1.24656 23.4748 1.34624 23.421 1.44004L12.6823 15.1163L12.6657 15.1375L12.6514 15.1603C12.5272 15.3593 12.2828 15.5 11.9998 15.5C11.7164 15.5 11.4727 15.3596 11.3489 15.1608L11.3345 15.1377L11.3177 15.1163L0.578554 1.44007C0.470045 1.25053 0.474001 1.02677 0.590099 0.84006C0.714827 0.640412 0.959347 0.499999 1.2421 0.499999L22.7579 0.5C23.041 0.5 23.285 0.640261 23.4092 0.839456Z\"\n    fill=\"white\"\n    stroke=\"#B0B0B0\"\n  />\n</svg>\n"
        },
        {
            "name": "CustomPortDiagramComponent",
            "id": "component-CustomPortDiagramComponent-4e19e3a904df62ffcedda55220f6cf2f",
            "file": "libs/angular/stories/port/custom/diagram.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "../demo-diagram.component.scss"
            ],
            "styles": [],
            "template": "<ngdx-diagram class=\"demo-diagram\" [model]=\"diagramModel\"></ngdx-diagram>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "diagramModel",
                    "type": "DiagramModel",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ComponentFactoryResolver, OnInit, Renderer2 } from '@angular/core';\nimport { DiagramEngine } from '@ngx-diagrams/angular';\nimport { DiagramModel, DefaultNodeModel, DefaultPortModel } from '@ngx-diagrams/core';\nimport { CustomPortFactory } from './custom.factory';\n\n@Component({\n  selector: 'app-root',\n  template: `<ngdx-diagram class=\"demo-diagram\" [model]=\"diagramModel\"></ngdx-diagram>`,\n  styleUrls: ['../demo-diagram.component.scss']\n})\nexport class CustomPortDiagramComponent implements OnInit {\n  diagramModel: DiagramModel;\n\n  constructor(\n    private diagramEngine: DiagramEngine,\n    private resolver: ComponentFactoryResolver,\n    private renderer: Renderer2\n  ) {}\n\n  ngOnInit() {\n    const nodesDefaultDimensions = { height: 200, width: 200 };\n    this.diagramEngine.registerDefaultFactories();\n    this.diagramEngine\n      .getFactoriesManager()\n      .registerFactory({ type: 'portFactories', factory: new CustomPortFactory(this.resolver, this.renderer) });\n\n    this.diagramModel = this.diagramEngine.createDiagram();\n\n    const node1 = new DefaultNodeModel();\n    node1.setCoords({ x: 500, y: 300 });\n    node1.setDimensions(nodesDefaultDimensions);\n    const port1 = new DefaultPortModel({ type: 'custom-port' });\n    node1.addPort(port1);\n\n    this.diagramModel.addAll(node1);\n\n    this.diagramModel.getDiagramEngine().zoomToFit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".demo-diagram {\n  display: flex;\n  height: 100%;\n  min-height: 100vh;\n  background-color: #3c3c3c;\n  background-image: linear-gradient(\n      0deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    ),\n    linear-gradient(\n      90deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    );\n  background-size: 50px 50px;\n}\n",
                    "styleUrl": "../demo-diagram.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine"
                    },
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "DefaultLabelComponent",
            "id": "component-DefaultLabelComponent-ce55465e2569aa9b70a4812c8642c425",
            "file": "libs/angular/src/lib/defaults/components/default-label/default-label.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ngdx-default-label",
            "styleUrls": [
                "./default-label.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./default-label.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { DefaultLabelModel } from '@ngx-diagrams/core';\n\n@Component({\n  selector: 'ngdx-default-label',\n  templateUrl: './default-label.component.html',\n  styleUrls: ['./default-label.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DefaultLabelComponent extends DefaultLabelModel {\n  constructor() {\n    super('ngdx-default-label');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".default-label {\n  color: white;\n  user-select: none;\n}\n",
                    "styleUrl": "./default-label.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 10
            },
            "extends": "DefaultLabelModel",
            "templateData": "<div\n  class=\"default-label\"\n  [ngStyle]=\"{\n    transform:\n      'translate(' +\n      (selectCoords() | async).x +\n      'px, ' +\n      (selectCoords() | async).y +\n      'px)' +\n      'rotate(' +\n      (selectRotation() | async) +\n      'deg)'\n  }\"\n>\n  {{ selectLabel() | async }}\n</div>\n"
        },
        {
            "name": "DefaultLabelStoryComponent",
            "id": "component-DefaultLabelStoryComponent-5380e48906590d60de20a7e8848516c8",
            "file": "libs/angular/stories/label/default/default.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "../demo-diagram.component.scss"
            ],
            "styles": [],
            "template": "<ngdx-diagram class=\"demo-diagram\" [model]=\"diagramModel\"></ngdx-diagram>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "diagramModel",
                    "type": "DiagramModel",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { DiagramEngine } from '@ngx-diagrams/angular';\nimport { DiagramModel, DefaultNodeModel, DefaultLabelModel } from '@ngx-diagrams/core';\n\n@Component({\n  selector: 'app-root',\n  template: `<ngdx-diagram class=\"demo-diagram\" [model]=\"diagramModel\"></ngdx-diagram>`,\n  styleUrls: ['../demo-diagram.component.scss']\n})\nexport class DefaultLabelStoryComponent implements OnInit {\n  diagramModel: DiagramModel;\n\n  constructor(private diagramEngine: DiagramEngine) {}\n\n  ngOnInit() {\n    const nodesDefaultDimensions = { height: 200, width: 200 };\n    this.diagramEngine.registerDefaultFactories();\n\n    this.diagramModel = this.diagramEngine.createDiagram();\n\n    const node1 = new DefaultNodeModel();\n    node1.setCoords({ x: 500, y: 300 });\n    node1.setDimensions(nodesDefaultDimensions);\n    const outport1 = node1.addOutPort({ name: 'outport1' });\n\n    const node2 = new DefaultNodeModel();\n    node2.setCoords({ x: 1000, y: 300 });\n    node2.setDimensions(nodesDefaultDimensions);\n    const inport = node2.addInPort({ name: 'inport2' });\n\n    const link = outport1.link(inport);\n    const label = new DefaultLabelModel(\"I'm a label\");\n    link.setLabel(label);\n    link.setLocked();\n\n    this.diagramModel.addAll(node1, node2, link);\n\n    this.diagramModel.getDiagramEngine().zoomToFit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".demo-diagram {\n  display: flex;\n  height: 100%;\n  min-height: 100vh;\n  background-color: #3c3c3c;\n  background-image: linear-gradient(\n      0deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    ),\n    linear-gradient(\n      90deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    );\n  background-size: 50px 50px;\n}\n",
                    "styleUrl": "../demo-diagram.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "DefaultLinkComponent",
            "id": "component-DefaultLinkComponent-48174353671696031dbf412d4ded78a7",
            "file": "libs/angular/src/lib/defaults/components/default-link/default-link.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ngdx-default-link",
            "styleUrls": [
                "./default-link.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./default-link.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "labelLayer",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'labelLayer', {read: ViewContainerRef, static: true}"
                        }
                    ]
                },
                {
                    "name": "path$",
                    "defaultValue": "createValueState<string>(null, this.entityPipe('path'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "points$",
                    "defaultValue": "createValueState<PointModel[]>([], this.entityPipe('points'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "calcCenterOfPath",
                    "args": [
                        {
                            "name": "firstPoint",
                            "type": "Coords"
                        },
                        {
                            "name": "secondPoint",
                            "type": "Coords"
                        }
                    ],
                    "optional": false,
                    "returnType": "Coords",
                    "typeParameters": [],
                    "line": 90,
                    "jsdoctags": [
                        {
                            "name": "firstPoint",
                            "type": "Coords",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "secondPoint",
                            "type": "Coords",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calcLabelIncline",
                    "args": [
                        {
                            "name": "firstPoint",
                            "type": "Coords"
                        },
                        {
                            "name": "secondPoint",
                            "type": "Coords"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 73,
                    "jsdoctags": [
                        {
                            "name": "firstPoint",
                            "type": "Coords",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "secondPoint",
                            "type": "Coords",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34
                },
                {
                    "name": "selectPath",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 94
                },
                {
                    "name": "trackByPoints",
                    "args": [
                        {
                            "name": "i",
                            "type": "number"
                        },
                        {
                            "name": "point",
                            "type": "PointModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 30,
                    "jsdoctags": [
                        {
                            "name": "i",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "point",
                            "type": "PointModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ViewChild,\n  ViewContainerRef\n} from '@angular/core';\nimport { createValueState, PointModel, generateCurvePath, Coords, DefaultLinkModel } from '@ngx-diagrams/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'ngdx-default-link',\n  templateUrl: './default-link.component.html',\n  styleUrls: ['./default-link.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DefaultLinkComponent extends DefaultLinkModel implements AfterViewInit {\n  @ViewChild('labelLayer', { read: ViewContainerRef, static: true })\n  labelLayer: ViewContainerRef;\n\n  path$ = createValueState<string>(null, this.entityPipe('path'));\n  points$ = createValueState<PointModel[]>([], this.entityPipe('points'));\n\n  constructor(private cdRef: ChangeDetectorRef) {\n    super({ type: 'ngdx-default-link' });\n  }\n\n  trackByPoints(i: number, point: PointModel) {\n    return point.id;\n  }\n\n  ngAfterViewInit() {\n    const firstPCoords$ = this.getFirstPoint().selectCoords();\n    const lastPCoords$ = this.getLastPoint().selectCoords();\n\n    // Observe link coords and update drawing accordingly\n    combineLatest([firstPCoords$, lastPCoords$])\n      .pipe(takeUntil(this.onEntityDestroy()))\n      .subscribe(([firstPCoords, lastPCoords]) => {\n        const points = [firstPCoords, lastPCoords];\n\n        // handle regular links\n        // draw the smoothing\n        // if the points are too close, just draw a straight line\n        const isHorizontal = Math.abs(firstPCoords.x - lastPCoords.x) > Math.abs(firstPCoords.y - lastPCoords.y);\n        const xOrY = isHorizontal ? 'x' : 'y';\n        let isStraight = false;\n        if (Math.abs(points[0][xOrY] - points[1][xOrY]) < 50) {\n          isStraight = true;\n        }\n\n        const path = generateCurvePath(firstPCoords, lastPCoords, isStraight ? 0 : this.curvyness);\n        this.path$.set(path).emit();\n\n        const label = this.getLabel();\n        // update label position\n        if (label) {\n          label.setCoords(this.calcCenterOfPath(firstPCoords, lastPCoords));\n\n          // TODO: check whether we want the label to rotate along with the line\n          // label.setRotation(this.calcLabelIncline(firstPCoords, lastPCoords));\n        }\n\n        // TODO: handle the multiple lines in between the points\n        // https://github.com/projectstorm/react-diagrams/blob/master/src/defaults/widgets/DefaultLinkWidget.tsx#L344-L371\n\n        this.cdRef.detectChanges();\n      });\n  }\n\n  calcLabelIncline(firstPoint: Coords, secondPoint: Coords): number {\n    const dy = secondPoint.y - firstPoint.y;\n    const dx = secondPoint.x - firstPoint.x;\n\n    if (dx === 0) {\n      return 0;\n    }\n\n    let inclineAngel = (Math.atan(dy / dx) * 180) / Math.PI;\n\n    if (inclineAngel < 0) {\n      inclineAngel += 180;\n    }\n\n    return inclineAngel;\n  }\n\n  calcCenterOfPath(firstPoint: Coords, secondPoint: Coords): Coords {\n    return { x: (firstPoint.x + secondPoint.x) / 2 + 20, y: (firstPoint.y + secondPoint.y) / 2 + 20 };\n  }\n\n  selectPath(): Observable<string> {\n    return this.path$.value$;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".link-container {\n  position: relative;\n  fill: none;\n  overflow: visible;\n  pointer-events: all;\n}\n\n.default-link {\n  fill: none;\n  overflow: visible;\n\n  @keyframes dash {\n    from {\n      stroke-dashoffset: 24;\n    }\n    to {\n      stroke-dashoffset: 0;\n    }\n  }\n\n  &.hovered {\n    stroke: rgb(0, 192, 255);\n    stroke-dasharray: 10, 2;\n    animation: dash 1s linear infinite;\n  }\n}\n\n.default-point {\n  color: lightgray;\n  overflow: visible;\n  pointer-events: all;\n\n  &.hovered {\n    color: rgb(0, 192, 255);\n  }\n}\n",
                    "styleUrl": "./default-link.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "DefaultLinkModel",
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<!-- Label Host -->\n<ng-template #labelLayer></ng-template>\n\n<svg class=\"link-container\">\n  <!-- Link -->\n  <g [id]=\"id\">\n    <path\n      [attr.stroke-width]=\"width\"\n      [attr.stroke]=\"selectColor() | async\"\n      [attr.d]=\"selectPath() | async\"\n      class=\"default-link\"\n      (mouseleave)=\"setHovered(false)\"\n      (mouseenter)=\"setHovered()\"\n      [ngClass]=\"{ hovered: selectHovered() | async }\"\n    ></path>\n    <path\n      class=\"default-link\"\n      (mouseleave)=\"setHovered(false)\"\n      (mouseenter)=\"setHovered()\"\n      [attr.stroke-width]=\"20\"\n      [attr.stroke]=\"selectColor() | async\"\n      [attr.stroke-linecap]=\"'round'\"\n      [attr.data-linkid]=\"id\"\n      [attr.stroke-opacity]=\"(selectHovered() | async) ? '0.1' : '0'\"\n      [attr.d]=\"selectPath() | async\"\n    ></path>\n  </g>\n\n  <!-- Points -->\n  <g *ngFor=\"let point of getPoints(); trackBy: trackByPoints\" [id]=\"point.id\">\n    <circle\n      fill=\"currentColor\"\n      [attr.cx]=\"point.selectX() | async\"\n      [attr.cy]=\"point.selectY() | async\"\n      r=\"5\"\n      class=\"default-point\"\n      [ngClass]=\"{ hovered: point.selectHovered() | async }\"\n    />\n    <circle\n      [attr.data-pointid]=\"point.id\"\n      [attr.data-linkid]=\"id\"\n      (mouseleave)=\"point.setHovered(false); setHovered(false)\"\n      (mouseenter)=\"point.setHovered(); setHovered()\"\n      [attr.cx]=\"point.selectX() | async\"\n      [attr.cy]=\"point.selectY() | async\"\n      r=\"15\"\n      [attr.opacity]=\"0\"\n      [ngClass]=\"{ selected: point.selectSelected() | async }\"\n    />\n  </g>\n</svg>\n"
        },
        {
            "name": "DefaultLinkStoryComponent",
            "id": "component-DefaultLinkStoryComponent-2528ed662c5731b90ed1ad14f9d5418b",
            "file": "libs/angular/stories/link/default/default.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "../demo-diagram.component.scss"
            ],
            "styles": [],
            "template": "<ngdx-diagram class=\"demo-diagram\" [model]=\"diagramModel\"></ngdx-diagram>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "diagramModel",
                    "type": "DiagramModel",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { DiagramEngine } from '@ngx-diagrams/angular';\nimport { DefaultNodeModel, DiagramModel } from '@ngx-diagrams/core';\n\n@Component({\n  selector: 'app-root',\n  template: `<ngdx-diagram class=\"demo-diagram\" [model]=\"diagramModel\"></ngdx-diagram>`,\n  styleUrls: ['../demo-diagram.component.scss']\n})\nexport class DefaultLinkStoryComponent implements OnInit {\n  diagramModel: DiagramModel;\n\n  constructor(private diagramEngine: DiagramEngine) {}\n\n  ngOnInit() {\n    const nodesDefaultDimensions = { height: 200, width: 200 };\n    this.diagramEngine.registerDefaultFactories();\n\n    this.diagramModel = this.diagramEngine.createDiagram();\n\n    const node1 = new DefaultNodeModel();\n    node1.setCoords({ x: 500, y: 300 });\n    node1.setDimensions(nodesDefaultDimensions);\n    const outport1 = node1.addOutPort({ name: 'outport1' });\n\n    const node2 = new DefaultNodeModel();\n    node2.setCoords({ x: 1000, y: 0 });\n    node2.setDimensions(nodesDefaultDimensions);\n    const inport = node2.addInPort({ name: 'inport2' });\n\n    for (let index = 0; index < 2; index++) {\n      const nodeLoop = new DefaultNodeModel();\n      nodeLoop.setCoords({ x: 1000, y: 300 + index * 300 });\n      nodeLoop.setDimensions(nodesDefaultDimensions);\n      nodeLoop.addInPort({ name: `inport${index + 3}` });\n\n      this.diagramModel.addNode(nodeLoop);\n    }\n\n    const link = outport1.link(inport);\n    link.setLocked();\n\n    this.diagramModel.addAll(node1, node2, link);\n\n    this.diagramModel.getDiagramEngine().zoomToFit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".demo-diagram {\n  display: flex;\n  height: 100%;\n  min-height: 100vh;\n  background-color: #3c3c3c;\n  background-image: linear-gradient(\n      0deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    ),\n    linear-gradient(\n      90deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    );\n  background-size: 50px 50px;\n}\n",
                    "styleUrl": "../demo-diagram.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "DefaultNodeComponent",
            "id": "component-DefaultNodeComponent-44dfd694c10ba8d2bc7616d8c28fdda5",
            "file": "libs/angular/stories/node/default/default.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "../demo-diagram.component.scss"
            ],
            "styles": [],
            "template": "<ngdx-diagram class=\"demo-diagram\" [model]=\"diagramModel\"></ngdx-diagram>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "diagramModel",
                    "type": "DiagramModel",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "e",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnChanges, OnInit, SimpleChanges } from '@angular/core';\nimport { DiagramEngine } from '@ngx-diagrams/angular';\nimport { DiagramModel, DefaultNodeModel } from '@ngx-diagrams/core';\n\n@Component({\n  selector: 'app-root',\n  template: `<ngdx-diagram class=\"demo-diagram\" [model]=\"diagramModel\"></ngdx-diagram>`,\n  styleUrls: ['../demo-diagram.component.scss']\n})\nexport class DefaultNodeComponent implements OnInit, OnChanges {\n  diagramModel: DiagramModel;\n\n  constructor(private diagramEngine: DiagramEngine) {}\n\n  ngOnInit() {\n    const nodesDefaultDimensions = { height: 200, width: 200 };\n    this.diagramEngine.registerDefaultFactories();\n\n    this.diagramModel = this.diagramEngine.createDiagram();\n\n    const node1 = new DefaultNodeModel();\n    node1.setCoords({ x: 500, y: 300 });\n    node1.setDimensions(nodesDefaultDimensions);\n\n    this.diagramModel.addAll(node1);\n\n    this.diagramModel.getDiagramEngine().zoomToFit();\n  }\n\n  ngOnChanges(e: SimpleChanges) {\n    if (this.diagramModel) {\n      if (e.nodeHeight) {\n        Object.values(this.diagramModel.getNodes()).forEach((node) => {\n          node.setHeight(e.nodeHeight.currentValue);\n        });\n      }\n\n      if (e.nodeWidth) {\n        Object.values(this.diagramModel.getNodes()).forEach((node) => {\n          node.setWidth(e.nodeWidth.currentValue);\n        });\n      }\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".demo-diagram {\n  display: flex;\n  height: 100%;\n  min-height: 100vh;\n  background-color: #3c3c3c;\n  background-image: linear-gradient(\n      0deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    ),\n    linear-gradient(\n      90deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    );\n  background-size: 50px 50px;\n}\n",
                    "styleUrl": "../demo-diagram.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ]
        },
        {
            "name": "DefaultNodeComponent",
            "id": "component-DefaultNodeComponent-c2cdc79aa38711b8af9cccaca7dd103a-1",
            "file": "libs/angular/src/lib/defaults/components/default-node/default-node.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ngdx-default-node",
            "styleUrls": [
                "./default-node.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./default-node.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "portsLayer",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'portsLayer', {read: ViewContainerRef, static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, ViewChild, ViewContainerRef } from '@angular/core';\nimport { DefaultNodeModel } from '@ngx-diagrams/core';\n\n@Component({\n  selector: 'ngdx-default-node',\n  templateUrl: './default-node.component.html',\n  styleUrls: ['./default-node.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DefaultNodeComponent extends DefaultNodeModel {\n  @ViewChild('portsLayer', { read: ViewContainerRef, static: true })\n  portsLayer: ViewContainerRef;\n\n  constructor() {\n    super({ type: 'ngdx-default-node' });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  &.selected {\n    .default-node {\n      background-color: white !important;\n      border-color: blue;\n    }\n  }\n\n  .default-node {\n    pointer-events: all;\n    width: 100%;\n    border-radius: 10px;\n    transition: all 0.3s ease-in-out;\n\n    cursor: auto;\n    .title {\n      padding: 10px;\n      text-align: center;\n      border-bottom: 1px solid blue;\n    }\n  }\n\n  .ports {\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column;\n  }\n}\n",
                    "styleUrl": "./default-node.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 12
            },
            "extends": "DefaultNodeModel",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "DefaultNodeComponent-1",
            "templateData": "<div\n  class=\"default-node\"\n  [ngStyle]=\"{\n    'height.px': height$ | async,\n    'width.px': width$ | async,\n    'background-color': color\n  }\"\n>\n  <div class=\"ports\">\n    <ng-template #portsLayer></ng-template>\n  </div>\n</div>\n"
        },
        {
            "name": "DefaultPortComponent",
            "id": "component-DefaultPortComponent-23065aa110b87ea58c43a536d397007b",
            "file": "libs/angular/stories/port/default/default.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "../demo-diagram.component.scss"
            ],
            "styles": [],
            "template": "<ngdx-diagram class=\"demo-diagram\" [model]=\"diagramModel\"></ngdx-diagram>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "diagramModel",
                    "type": "DiagramModel",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { DiagramEngine } from '@ngx-diagrams/angular';\nimport { DiagramModel, DefaultNodeModel } from '@ngx-diagrams/core';\n\n@Component({\n  selector: 'app-root',\n  template: `<ngdx-diagram class=\"demo-diagram\" [model]=\"diagramModel\"></ngdx-diagram>`,\n  styleUrls: ['../demo-diagram.component.scss']\n})\nexport class DefaultPortComponent implements OnInit {\n  diagramModel: DiagramModel;\n\n  constructor(private diagramEngine: DiagramEngine) {}\n\n  ngOnInit() {\n    const nodesDefaultDimensions = { height: 200, width: 200 };\n    this.diagramEngine.registerDefaultFactories();\n\n    this.diagramModel = this.diagramEngine.createDiagram();\n\n    const node1 = new DefaultNodeModel();\n    node1.setCoords({ x: 500, y: 300 });\n    node1.setDimensions(nodesDefaultDimensions);\n    node1.addInPort({ name: 'inport1' });\n    node1.addOutPort({ name: 'outport1' });\n\n    this.diagramModel.addAll(node1);\n\n    this.diagramModel.getDiagramEngine().zoomToFit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".demo-diagram {\n  display: flex;\n  height: 100%;\n  min-height: 100vh;\n  background-color: #3c3c3c;\n  background-image: linear-gradient(\n      0deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    ),\n    linear-gradient(\n      90deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    );\n  background-size: 50px 50px;\n}\n",
                    "styleUrl": "../demo-diagram.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "DefaultPortComponent",
            "id": "component-DefaultPortComponent-86780471c0041c3301d60e64d57e6611-1",
            "file": "libs/angular/src/lib/defaults/components/default-port/default-port.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ngdx-default-port",
            "styleUrls": [
                "./default-port.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./default-port.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { DefaultPortModel } from '@ngx-diagrams/core';\n\n@Component({\n  selector: 'ngdx-default-port',\n  templateUrl: './default-port.component.html',\n  styleUrls: ['./default-port.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DefaultPortComponent extends DefaultPortModel {\n  constructor() {\n    super({ type: 'ngdx-default-port' });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  position: relative;\n  width: 10px;\n  height: 10px;\n  border-radius: 60px;\n  border: 1px solid gray;\n  background-color: lightgray;\n  margin: 10px 0;\n\n  &:hover {\n    background-color: green;\n  }\n\n  &.out {\n    right: -195px;\n  }\n\n  &.in {\n    left: -5px;\n  }\n}\n",
                    "styleUrl": "./default-port.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 10
            },
            "extends": "DefaultPortModel",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "DefaultPortComponent-1",
            "templateData": "<div [ngClass]=\"in ? 'in' : 'out'\" draggable=\"false\"></div>\n"
        },
        {
            "name": "NgxDiagramComponent",
            "id": "component-NgxDiagramComponent-610439e6e93097523e70a6306e5209a9",
            "file": "libs/angular/src/lib/containers/diagram/diagram.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ngdx-diagram",
            "styleUrls": [
                "diagram.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "diagram.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "allowCanvasTranslation",
                    "defaultValue": "true",
                    "line": 48
                },
                {
                    "name": "allowCanvasZoom",
                    "defaultValue": "true",
                    "line": 47
                },
                {
                    "name": "allowLooseLinks",
                    "defaultValue": "true",
                    "line": 50
                },
                {
                    "name": "inverseZoom",
                    "defaultValue": "true",
                    "line": 49
                },
                {
                    "name": "maxZoomIn",
                    "defaultValue": "null",
                    "line": 52,
                    "type": "number"
                },
                {
                    "name": "maxZoomOut",
                    "defaultValue": "null",
                    "line": 51,
                    "type": "number"
                },
                {
                    "name": "model",
                    "line": 46,
                    "type": "DiagramModel"
                },
                {
                    "name": "portMagneticRadius",
                    "defaultValue": "30",
                    "line": 53
                }
            ],
            "outputsClass": [
                {
                    "name": "actionStartedFiring",
                    "defaultValue": "new EventEmitter<BaseAction>()",
                    "line": 55,
                    "type": "EventEmitter"
                },
                {
                    "name": "actionStillFiring",
                    "defaultValue": "new EventEmitter<BaseAction>()",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "actionStoppedFiring",
                    "defaultValue": "new EventEmitter<BaseAction>()",
                    "line": 57,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "canvas",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'canvas', {read: ElementRef}"
                        }
                    ]
                },
                {
                    "name": "destroyed$",
                    "defaultValue": "new ReplaySubject<boolean>(1)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "diagramEngine",
                    "type": "DiagramEngineCore",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "linksLayer",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'linksLayer', {read: ViewContainerRef}"
                        }
                    ]
                },
                {
                    "name": "ngZone",
                    "type": "NgZone",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "nodesLayer",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'nodesLayer', {read: ViewContainerRef}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "createMouseListeners",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 498,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "getLinksLayer",
                    "args": [],
                    "optional": false,
                    "returnType": "HTMLDivElement",
                    "typeParameters": [],
                    "line": 494,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "getNodesLayer",
                    "args": [],
                    "optional": false,
                    "returnType": "HTMLDivElement",
                    "typeParameters": [],
                    "line": 490,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "initSubs",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 477,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94
                },
                {
                    "name": "onMouseDown",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 336,
                    "decorators": [
                        {
                            "name": "OutsideZone"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMouseMove",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 219,
                    "description": "",
                    "decorators": [
                        {
                            "name": "OutsideZone"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7174,
                                "end": 7179,
                                "flags": 0,
                                "escapedText": "event"
                            },
                            "type": "MouseEvent",
                            "tagName": {
                                "pos": 7168,
                                "end": 7173,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>MouseEvent</p>\n"
                        }
                    ]
                },
                {
                    "name": "onMouseUp",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "decorators": [
                        {
                            "name": "OutsideZone"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMouseWheel",
                    "args": [
                        {
                            "name": "event",
                            "type": "WheelEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 412,
                    "decorators": [
                        {
                            "name": "OutsideZone"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "WheelEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectionAction",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 331
                },
                {
                    "name": "setLayerStyles",
                    "args": [
                        {
                            "name": "x",
                            "type": "number"
                        },
                        {
                            "name": "y",
                            "type": "number"
                        },
                        {
                            "name": "zoom",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 466,
                    "decorators": [
                        {
                            "name": "OutsideZone"
                        }
                    ],
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "x",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "y",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "zoom",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { DOCUMENT } from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  Renderer2,\n  ViewChild,\n  ViewContainerRef\n} from '@angular/core';\nimport { BehaviorSubject, combineLatest, fromEvent, merge, ReplaySubject } from 'rxjs';\nimport { take, takeUntil, tap } from 'rxjs/operators';\nimport {\n  BaseAction,\n  BaseModel,\n  Coords,\n  DiagramEngineCore,\n  DiagramModel,\n  InvalidLinkDestroyed,\n  LinkCreatedAction,\n  LinkModel,\n  LooseLinkDestroyed,\n  MoveCanvasAction,\n  MoveItemsAction,\n  NodeModel,\n  PointModel,\n  PortModel,\n  SelectingAction\n} from '@ngx-diagrams/core';\nimport { ZonedClass, OutsideZone } from '../../utils/decorators';\n\n@Component({\n  selector: 'ngdx-diagram',\n  templateUrl: 'diagram.component.html',\n  styleUrls: ['diagram.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxDiagramComponent implements AfterViewInit, OnDestroy, ZonedClass {\n  @Input('model') diagramModel: DiagramModel;\n  @Input() allowCanvasZoom = true;\n  @Input() allowCanvasTranslation = true;\n  @Input() inverseZoom = true;\n  @Input() allowLooseLinks = true;\n  @Input() maxZoomOut: number = null;\n  @Input() maxZoomIn: number = null;\n  @Input() portMagneticRadius = 30;\n\n  @Output() actionStartedFiring = new EventEmitter<BaseAction>();\n  @Output() actionStillFiring = new EventEmitter<BaseAction>();\n  @Output() actionStoppedFiring = new EventEmitter<BaseAction>();\n\n  @ViewChild('nodesLayer', { read: ViewContainerRef })\n  nodesLayer: ViewContainerRef;\n\n  @ViewChild('linksLayer', { read: ViewContainerRef })\n  linksLayer: ViewContainerRef;\n\n  @ViewChild('canvas', { read: ElementRef })\n  canvas: ElementRef;\n\n  protected diagramEngine: DiagramEngineCore;\n  protected destroyed$ = new ReplaySubject<boolean>(1);\n\n  get host(): HTMLElement {\n    return this.elRef.nativeElement;\n  }\n\n  constructor(\n    @Inject(DOCUMENT) protected document: Document,\n    public ngZone: NgZone,\n    protected renderer: Renderer2,\n    protected cdRef: ChangeDetectorRef,\n    protected elRef: ElementRef<HTMLElement>\n  ) {}\n\n  ngAfterViewInit() {\n    if (this.diagramModel) {\n      this.diagramEngine = this.diagramModel.getDiagramEngine();\n      this.diagramEngine.setCanvas(this.canvas.nativeElement);\n      this.diagramEngine.setup({ maxZoomIn: this.maxZoomIn, maxZoomOut: this.maxZoomOut });\n      this.diagramEngine.initNodes(this.nodesLayer);\n      this.diagramEngine.initLinks(this.linksLayer);\n      this.initSubs();\n    }\n  }\n\n  ngOnDestroy() {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n\n  @OutsideZone\n  onMouseUp(event: MouseEvent) {\n    const action = this.diagramEngine.selectAction().getValue();\n    // are we going to connect a link to something?\n    if (action instanceof MoveItemsAction) {\n      const element = this.diagramEngine.getMouseElement(event);\n      action.selectionModels.forEach((model) => {\n        // only care about points connecting to things\n        if (!model || !(model.model instanceof PointModel)) {\n          return;\n        }\n\n        let el: BaseModel;\n        if (model.magnet) {\n          el = model.magnet;\n        } else if (element && element.model) {\n          el = element.model;\n        }\n\n        if (el instanceof PortModel && !this.diagramEngine.isModelLocked(el)) {\n          const link = model.model.getLink();\n          if (link.getTargetPort() !== null) {\n            // if this was a valid link already and we are adding a node in the middle, create 2 links from the original\n            if (link.getTargetPort() !== el && link.getSourcePort() !== el) {\n              const targetPort = link.getTargetPort();\n              const newLink = link.clone({});\n              newLink.setSourcePort(el);\n              newLink.setTargetPort(targetPort);\n              link.setTargetPort(el);\n              targetPort.removeLink(link);\n              newLink.removePointsBefore(newLink.getPoints()[link.getPointIndex(model.model)]);\n              link.removePointsAfter(model.model);\n              this.diagramModel.addLink(newLink);\n              // if we are connecting to the same target or source, destroy tweener points\n            } else if (link.getTargetPort() === el) {\n              link.removePointsAfter(model.model);\n            } else if (link.getSourcePort() === el) {\n              link.removePointsBefore(model.model);\n            }\n          } else {\n            link.setTargetPort(el);\n            const targetPort = link.getTargetPort();\n            const srcPort = link.getSourcePort();\n\n            if (targetPort.id !== srcPort.id && srcPort.canLinkToPort(targetPort)) {\n              // link is valid, fire the event\n              this.actionStartedFiring.emit(\n                this.diagramEngine.startFiringAction(new LinkCreatedAction(event.clientX, event.clientY, link))\n              );\n            }\n          }\n        }\n\n        // reset current magent\n        model.magnet = undefined;\n      });\n\n      // check for / destroy any loose links in any models which have been moved\n      if (!this.allowLooseLinks) {\n        action.selectionModels.forEach((model) => {\n          // only care about points connecting to things\n          if (!model || !(model.model instanceof PointModel)) {\n            return;\n          }\n\n          const selectedPoint: PointModel = model.model;\n          const link: LinkModel = selectedPoint.getLink();\n          if (link.getSourcePort() === null || link.getTargetPort() === null) {\n            link.destroy();\n            this.actionStartedFiring.emit(\n              this.diagramEngine.startFiringAction(new LooseLinkDestroyed(event.clientX, event.clientY, link))\n            );\n          }\n        });\n      }\n\n      // destroy any invalid links\n      action.selectionModels.forEach((model) => {\n        // only care about points connecting to things\n        if (!model || !(model.model instanceof PointModel)) {\n          return;\n        }\n\n        const link: LinkModel = model.model.getLink();\n        const sourcePort: PortModel = link.getSourcePort();\n        const targetPort: PortModel = link.getTargetPort();\n\n        if (sourcePort !== null && targetPort !== null) {\n          if (!sourcePort.canLinkToPort(targetPort)) {\n            // link not allowed\n            link.destroy();\n            this.actionStartedFiring.emit(\n              this.diagramEngine.startFiringAction(new InvalidLinkDestroyed(event.clientX, event.clientY, link))\n            );\n          } else if (\n            targetPort\n              .getLinksArray()\n              .some(\n                (link) => link !== link && (link.getSourcePort() === sourcePort || link.getTargetPort() === sourcePort)\n              )\n          ) {\n            // link is a duplicate\n            link.destroy();\n          }\n        }\n      });\n\n      this.actionStoppedFiring.emit(this.diagramEngine.stopFiringAction());\n    } else {\n      this.actionStoppedFiring.emit(this.diagramEngine.stopFiringAction());\n    }\n\n    this.diagramEngine.setAction(null);\n  }\n\n  /**\n   * @description Mouse Move Event Handler\n   * @param event MouseEvent\n   */\n  @OutsideZone\n  onMouseMove(event: MouseEvent) {\n    const action = this.diagramEngine.selectAction().getValue();\n\n    if (action === null || action === undefined) {\n      return;\n    }\n\n    if (action instanceof SelectingAction) {\n      const relative = this.diagramModel.getDiagramEngine().getRelativePoint(event.clientX, event.clientY);\n\n      this.diagramModel.getNodes().forEach((node) => {\n        if ((action as SelectingAction).containsElement(node.getCoords(), this.diagramModel)) {\n          node.setSelected();\n        } else {\n          node.setSelected(false);\n        }\n      });\n\n      this.diagramModel.getLinks().forEach((link) => {\n        let allSelected = true;\n\n        link.getPoints().forEach((point) => {\n          if ((action as SelectingAction).containsElement(point.getCoords(), this.diagramModel)) {\n            point.setSelected();\n          } else {\n            point.setSelected(false);\n            allSelected = false;\n          }\n        });\n\n        if (allSelected) {\n          link.setSelected();\n        }\n      });\n\n      action.mouseX2 = relative.x;\n      action.mouseY2 = relative.y;\n\n      this.actionStillFiring.emit(this.diagramEngine.fireAction());\n      this.diagramEngine.setAction(null);\n      return;\n    } else if (action instanceof MoveItemsAction) {\n      const coords: Coords = {\n        x: event.clientX - action.mouseX,\n        y: event.clientY - action.mouseY\n      };\n      const amountZoom = this.diagramModel.getZoomLevel() / 100;\n      action.selectionModels.forEach((selectionModel) => {\n        // reset all previous magnets if any\n        selectionModel.magnet = undefined;\n\n        // in this case we need to also work out the relative grid position\n        if (\n          selectionModel.model instanceof NodeModel ||\n          (selectionModel.model instanceof PointModel && !selectionModel.model.isConnectedToPort())\n        ) {\n          const newCoords = {\n            x: selectionModel.initialX + coords.x / amountZoom,\n            y: selectionModel.initialY + coords.y / amountZoom\n          };\n          const gridRelativeCoords = this.diagramModel.getGridPosition(newCoords);\n\n          // magnetic inputs handling\n          if (selectionModel.model instanceof PointModel && this.portMagneticRadius) {\n            // get all ports on canvas, check distances, if smaller then defined radius, magnetize!\n            const portsMap = this.diagramModel.getAllPorts({ filter: (p) => p.getMagnetic() });\n\n            for (const port of portsMap.values()) {\n              const portCoords = port.getCoords();\n              const distance = Math.hypot(portCoords.x - newCoords.x, portCoords.y - newCoords.y);\n              if (distance <= this.portMagneticRadius) {\n                const portCenter = this.diagramModel.getDiagramEngine().getPortCenter(port);\n                selectionModel.model.setCoords(portCenter);\n                selectionModel.magnet = port;\n                return;\n              }\n            }\n          }\n\n          selectionModel.model.setCoords(gridRelativeCoords);\n\n          if (selectionModel.model instanceof NodeModel) {\n            // update port coordinates as well\n            selectionModel.model.getPorts().forEach((port) => {\n              const portCoords = this.diagramModel.getDiagramEngine().getPortCoords(port);\n              port.updateCoords(portCoords);\n            });\n          }\n        } else if (selectionModel.model instanceof PointModel) {\n          // will only run here when trying to create a point on an existing link\n          // we want points that are connected to ports, to not necessarily snap to grid\n          // this stuff needs to be pixel perfect, dont touch it\n          const newCoords = this.diagramModel.getGridPosition({ x: coords.x / amountZoom, y: coords.y / amountZoom });\n          selectionModel.model.setCoords({\n            x: selectionModel.initialX + newCoords.x,\n            y: selectionModel.initialY + newCoords.y\n          });\n        }\n      });\n\n      this.actionStillFiring.emit(this.diagramEngine.fireAction());\n    } else if (action instanceof MoveCanvasAction) {\n      if (this.allowCanvasTranslation) {\n        this.diagramModel.setOffset(\n          action.initialOffsetX + (event.clientX - action.mouseX),\n          action.initialOffsetY + (event.clientY - action.mouseY)\n        );\n        this.actionStillFiring.emit(this.diagramEngine.fireAction());\n      }\n    }\n  }\n\n  selectionAction() {\n    return this.diagramEngine.selectAction() as BehaviorSubject<SelectingAction>;\n  }\n\n  @OutsideZone\n  onMouseDown(event: MouseEvent) {\n    if (event.button === 3) {\n      return;\n    }\n\n    const selectedModel = this.diagramEngine.getMouseElement(event);\n\n    // canvas selected\n    if (selectedModel === null) {\n      // multiple selection\n      if (event.shiftKey) {\n        // initiate multiple selection selector\n        const relative = this.diagramModel.getDiagramEngine().getRelativePoint(event.clientX, event.clientY);\n        this.actionStartedFiring.emit(\n          this.diagramEngine.startFiringAction(new SelectingAction(relative.x, relative.y))\n        );\n      } else {\n        // drag canvas action\n        this.diagramModel.clearSelection();\n        this.actionStartedFiring.emit(\n          this.diagramEngine.startFiringAction(new MoveCanvasAction(event.clientX, event.clientY, this.diagramModel))\n        );\n      }\n    } else if (selectedModel.model instanceof PortModel) {\n      // its a port element, we want to drag a link\n      if (!selectedModel.model.isLocked() && selectedModel.model.getCanCreateLinks()) {\n        const relative = this.diagramModel.getDiagramEngine().getRelativeMousePoint(event);\n        const sourcePort = selectedModel.model;\n        const link = sourcePort.createLinkModel();\n\n        // if we don't have a link then we have reached the max amount, or we cannot create new ones\n        if (link) {\n          link.setSourcePort(sourcePort);\n          link.removeMiddlePoints();\n          if (link.getSourcePort() !== sourcePort) {\n            link.setSourcePort(sourcePort);\n          }\n          link.setTargetPort(null);\n\n          link.getFirstPoint().setCoords(relative);\n          link.getLastPoint().setCoords(relative);\n\n          this.diagramModel.clearSelection();\n          link.getLastPoint().setSelected();\n          this.diagramModel.addLink(link);\n\n          this.actionStartedFiring.emit(\n            this.diagramEngine.startFiringAction(\n              new MoveItemsAction(event.clientX, event.clientY, this.diagramModel.getDiagramEngine())\n            )\n          );\n        }\n      } else {\n        this.diagramModel.clearSelection();\n      }\n    } else if (selectedModel.model instanceof PointModel && selectedModel.model.isConnectedToPort()) {\n      this.diagramModel.clearSelection();\n    } else {\n      // its some other element, probably want to move it\n      if (!event.shiftKey && !selectedModel.model.getSelected()) {\n        this.diagramModel.clearSelection();\n      }\n\n      selectedModel.model.setSelected();\n\n      this.actionStartedFiring.emit(\n        this.diagramEngine.startFiringAction(\n          new MoveItemsAction(event.clientX, event.clientY, this.diagramModel.getDiagramEngine())\n        )\n      );\n    }\n\n    this.createMouseListeners();\n  }\n\n  @OutsideZone\n  onMouseWheel(event: WheelEvent) {\n    if (!this.allowCanvasZoom) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n    const currentZoomLevel = this.diagramModel.getZoomLevel();\n\n    const oldZoomFactor = currentZoomLevel / 100;\n    let scrollDelta = this.inverseZoom ? -event.deltaY : event.deltaY;\n\n    // check if it is pinch gesture\n    if (event.ctrlKey && scrollDelta % 1 !== 0) {\n      /* Chrome and Firefox sends wheel event with deltaY that\n\t\t\t\t\t\t have fractional part, also `ctrlKey` prop of the event is true\n\t\t\t\t\t\t though ctrl isn't pressed\n\t\t\t\t\t*/\n      scrollDelta /= 3;\n    } else {\n      scrollDelta /= 60;\n    }\n\n    if (currentZoomLevel + scrollDelta > 10) {\n      const newZoomLvl = currentZoomLevel + scrollDelta;\n      this.diagramModel.setZoomLevel(newZoomLvl);\n    }\n\n    const updatedZoomLvl = this.diagramModel.getZoomLevel();\n    const zoomFactor = updatedZoomLvl / 100;\n\n    const boundingRect = (event.currentTarget as Element).getBoundingClientRect();\n    const clientWidth = boundingRect.width;\n    const clientHeight = boundingRect.height;\n\n    // compute difference between rect before and after scroll\n    const widthDiff = clientWidth * zoomFactor - clientWidth * oldZoomFactor;\n    const heightDiff = clientHeight * zoomFactor - clientHeight * oldZoomFactor;\n\n    // compute mouse coords relative to canvas\n    const clientX = event.clientX - boundingRect.left;\n    const clientY = event.clientY - boundingRect.top;\n\n    // compute width and height increment factor\n    const xFactor = (clientX - this.diagramModel.getOffsetX()) / oldZoomFactor / clientWidth;\n    const yFactor = (clientY - this.diagramModel.getOffsetY()) / oldZoomFactor / clientHeight;\n\n    const updatedXOffset = this.diagramModel.getOffsetX() - widthDiff * xFactor;\n    const updatedYOffset = this.diagramModel.getOffsetY() - heightDiff * yFactor;\n\n    this.diagramModel.setOffset(updatedXOffset, updatedYOffset);\n  }\n\n  @OutsideZone\n  protected setLayerStyles(x: number, y: number, zoom: number): void {\n    const nodesLayer = this.getNodesLayer();\n    const linksLayer = this.getLinksLayer();\n\n    const style = 'transform';\n    const value = `translate(${x}px, ${y}px) scale(${zoom / 100.0})`;\n\n    this.renderer.setStyle(nodesLayer, style, value);\n    this.renderer.setStyle(linksLayer, style, value);\n  }\n\n  protected initSubs() {\n    combineLatest([\n      this.diagramModel.selectOffsetX(),\n      this.diagramModel.selectOffsetY(),\n      this.diagramModel.selectZoomLevel()\n    ])\n      .pipe(\n        tap(([x, y, zoom]) => this.setLayerStyles(x, y, zoom)),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe();\n  }\n\n  protected getNodesLayer(): HTMLDivElement {\n    return this.host.querySelector('.ngdx-nodes-layer');\n  }\n\n  protected getLinksLayer(): HTMLDivElement {\n    return this.host.querySelector('.ngdx-links-layer');\n  }\n\n  protected createMouseListeners() {\n    const mouseUp$ = fromEvent<MouseEvent>(this.document, 'mouseup').pipe(\n      tap((e) => this.onMouseUp(e)),\n      take(1)\n    );\n\n    const mouseMove$ = fromEvent<MouseEvent>(this.document, 'mousemove').pipe(\n      tap((e) => this.onMouseMove(e)),\n      takeUntil(mouseUp$)\n    );\n\n    merge(mouseMove$, mouseUp$).pipe(takeUntil(this.destroyed$)).subscribe();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".ngdx-diagram {\n  position: relative;\n  flex-grow: 1;\n  display: flex;\n  cursor: move;\n  overflow: hidden;\n\n  .selector {\n    position: absolute;\n    background-color: rgba(0, 192, 255, 0.2);\n    border: solid 2px rgb(0, 192, 255);\n  }\n\n  .ngdx-nodes-layer {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    transform-origin: 0 0;\n    overflow: visible !important;\n    pointer-events: none;\n    z-index: 150;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n  }\n\n  .ngdx-links-layer {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    transform-origin: 0 0;\n    overflow: visible !important;\n    pointer-events: none;\n    z-index: 100;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n  }\n}\n",
                    "styleUrl": "diagram.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "document",
                        "type": "Document"
                    },
                    {
                        "name": "ngZone",
                        "type": "NgZone"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "elRef",
                        "type": "ElementRef<HTMLElement>"
                    }
                ],
                "line": 73,
                "jsdoctags": [
                    {
                        "name": "document",
                        "type": "Document",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ngZone",
                        "type": "NgZone",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "elRef",
                        "type": "ElementRef<HTMLElement>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit",
                "OnDestroy",
                "ZonedClass"
            ],
            "accessors": {
                "host": {
                    "name": "host",
                    "getSignature": {
                        "name": "host",
                        "type": "",
                        "returnType": "HTMLElement",
                        "line": 71
                    }
                }
            },
            "templateData": "<div class=\"ngdx-diagram\" #canvas (mousedown)=\"onMouseDown($event)\" (wheel)=\"onMouseWheel($event)\">\n  <!-- Nodes Layer -->\n  <div class=\"ngdx-nodes-layer\">\n    <ng-template #nodesLayer></ng-template>\n  </div>\n\n  <!-- Links Layer -->\n  <div class=\"ngdx-links-layer\">\n    <ng-template #linksLayer></ng-template>\n  </div>\n\n  <!-- Selection Box -->\n  <div\n    *ngIf=\"diagramEngine.shouldDrawSelectionBox() && selectionAction() | async as action\"\n    class=\"selector\"\n    [ngStyle]=\"{\n      top: action.dimensions.top + 'px',\n      left: action.dimensions.left + 'px',\n      width: action.dimensions.width + 'px',\n      height: action.dimensions.height + 'px'\n    }\"\n  ></div>\n</div>\n"
        },
        {
            "name": "PerformanceExampleStoryComponent",
            "id": "component-PerformanceExampleStoryComponent-d7f7807b8f33b39b21b7505d0e403b7d",
            "file": "libs/angular/stories/examples/performance/performance.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "../demo-diagram.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"action-bar\">\n  <button (click)=\"resetDiagram()\" *ngIf=\"isResseted === false\">Reset</button\n  ><button (click)=\"createDiagram()\" *ngIf=\"isResseted\">Recreate</button>Rendered {{ numberOfNodes }} nodes and\n  links in {{ initialRenderTimer }} ms\n</div>\n<ngdx-diagram class=\"demo-diagram\" [model]=\"diagramModel\"></ngdx-diagram>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "serialized",
                    "defaultValue": "new EventEmitter()",
                    "line": 24,
                    "type": "EventEmitter<SerializedDiagramModel>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "diagramModel",
                    "type": "DiagramModel",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "initialRenderTimer",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "isCreated",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "isResseted",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "numberOfNodes",
                    "defaultValue": "200",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "clearGraph",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76
                },
                {
                    "name": "createDiagram",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37
                },
                {
                    "name": "createNodes",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                },
                {
                    "name": "recreateDiagram",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46
                },
                {
                    "name": "resetDiagram",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { DiagramEngine } from '@ngx-diagrams/angular';\nimport { DiagramModel, SerializedDiagramModel, DefaultNodeModel } from '@ngx-diagrams/core';\n\n@Component({\n  selector: 'app-root',\n  template: `\n    <div class=\"action-bar\">\n      <button (click)=\"resetDiagram()\" *ngIf=\"isResseted === false\">Reset</button\n      ><button (click)=\"createDiagram()\" *ngIf=\"isResseted\">Recreate</button>Rendered {{ numberOfNodes }} nodes and\n      links in {{ initialRenderTimer }} ms\n    </div>\n    <ngdx-diagram class=\"demo-diagram\" [model]=\"diagramModel\"></ngdx-diagram>\n  `,\n  styleUrls: ['../demo-diagram.component.scss']\n})\nexport class PerformanceExampleStoryComponent implements OnInit {\n  diagramModel: DiagramModel;\n  initialRenderTimer: number;\n  isResseted = false;\n  isCreated = true;\n  numberOfNodes = 200;\n\n  @Output() serialized: EventEmitter<SerializedDiagramModel> = new EventEmitter();\n\n  constructor(private diagramEngine: DiagramEngine) {}\n\n  ngOnInit() {\n    this.diagramEngine.registerDefaultFactories();\n    this.diagramModel = this.diagramEngine.createDiagram();\n\n    this.createNodes();\n\n    this.diagramEngine.zoomToFit();\n  }\n\n  createDiagram() {\n    this.createNodes();\n  }\n\n  resetDiagram() {\n    this.diagramModel.reset();\n    this.isResseted = true;\n  }\n\n  recreateDiagram() {\n    this.createNodes();\n  }\n\n  createNodes() {\n    this.isResseted = false;\n    const startTime = performance.now();\n    const nodesDefaultDimensions = { height: 200, width: 200 };\n\n    for (let index = 0; index < this.numberOfNodes; index++) {\n      const nodeLoop = new DefaultNodeModel({ id: index.toString() });\n      const row = index % 10;\n      const col = Math.floor(index / 10);\n      nodeLoop.setCoords({ x: 1000 * row, y: 300 * col });\n      nodeLoop.setDimensions(nodesDefaultDimensions);\n      nodeLoop.addInPort({ name: `inport${index}`, id: `inport${index}` });\n      const outport = nodeLoop.addOutPort({ name: `outport${index}`, id: `outport${index}` });\n\n      if (index > 0) {\n        const link = outport.link(this.diagramModel.getNode(`${index - 1}`).getPort(`inport${index - 1}`));\n        this.diagramModel.addLink(link);\n      }\n\n      this.diagramModel.addNode(nodeLoop);\n    }\n\n    const endTime = performance.now();\n    this.initialRenderTimer = endTime - startTime;\n  }\n\n  clearGraph() {\n    this.diagramModel.reset();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".demo-diagram {\n  display: flex;\n  height: 100%;\n  min-height: 100vh;\n  background-color: #3c3c3c;\n  background-image: linear-gradient(\n      0deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    ),\n    linear-gradient(\n      90deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    );\n  background-size: 50px 50px;\n}\n\n.action-bar {\n  position: relative;\n  width: 100%;\n  height: 40px;\n  z-index: 2000;\n  background-color: white;\n  display: flex;\n  align-items: center;\n  * {\n    margin: 0 10px;\n  }\n}\n",
                    "styleUrl": "../demo-diagram.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "SerializationExampleStoryComponent",
            "id": "component-SerializationExampleStoryComponent-50f29d45290a9a67b61f4faf06fc6c45",
            "file": "libs/angular/stories/examples/serialization/serialization.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "../demo-diagram.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"action-bar\">\n  <button (click)=\"serialize()\">Serialize Diagram Model</button>\n  <button (click)=\"clearGraph()\">Clear Graph</button>\n</div>\n<ngdx-diagram class=\"demo-diagram\" [model]=\"diagramModel\"></ngdx-diagram>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "serialized",
                    "defaultValue": "new EventEmitter()",
                    "line": 19,
                    "type": "EventEmitter<SerializedDiagramModel>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "diagramModel",
                    "type": "DiagramModel",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "clearGraph",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { DiagramEngine } from '@ngx-diagrams/angular';\nimport { DiagramModel, SerializedDiagramModel, DefaultNodeModel } from '@ngx-diagrams/core';\n\n@Component({\n  selector: 'app-root',\n  template: `\n    <div class=\"action-bar\">\n      <button (click)=\"serialize()\">Serialize Diagram Model</button>\n      <button (click)=\"clearGraph()\">Clear Graph</button>\n    </div>\n    <ngdx-diagram class=\"demo-diagram\" [model]=\"diagramModel\"></ngdx-diagram>\n  `,\n  styleUrls: ['../demo-diagram.component.scss']\n})\nexport class SerializationExampleStoryComponent implements OnInit {\n  diagramModel: DiagramModel;\n\n  @Output() serialized: EventEmitter<SerializedDiagramModel> = new EventEmitter();\n\n  constructor(private diagramEngine: DiagramEngine) {}\n\n  ngOnInit() {\n    const nodesDefaultDimensions = { height: 200, width: 200 };\n    this.diagramEngine.registerDefaultFactories();\n\n    this.diagramModel = this.diagramEngine.createDiagram();\n\n    const node1 = new DefaultNodeModel();\n    node1.setCoords({ x: 500, y: 300 });\n    node1.setDimensions(nodesDefaultDimensions);\n    const outport1 = node1.addOutPort({ name: 'outport1' });\n\n    const node2 = new DefaultNodeModel();\n    node2.setCoords({ x: 1000, y: 0 });\n    node2.setDimensions(nodesDefaultDimensions);\n    const inport = node2.addInPort({ name: 'inport2' });\n\n    for (let index = 0; index < 2; index++) {\n      const nodeLoop = new DefaultNodeModel();\n      nodeLoop.setCoords({ x: 1000, y: 300 + index * 300 });\n      nodeLoop.setDimensions(nodesDefaultDimensions);\n      nodeLoop.addInPort({ name: `inport${index + 3}` });\n\n      this.diagramModel.addNode(nodeLoop);\n    }\n\n    const link = outport1.link(inport);\n    link.setLocked();\n\n    this.diagramModel.addAll(node1, node2, link);\n\n    this.diagramModel.getDiagramEngine().zoomToFit();\n  }\n\n  serialize() {\n    const serializedModel = this.diagramModel.serialize();\n    this.serialized.emit(serializedModel);\n  }\n\n  clearGraph() {\n    this.diagramModel.reset();\n  }\n\n  // deserialize() {\n  // \tconst JSONModel = {\n  // \t\tid: 'ab04adcc-ebce-41a1-9c8f-de914cb3186c',\n  // \t\tlocked: false,\n  // \t\tnodes: [\n  // \t\t\t{\n  // \t\t\t\tid: 'e50e8d29-b90c-4907-8f7a-a82f8fbc7051',\n  // \t\t\t\tlocked: false,\n  // \t\t\t\ttype: 'default',\n  // \t\t\t\tnodeType: 'default',\n  // \t\t\t\textras: {},\n  // \t\t\t\twidth: 200,\n  // \t\t\t\theight: 200,\n  // \t\t\t\tx: 1000,\n  // \t\t\t\ty: 300,\n  // \t\t\t\tports: [\n  // \t\t\t\t\t{\n  // \t\t\t\t\t\tid: '57ba33ad-b539-4491-9358-056db9cfb474',\n  // \t\t\t\t\t\tlocked: false,\n  // \t\t\t\t\t\ttype: 'default',\n  // \t\t\t\t\t\tname: 'inport3',\n  // \t\t\t\t\t\tlinkType: 'default',\n  // \t\t\t\t\t\tmaximumLinks: null,\n  // \t\t\t\t\t\tmagnetic: true,\n  // \t\t\t\t\t\theight: 12,\n  // \t\t\t\t\t\twidth: 12,\n  // \t\t\t\t\t\tcanCreateLinks: false,\n  // \t\t\t\t\t\tx: 995,\n  // \t\t\t\t\t\ty: 310,\n  // \t\t\t\t\t},\n  // \t\t\t\t],\n  // \t\t\t},\n  // \t\t\t{\n  // \t\t\t\tid: 'a0cb9388-ffb4-470a-a020-0a3256c0dd1c',\n  // \t\t\t\tlocked: false,\n  // \t\t\t\ttype: 'default',\n  // \t\t\t\tnodeType: 'default',\n  // \t\t\t\textras: {},\n  // \t\t\t\twidth: 200,\n  // \t\t\t\theight: 200,\n  // \t\t\t\tx: 1000,\n  // \t\t\t\ty: 600,\n  // \t\t\t\tports: [\n  // \t\t\t\t\t{\n  // \t\t\t\t\t\tid: 'd0866699-9922-47ab-812a-36d3bde6b513',\n  // \t\t\t\t\t\tlocked: false,\n  // \t\t\t\t\t\ttype: 'default',\n  // \t\t\t\t\t\tname: 'inport4',\n  // \t\t\t\t\t\tlinkType: 'default',\n  // \t\t\t\t\t\tmaximumLinks: null,\n  // \t\t\t\t\t\tmagnetic: true,\n  // \t\t\t\t\t\theight: 12,\n  // \t\t\t\t\t\twidth: 12,\n  // \t\t\t\t\t\tcanCreateLinks: false,\n  // \t\t\t\t\t\tx: 995,\n  // \t\t\t\t\t\ty: 610,\n  // \t\t\t\t\t},\n  // \t\t\t\t],\n  // \t\t\t},\n  // \t\t\t{\n  // \t\t\t\tid: 'de1eac05-4782-4bf2-8620-241562501db4',\n  // \t\t\t\tlocked: false,\n  // \t\t\t\ttype: 'default',\n  // \t\t\t\tnodeType: 'default',\n  // \t\t\t\textras: {},\n  // \t\t\t\twidth: 200,\n  // \t\t\t\theight: 200,\n  // \t\t\t\tx: 500,\n  // \t\t\t\ty: 300,\n  // \t\t\t\tports: [\n  // \t\t\t\t\t{\n  // \t\t\t\t\t\tid: '74bcbcfe-e5ca-4f49-8a00-9eb15916cd3c',\n  // \t\t\t\t\t\tlocked: false,\n  // \t\t\t\t\t\ttype: 'default',\n  // \t\t\t\t\t\tname: 'outport1',\n  // \t\t\t\t\t\tlinkType: 'default',\n  // \t\t\t\t\t\tmaximumLinks: null,\n  // \t\t\t\t\t\tmagnetic: false,\n  // \t\t\t\t\t\theight: 12,\n  // \t\t\t\t\t\twidth: 12,\n  // \t\t\t\t\t\tcanCreateLinks: true,\n  // \t\t\t\t\t\tx: 695,\n  // \t\t\t\t\t\ty: 310,\n  // \t\t\t\t\t},\n  // \t\t\t\t],\n  // \t\t\t},\n  // \t\t\t{\n  // \t\t\t\tid: '86d44ae3-bcc8-4d1a-b0ea-2fc295aa2da2',\n  // \t\t\t\tlocked: false,\n  // \t\t\t\ttype: 'default',\n  // \t\t\t\tnodeType: 'default',\n  // \t\t\t\textras: {},\n  // \t\t\t\twidth: 200,\n  // \t\t\t\theight: 200,\n  // \t\t\t\tx: 1000,\n  // \t\t\t\ty: 0,\n  // \t\t\t\tports: [\n  // \t\t\t\t\t{\n  // \t\t\t\t\t\tid: '6f2857d4-5fd2-4b0a-878b-730dec5afcdf',\n  // \t\t\t\t\t\tlocked: false,\n  // \t\t\t\t\t\ttype: 'default',\n  // \t\t\t\t\t\tname: 'inport2',\n  // \t\t\t\t\t\tlinkType: 'default',\n  // \t\t\t\t\t\tmaximumLinks: null,\n  // \t\t\t\t\t\tmagnetic: true,\n  // \t\t\t\t\t\theight: 12,\n  // \t\t\t\t\t\twidth: 12,\n  // \t\t\t\t\t\tcanCreateLinks: false,\n  // \t\t\t\t\t\tx: 995,\n  // \t\t\t\t\t\ty: 10,\n  // \t\t\t\t\t},\n  // \t\t\t\t],\n  // \t\t\t},\n  // \t\t],\n  // \t\tlinks: [\n  // \t\t\t{\n  // \t\t\t\tid: '635cb9cd-09bd-4693-b746-760b8fbf51ae',\n  // \t\t\t\tlocked: true,\n  // \t\t\t\ttype: 'default',\n  // \t\t\t\tsourcePort: '74bcbcfe-e5ca-4f49-8a00-9eb15916cd3c',\n  // \t\t\t\ttargetPort: '6f2857d4-5fd2-4b0a-878b-730dec5afcdf',\n  // \t\t\t\textras: {},\n  // \t\t\t\tpoints: [\n  // \t\t\t\t\t{ id: 'b085cdea-f1f1-4f26-8989-585a310004f9', locked: true, type: 'default', coords: { x: 701, y: 316 } },\n  // \t\t\t\t\t{ id: 'edccec32-2290-4290-a7b3-66e3598c07f5', locked: true, type: 'default', coords: { x: 1001, y: 16 } },\n  // \t\t\t\t],\n  // \t\t\t},\n  // \t\t],\n  // \t};\n\n  // \tthis.diagramModel.deserialize(JSONModel);\n  // }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".demo-diagram {\n  display: flex;\n  height: 100%;\n  min-height: 100vh;\n  background-color: #3c3c3c;\n  background-image: linear-gradient(\n      0deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    ),\n    linear-gradient(\n      90deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    );\n  background-size: 50px 50px;\n}\n\n.action-bar {\n  position: relative;\n  width: 100%;\n  height: 40px;\n  z-index: 2000;\n  background-color: white;\n  display: flex;\n  align-items: center;\n  * {\n    margin: 0 10px;\n  }\n}\n",
                    "styleUrl": "../demo-diagram.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        }
    ],
    "modules": [
        {
            "name": "DefaultLabelModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DefaultLabelComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DefaultLabelComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DefaultLinkModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DefaultLinkComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DefaultLinkComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DefaultNodeModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DefaultNodeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DefaultPortModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DefaultPortComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgxDiagramsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NgxDiagramComponent"
                        },
                        {
                            "name": "TemplateVarDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NgxDiagramComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "AutoArrange",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/angular/stories/examples/examples.stories.ts",
                "type": "",
                "defaultValue": "AutoArrangeDiagramTemplate.bind({})"
            },
            {
                "name": "AutoArrangeDiagramTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/angular/stories/examples/examples.template.ts",
                "type": "Story<AutoArrangeExampleStoryComponent>",
                "defaultValue": "(\n  args: any\n) => ({\n  component: AutoArrangeExampleStoryComponent,\n  props: args,\n})"
            },
            {
                "name": "Basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/angular/stories/examples/examples.stories.ts",
                "type": "",
                "defaultValue": "BasicDiagramTemplate.bind({})"
            },
            {
                "name": "BasicDiagramTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/angular/stories/examples/examples.template.ts",
                "type": "Story<BasicExampleStoryComponent>",
                "defaultValue": "(\n  args: any\n) => ({\n  component: BasicExampleStoryComponent,\n  props: args,\n})"
            },
            {
                "name": "Custom",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/angular/stories/node/node.stories.ts",
                "type": "",
                "defaultValue": "CustomNodeTemplate.bind({})"
            },
            {
                "name": "Custom",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/angular/stories/label/label.stories.ts",
                "type": "",
                "defaultValue": "CustomLinkTemplate.bind({})"
            },
            {
                "name": "Custom",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/angular/stories/port/port.stories.ts",
                "type": "",
                "defaultValue": "CustomNodeTemplate.bind({})"
            },
            {
                "name": "Custom",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/angular/stories/link/link.stories.ts",
                "type": "",
                "defaultValue": "CustomLinkTemplate.bind({})"
            },
            {
                "name": "CustomLinkTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/angular/stories/label/label.template.ts",
                "type": "Story<CustomLabelDiagramComponent>",
                "defaultValue": "(args: any) => ({\n  component: CustomLabelDiagramComponent,\n  props: args\n})"
            },
            {
                "name": "CustomLinkTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/angular/stories/link/link.template.ts",
                "type": "Story<CustomLinkDiagramComponent>",
                "defaultValue": "(\n  args: any\n) => ({\n  component: CustomLinkDiagramComponent,\n  props: args,\n})"
            },
            {
                "name": "CustomNodeTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/angular/stories/node/node.template.ts",
                "type": "Story<CustomNodeDiagramComponent>",
                "defaultValue": "(\n  args: any\n) => ({\n  component: CustomNodeDiagramComponent,\n  props: args,\n})"
            },
            {
                "name": "CustomNodeTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/angular/stories/port/port.template.ts",
                "type": "Story<CustomPortDiagramComponent>",
                "defaultValue": "(\n  args: any\n) => ({\n  component: CustomPortDiagramComponent,\n  props: args,\n})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/angular/stories/node/node.stories.ts",
                "type": "",
                "defaultValue": "DefaultNodeTemplate.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/angular/stories/label/label.stories.ts",
                "type": "",
                "defaultValue": "DefaultLinkTemplate.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/angular/stories/port/port.stories.ts",
                "type": "",
                "defaultValue": "DefaultNodeTemplate.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/angular/stories/link/link.stories.ts",
                "type": "",
                "defaultValue": "DefaultLinkTemplate.bind({})"
            },
            {
                "name": "DefaultLinkTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/angular/stories/label/label.template.ts",
                "type": "Story<DefaultLabelStoryComponent>",
                "defaultValue": "(args: any) => ({\n  component: DefaultLabelStoryComponent,\n  props: args\n})"
            },
            {
                "name": "DefaultLinkTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/angular/stories/link/link.template.ts",
                "type": "Story<DefaultLinkStoryComponent>",
                "defaultValue": "(\n  args: any\n) => ({\n  component: DefaultLinkStoryComponent,\n  props: args,\n})"
            },
            {
                "name": "DefaultNodeTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/angular/stories/node/node.template.ts",
                "type": "Story<DefaultNodeComponent>",
                "defaultValue": "(\n  args: any\n) => ({\n  component: DefaultNodeComponent,\n  props: args,\n})"
            },
            {
                "name": "DefaultNodeTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/angular/stories/port/port.template.ts",
                "type": "Story<DefaultPortComponent>",
                "defaultValue": "(\n  args: any\n) => ({\n  component: DefaultPortComponent,\n  props: args,\n})"
            },
            {
                "name": "Performance",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/angular/stories/examples/examples.stories.ts",
                "type": "",
                "defaultValue": "PerformanceDiagramTemplate.bind({})"
            },
            {
                "name": "PerformanceDiagramTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/angular/stories/examples/examples.template.ts",
                "type": "Story<PerformanceExampleStoryComponent>",
                "defaultValue": "(args: any) => ({\n\tcomponent: PerformanceExampleStoryComponent,\n\tprops: args,\n})"
            },
            {
                "name": "ROUTING_SCALING_FACTOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/angular/src/lib/plugins/smart-routing.plugin.ts",
                "type": "number",
                "defaultValue": "10"
            },
            {
                "name": "Serialization",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/angular/stories/examples/examples.stories.ts",
                "type": "",
                "defaultValue": "SerializationDiagramTemplate.bind({})"
            },
            {
                "name": "SerializationDiagramTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/angular/stories/examples/examples.template.ts",
                "type": "Story<SerializationExampleStoryComponent>",
                "defaultValue": "(\n  args: any\n) => ({\n  component: SerializationExampleStoryComponent,\n  props: { ...args, serialized: action('serialized') },\n})"
            },
            {
                "name": "SmartRouting",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/angular/stories/examples/examples.stories.ts",
                "type": "",
                "defaultValue": "SmartRoutingDiagramTemplate.bind({})"
            },
            {
                "name": "SmartRoutingDiagramTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/angular/stories/examples/examples.template.ts",
                "type": "Story<SmartRoutingExampleStoryComponent>",
                "defaultValue": "(\n  args: any\n) => ({\n  component: SmartRoutingExampleStoryComponent,\n  props: args,\n})"
            }
        ],
        "functions": [
            {
                "name": "OutsideZone",
                "file": "libs/angular/src/lib/utils/decorators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "targetClass"
                    },
                    {
                        "name": "functionName"
                    },
                    {
                        "name": "descriptor",
                        "type": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "targetClass",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "functionName",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "descriptor",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "libs/angular/stories/examples/examples.stories.ts": [
                {
                    "name": "AutoArrange",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/angular/stories/examples/examples.stories.ts",
                    "type": "",
                    "defaultValue": "AutoArrangeDiagramTemplate.bind({})"
                },
                {
                    "name": "Basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/angular/stories/examples/examples.stories.ts",
                    "type": "",
                    "defaultValue": "BasicDiagramTemplate.bind({})"
                },
                {
                    "name": "Performance",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/angular/stories/examples/examples.stories.ts",
                    "type": "",
                    "defaultValue": "PerformanceDiagramTemplate.bind({})"
                },
                {
                    "name": "Serialization",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/angular/stories/examples/examples.stories.ts",
                    "type": "",
                    "defaultValue": "SerializationDiagramTemplate.bind({})"
                },
                {
                    "name": "SmartRouting",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/angular/stories/examples/examples.stories.ts",
                    "type": "",
                    "defaultValue": "SmartRoutingDiagramTemplate.bind({})"
                }
            ],
            "libs/angular/stories/examples/examples.template.ts": [
                {
                    "name": "AutoArrangeDiagramTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/angular/stories/examples/examples.template.ts",
                    "type": "Story<AutoArrangeExampleStoryComponent>",
                    "defaultValue": "(\n  args: any\n) => ({\n  component: AutoArrangeExampleStoryComponent,\n  props: args,\n})"
                },
                {
                    "name": "BasicDiagramTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/angular/stories/examples/examples.template.ts",
                    "type": "Story<BasicExampleStoryComponent>",
                    "defaultValue": "(\n  args: any\n) => ({\n  component: BasicExampleStoryComponent,\n  props: args,\n})"
                },
                {
                    "name": "PerformanceDiagramTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/angular/stories/examples/examples.template.ts",
                    "type": "Story<PerformanceExampleStoryComponent>",
                    "defaultValue": "(args: any) => ({\n\tcomponent: PerformanceExampleStoryComponent,\n\tprops: args,\n})"
                },
                {
                    "name": "SerializationDiagramTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/angular/stories/examples/examples.template.ts",
                    "type": "Story<SerializationExampleStoryComponent>",
                    "defaultValue": "(\n  args: any\n) => ({\n  component: SerializationExampleStoryComponent,\n  props: { ...args, serialized: action('serialized') },\n})"
                },
                {
                    "name": "SmartRoutingDiagramTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/angular/stories/examples/examples.template.ts",
                    "type": "Story<SmartRoutingExampleStoryComponent>",
                    "defaultValue": "(\n  args: any\n) => ({\n  component: SmartRoutingExampleStoryComponent,\n  props: args,\n})"
                }
            ],
            "libs/angular/stories/node/node.stories.ts": [
                {
                    "name": "Custom",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/angular/stories/node/node.stories.ts",
                    "type": "",
                    "defaultValue": "CustomNodeTemplate.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/angular/stories/node/node.stories.ts",
                    "type": "",
                    "defaultValue": "DefaultNodeTemplate.bind({})"
                }
            ],
            "libs/angular/stories/label/label.stories.ts": [
                {
                    "name": "Custom",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/angular/stories/label/label.stories.ts",
                    "type": "",
                    "defaultValue": "CustomLinkTemplate.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/angular/stories/label/label.stories.ts",
                    "type": "",
                    "defaultValue": "DefaultLinkTemplate.bind({})"
                }
            ],
            "libs/angular/stories/port/port.stories.ts": [
                {
                    "name": "Custom",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/angular/stories/port/port.stories.ts",
                    "type": "",
                    "defaultValue": "CustomNodeTemplate.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/angular/stories/port/port.stories.ts",
                    "type": "",
                    "defaultValue": "DefaultNodeTemplate.bind({})"
                }
            ],
            "libs/angular/stories/link/link.stories.ts": [
                {
                    "name": "Custom",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/angular/stories/link/link.stories.ts",
                    "type": "",
                    "defaultValue": "CustomLinkTemplate.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/angular/stories/link/link.stories.ts",
                    "type": "",
                    "defaultValue": "DefaultLinkTemplate.bind({})"
                }
            ],
            "libs/angular/stories/label/label.template.ts": [
                {
                    "name": "CustomLinkTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/angular/stories/label/label.template.ts",
                    "type": "Story<CustomLabelDiagramComponent>",
                    "defaultValue": "(args: any) => ({\n  component: CustomLabelDiagramComponent,\n  props: args\n})"
                },
                {
                    "name": "DefaultLinkTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/angular/stories/label/label.template.ts",
                    "type": "Story<DefaultLabelStoryComponent>",
                    "defaultValue": "(args: any) => ({\n  component: DefaultLabelStoryComponent,\n  props: args\n})"
                }
            ],
            "libs/angular/stories/link/link.template.ts": [
                {
                    "name": "CustomLinkTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/angular/stories/link/link.template.ts",
                    "type": "Story<CustomLinkDiagramComponent>",
                    "defaultValue": "(\n  args: any\n) => ({\n  component: CustomLinkDiagramComponent,\n  props: args,\n})"
                },
                {
                    "name": "DefaultLinkTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/angular/stories/link/link.template.ts",
                    "type": "Story<DefaultLinkStoryComponent>",
                    "defaultValue": "(\n  args: any\n) => ({\n  component: DefaultLinkStoryComponent,\n  props: args,\n})"
                }
            ],
            "libs/angular/stories/node/node.template.ts": [
                {
                    "name": "CustomNodeTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/angular/stories/node/node.template.ts",
                    "type": "Story<CustomNodeDiagramComponent>",
                    "defaultValue": "(\n  args: any\n) => ({\n  component: CustomNodeDiagramComponent,\n  props: args,\n})"
                },
                {
                    "name": "DefaultNodeTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/angular/stories/node/node.template.ts",
                    "type": "Story<DefaultNodeComponent>",
                    "defaultValue": "(\n  args: any\n) => ({\n  component: DefaultNodeComponent,\n  props: args,\n})"
                }
            ],
            "libs/angular/stories/port/port.template.ts": [
                {
                    "name": "CustomNodeTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/angular/stories/port/port.template.ts",
                    "type": "Story<CustomPortDiagramComponent>",
                    "defaultValue": "(\n  args: any\n) => ({\n  component: CustomPortDiagramComponent,\n  props: args,\n})"
                },
                {
                    "name": "DefaultNodeTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/angular/stories/port/port.template.ts",
                    "type": "Story<DefaultPortComponent>",
                    "defaultValue": "(\n  args: any\n) => ({\n  component: DefaultPortComponent,\n  props: args,\n})"
                }
            ],
            "libs/angular/src/lib/plugins/smart-routing.plugin.ts": [
                {
                    "name": "ROUTING_SCALING_FACTOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/angular/src/lib/plugins/smart-routing.plugin.ts",
                    "type": "number",
                    "defaultValue": "10"
                }
            ]
        },
        "groupedFunctions": {
            "libs/angular/src/lib/utils/decorators.ts": [
                {
                    "name": "OutsideZone",
                    "file": "libs/angular/src/lib/utils/decorators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "targetClass"
                        },
                        {
                            "name": "functionName"
                        },
                        {
                            "name": "descriptor",
                            "type": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "targetClass",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "functionName",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "descriptor",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "libs/angular/src/lib/containers/diagram/diagram.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgxDiagramComponent",
                "coveragePercent": 0,
                "coverageCount": "0/31",
                "status": "low"
            },
            {
                "filePath": "libs/angular/src/lib/defaults/components/default-label/default-label.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DefaultLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "libs/angular/src/lib/defaults/components/default-link/default-link.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DefaultLinkComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "libs/angular/src/lib/defaults/components/default-node/default-node.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DefaultNodeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/angular/src/lib/defaults/components/default-port/default-port.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DefaultPortComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "libs/angular/src/lib/defaults/factories/default-label.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DefaultLabelFactory",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/angular/src/lib/defaults/factories/default-link.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DefaultLinkFactory",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/angular/src/lib/defaults/factories/default-node.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DefaultNodeFactory",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/angular/src/lib/defaults/factories/default-port.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DefaultPortFactory",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/angular/src/lib/engine.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DiagramEngine",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/angular/src/lib/plugins/dagre-engine.plugin.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DagreEngine",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/angular/src/lib/plugins/dagre-engine.plugin.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DagreEngineOptions",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "libs/angular/src/lib/plugins/smart-routing.plugin.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PathFinding",
                "coveragePercent": 50,
                "coverageCount": "3/6",
                "status": "medium"
            },
            {
                "filePath": "libs/angular/src/lib/plugins/smart-routing.plugin.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ROUTING_SCALING_FACTOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/angular/src/lib/utils/decorators.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ZonedClass",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "libs/angular/src/lib/utils/decorators.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "OutsideZone",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/angular/src/lib/utils/template-var.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "TemplateVarDirective",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "libs/angular/src/lib/utils/template-var.directive.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TemplateVarContext",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/examples/auto-arrange/auto-arrange.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AutoArrangeExampleStoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/examples/basic/basic.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BasicExampleStoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/examples/examples.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AutoArrange",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/examples/examples.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/examples/examples.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Performance",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/examples/examples.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Serialization",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/examples/examples.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SmartRouting",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/examples/examples.template.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AutoArrangeDiagramTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/examples/examples.template.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BasicDiagramTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/examples/examples.template.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PerformanceDiagramTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/examples/examples.template.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SerializationDiagramTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/examples/examples.template.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SmartRoutingDiagramTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/examples/performance/performance.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PerformanceExampleStoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/examples/serialization/serialization.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SerializationExampleStoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/label/custom/custom-label.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/label/custom/custom.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CustomLabelFactory",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/label/custom/diagram.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomLabelDiagramComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/label/default/default.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DefaultLabelStoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/label/label.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Custom",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/label/label.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/label/label.template.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CustomLinkTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/label/label.template.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultLinkTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/link/custom/custom-link.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomLinkComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/link/custom/custom.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CustomLinkFactory",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/link/custom/diagram.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomLinkDiagramComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/link/default/default.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DefaultLinkStoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/link/link.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Custom",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/link/link.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/link/link.template.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CustomLinkTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/link/link.template.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultLinkTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/node/custom/custom.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomNodeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/node/custom/custom.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CustomNodeFactory",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/node/custom/diagram.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomNodeDiagramComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/node/default/default.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DefaultNodeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/node/node.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Custom",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/node/node.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/node/node.template.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CustomNodeTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/node/node.template.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultNodeTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/port/custom/custom.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomPortComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/port/custom/custom.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CustomPortFactory",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/port/custom/diagram.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomPortDiagramComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/port/default/default.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DefaultPortComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/port/port.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Custom",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/port/port.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/port/port.template.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CustomNodeTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/port/port.template.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultNodeTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}