{
    "pipes": [],
    "interfaces": [
        {
            "name": "Coords",
            "id": "interface-Coords-c3272ec5e6b06eb4f79a295fb8cd5bbf",
            "file": "libs/ngx-diagrams/src/lib/interfaces/coords.interface.ts",
            "type": "interface",
            "sourceCode": "export interface Coords {\n  x: number;\n  y: number;\n}\n",
            "properties": [
                {
                    "name": "x",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "y",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "DagreEngineOptions",
            "id": "interface-DagreEngineOptions-12e90174452d08b72a5dc441ada0705c",
            "file": "libs/ngx-diagrams/src/lib/plugins/dagre-engine.plugin.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport * as dagre from 'dagre';\nimport { EdgeConfig, GraphLabel, NodeConfig } from 'dagre';\nimport { DiagramModel, PointModel } from '../models';\n\nexport interface DagreEngineOptions {\n  graph?: GraphLabel;\n  layout?: GraphLabel & NodeConfig & EdgeConfig;\n  /**\n   * Will also layout links\n   */\n  includeLinks?: boolean;\n}\n\n@Injectable()\nexport class DagreEngine {\n  g: dagre.graphlib.Graph;\n\n  instantiate() {\n    try {\n      this.g = new dagre.graphlib.Graph({ multigraph: true });\n    } catch (error) {\n      console.warn(\"`dagre` packages isn't installed, please install it before using the DagreEngine plugin\");\n    }\n  }\n\n  redistribute(model: DiagramModel, options: DagreEngineOptions = {}): void {\n    this.instantiate();\n\n    this.g.setGraph(options.graph || {});\n\n    this.g.setDefaultEdgeLabel(() => {\n      return {};\n    });\n\n    const processedlinks: { [id: string]: boolean } = {};\n\n    // set nodes\n    model.getNodes().forEach((node) => {\n      this.g.setNode(node.id, {\n        width: node.getWidth(),\n        height: node.getHeight()\n      });\n    });\n\n    model.getLinks().forEach((link) => {\n      // set edges\n      if (link.getSourcePort() && link.getTargetPort()) {\n        processedlinks[link.id] = true;\n        this.g.setEdge({\n          v: link.getSourcePort().getNode().id,\n          w: link.getTargetPort().getNode().id,\n          name: link.id\n        });\n      }\n    });\n\n    // layout the graph\n    dagre.layout(this.g, options.layout);\n\n    this.g.nodes().forEach((v) => {\n      const { x, y } = this.g.node(v);\n      model.getNode(v).setCoords({ x, y });\n    });\n\n    // also include links?\n    if (options.includeLinks) {\n      this.g.edges().forEach((e) => {\n        const edge = this.g.edge(e);\n        const link = model.getLink(e.name);\n\n        const points = [link.getFirstPoint()];\n        for (let i = 1; i < edge.points.length - 2; i++) {\n          points.push(new PointModel(link, { x: edge.points[i].x, y: edge.points[i].y }));\n        }\n        link.setPoints(points.concat(link.getLastPoint()));\n      });\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "graph",
                    "type": "GraphLabel",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "includeLinks",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Will also layout links</p>\n",
                    "line": 12
                },
                {
                    "name": "layout",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "DefaultPortModelConfig",
            "id": "interface-DefaultPortModelConfig-b5cb8b1a9da9dbe7b1256d26c00bcd6d",
            "file": "libs/ngx-diagrams/src/lib/defaults/models/default-port.model.ts",
            "type": "interface",
            "sourceCode": "import { LinkModel } from '../../models/link.model';\nimport { PortModel } from '../../models/port.model';\nimport { HashMap } from '../../utils/types';\nimport { DefaultLinkModel } from './default-link.model';\n\nexport interface DefaultPortModelConfig {\n  id?: string;\n  isInput?: boolean;\n  name?: string;\n  type?: string;\n  label?: string;\n  linkType?: string;\n  maximumLinks?: number;\n}\n\nexport class DefaultPortModel extends PortModel {\n  in: boolean;\n  label: string;\n  links: HashMap<any>;\n\n  constructor({\n    isInput = true,\n    name = 'port',\n    type = 'default',\n    id = null,\n    label = null,\n    linkType = 'default',\n    maximumLinks = null\n  }: DefaultPortModelConfig = {}) {\n    super(name, type, id, null, linkType);\n    this.in = isInput;\n    this.label = label || name;\n\n    if (this.in) {\n      this.setCanCreateLinks(false);\n    } else {\n      this.setMaximumLinks(maximumLinks);\n      this.setMagnetic(false);\n    }\n  }\n\n  link(port: PortModel): LinkModel {\n    if (super.getCanCreateLinks()) {\n      const link = new DefaultLinkModel({ type: this.getLinkType() });\n      link.setSourcePort(this);\n      link.setTargetPort(port);\n      return link;\n    }\n\n    return null;\n  }\n\n  createLinkModel() {\n    if (super.getCanCreateLinks()) {\n      return new DefaultLinkModel({ type: this.getLinkType() });\n    }\n  }\n\n  canLinkToPort(port: PortModel): boolean {\n    if (port instanceof DefaultPortModel) {\n      return this.in !== port.in;\n    }\n    return true;\n  }\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "isInput",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "linkType",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "maximumLinks",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Dimensions",
            "id": "interface-Dimensions-c6bff04663b5d0b3c8fb8fb1e31110f9",
            "file": "libs/ngx-diagrams/src/lib/interfaces/dimensions.interface.ts",
            "type": "interface",
            "sourceCode": "export interface Dimensions {\n  width: number;\n  height: number;\n}\n",
            "properties": [
                {
                    "name": "height",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "width",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "HashMap",
            "id": "interface-HashMap-aff15b921239f65d51bf48ca571cb1e5",
            "file": "libs/ngx-diagrams/src/lib/utils/types.ts",
            "type": "interface",
            "sourceCode": "import { ID } from './tool-kit.util';\n\nexport interface HashMap<T> {\n  [key: string]: T;\n}\n\nexport type Entries<T, K = string> = (readonly [K, T])[];\n\nexport type EntityMap<T> = Map<ID, T>;\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-aff15b921239f65d51bf48ca571cb1e5",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "returnType": "T",
                    "line": 3
                }
            ],
            "kind": 159,
            "methods": []
        },
        {
            "name": "SelectionModel",
            "id": "interface-SelectionModel-67c9a8373c2e222bde8fd0bcaf1c142f",
            "file": "libs/ngx-diagrams/src/lib/models/move-selection.model.ts",
            "type": "interface",
            "sourceCode": "import { BaseModel } from './base.model';\nimport { PortModel } from './port.model';\n\nexport interface SelectionModel {\n  model: BaseModel;\n  initialX: number;\n  initialY: number;\n  magnet?: PortModel;\n}\n",
            "properties": [
                {
                    "name": "initialX",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "initialY",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "magnet",
                    "type": "PortModel",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "model",
                    "type": "BaseModel",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "SelectOptions",
            "id": "interface-SelectOptions-df9707653f849184dd6107a5cfa72818",
            "file": "libs/ngx-diagrams/src/lib/interfaces/select-options.interface.ts",
            "type": "interface",
            "sourceCode": "export interface SelectOptions<E> {\n  // asObject?: boolean;\n  filter?: ((entity: E) => boolean) | undefined;\n  // limitTo?: number;\n}\n",
            "properties": [
                {
                    "name": "filter",
                    "type": " | undefined",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "SerializedBaseModel",
            "id": "interface-SerializedBaseModel-b1ce629a5190ec1ca1bb3d8b70d2361e",
            "file": "libs/ngx-diagrams/src/lib/interfaces/serialization.interface.ts",
            "type": "interface",
            "sourceCode": "import { Coords } from './';\n\nexport interface SerializedBaseModel {\n  locked: boolean;\n  id: string;\n}\n\nexport interface SerializedDiagramModel extends SerializedBaseModel {\n  nodes: SerializedNodeModel[];\n  links: SerializedLinkModel[];\n}\n\nexport interface SerializedNodeModel extends SerializedBaseModel {\n  x: number;\n  y: number;\n  nodeType: string;\n  extras: {\n    [s: string]: any;\n  };\n  width: number;\n  height: number;\n  type: string;\n  id: string;\n  locked: boolean;\n  ports: SerializedPortModel[];\n}\n\nexport interface SerializedLinkModel extends SerializedBaseModel {\n  name?: string;\n  sourcePort: string;\n  targetPort: string;\n  extras: any;\n  points: SerializedPointModel[];\n  label?: SerializedLabelModel;\n  type: string;\n}\n\nexport interface SerializedPortModel extends SerializedBaseModel {\n  x: number;\n  y: number;\n  name: string;\n  linkType: string;\n  maximumLinks: number;\n  type: string;\n  magnetic: boolean;\n  height: number;\n  width: number;\n  canCreateLinks: boolean;\n}\n\nexport interface SerializedPointModel extends SerializedBaseModel {\n  coords: Coords;\n  type: string;\n}\n\nexport interface SerializedLabelModel extends SerializedBaseModel {\n  type: string;\n  rotation: number;\n  coords: Coords;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "locked",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "SerializedDiagramModel",
            "id": "interface-SerializedDiagramModel-b1ce629a5190ec1ca1bb3d8b70d2361e",
            "file": "libs/ngx-diagrams/src/lib/interfaces/serialization.interface.ts",
            "type": "interface",
            "sourceCode": "import { Coords } from './';\n\nexport interface SerializedBaseModel {\n  locked: boolean;\n  id: string;\n}\n\nexport interface SerializedDiagramModel extends SerializedBaseModel {\n  nodes: SerializedNodeModel[];\n  links: SerializedLinkModel[];\n}\n\nexport interface SerializedNodeModel extends SerializedBaseModel {\n  x: number;\n  y: number;\n  nodeType: string;\n  extras: {\n    [s: string]: any;\n  };\n  width: number;\n  height: number;\n  type: string;\n  id: string;\n  locked: boolean;\n  ports: SerializedPortModel[];\n}\n\nexport interface SerializedLinkModel extends SerializedBaseModel {\n  name?: string;\n  sourcePort: string;\n  targetPort: string;\n  extras: any;\n  points: SerializedPointModel[];\n  label?: SerializedLabelModel;\n  type: string;\n}\n\nexport interface SerializedPortModel extends SerializedBaseModel {\n  x: number;\n  y: number;\n  name: string;\n  linkType: string;\n  maximumLinks: number;\n  type: string;\n  magnetic: boolean;\n  height: number;\n  width: number;\n  canCreateLinks: boolean;\n}\n\nexport interface SerializedPointModel extends SerializedBaseModel {\n  coords: Coords;\n  type: string;\n}\n\nexport interface SerializedLabelModel extends SerializedBaseModel {\n  type: string;\n  rotation: number;\n  coords: Coords;\n}\n",
            "properties": [
                {
                    "name": "links",
                    "type": "SerializedLinkModel[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "nodes",
                    "type": "SerializedNodeModel[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "SerializedBaseModel"
        },
        {
            "name": "SerializedLabelModel",
            "id": "interface-SerializedLabelModel-b1ce629a5190ec1ca1bb3d8b70d2361e",
            "file": "libs/ngx-diagrams/src/lib/interfaces/serialization.interface.ts",
            "type": "interface",
            "sourceCode": "import { Coords } from './';\n\nexport interface SerializedBaseModel {\n  locked: boolean;\n  id: string;\n}\n\nexport interface SerializedDiagramModel extends SerializedBaseModel {\n  nodes: SerializedNodeModel[];\n  links: SerializedLinkModel[];\n}\n\nexport interface SerializedNodeModel extends SerializedBaseModel {\n  x: number;\n  y: number;\n  nodeType: string;\n  extras: {\n    [s: string]: any;\n  };\n  width: number;\n  height: number;\n  type: string;\n  id: string;\n  locked: boolean;\n  ports: SerializedPortModel[];\n}\n\nexport interface SerializedLinkModel extends SerializedBaseModel {\n  name?: string;\n  sourcePort: string;\n  targetPort: string;\n  extras: any;\n  points: SerializedPointModel[];\n  label?: SerializedLabelModel;\n  type: string;\n}\n\nexport interface SerializedPortModel extends SerializedBaseModel {\n  x: number;\n  y: number;\n  name: string;\n  linkType: string;\n  maximumLinks: number;\n  type: string;\n  magnetic: boolean;\n  height: number;\n  width: number;\n  canCreateLinks: boolean;\n}\n\nexport interface SerializedPointModel extends SerializedBaseModel {\n  coords: Coords;\n  type: string;\n}\n\nexport interface SerializedLabelModel extends SerializedBaseModel {\n  type: string;\n  rotation: number;\n  coords: Coords;\n}\n",
            "properties": [
                {
                    "name": "coords",
                    "type": "Coords",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "rotation",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 57
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "SerializedBaseModel"
        },
        {
            "name": "SerializedLinkModel",
            "id": "interface-SerializedLinkModel-b1ce629a5190ec1ca1bb3d8b70d2361e",
            "file": "libs/ngx-diagrams/src/lib/interfaces/serialization.interface.ts",
            "type": "interface",
            "sourceCode": "import { Coords } from './';\n\nexport interface SerializedBaseModel {\n  locked: boolean;\n  id: string;\n}\n\nexport interface SerializedDiagramModel extends SerializedBaseModel {\n  nodes: SerializedNodeModel[];\n  links: SerializedLinkModel[];\n}\n\nexport interface SerializedNodeModel extends SerializedBaseModel {\n  x: number;\n  y: number;\n  nodeType: string;\n  extras: {\n    [s: string]: any;\n  };\n  width: number;\n  height: number;\n  type: string;\n  id: string;\n  locked: boolean;\n  ports: SerializedPortModel[];\n}\n\nexport interface SerializedLinkModel extends SerializedBaseModel {\n  name?: string;\n  sourcePort: string;\n  targetPort: string;\n  extras: any;\n  points: SerializedPointModel[];\n  label?: SerializedLabelModel;\n  type: string;\n}\n\nexport interface SerializedPortModel extends SerializedBaseModel {\n  x: number;\n  y: number;\n  name: string;\n  linkType: string;\n  maximumLinks: number;\n  type: string;\n  magnetic: boolean;\n  height: number;\n  width: number;\n  canCreateLinks: boolean;\n}\n\nexport interface SerializedPointModel extends SerializedBaseModel {\n  coords: Coords;\n  type: string;\n}\n\nexport interface SerializedLabelModel extends SerializedBaseModel {\n  type: string;\n  rotation: number;\n  coords: Coords;\n}\n",
            "properties": [
                {
                    "name": "extras",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "label",
                    "type": "SerializedLabelModel",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "points",
                    "type": "SerializedPointModel[]",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "sourcePort",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "targetPort",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "SerializedBaseModel"
        },
        {
            "name": "SerializedNodeModel",
            "id": "interface-SerializedNodeModel-b1ce629a5190ec1ca1bb3d8b70d2361e",
            "file": "libs/ngx-diagrams/src/lib/interfaces/serialization.interface.ts",
            "type": "interface",
            "sourceCode": "import { Coords } from './';\n\nexport interface SerializedBaseModel {\n  locked: boolean;\n  id: string;\n}\n\nexport interface SerializedDiagramModel extends SerializedBaseModel {\n  nodes: SerializedNodeModel[];\n  links: SerializedLinkModel[];\n}\n\nexport interface SerializedNodeModel extends SerializedBaseModel {\n  x: number;\n  y: number;\n  nodeType: string;\n  extras: {\n    [s: string]: any;\n  };\n  width: number;\n  height: number;\n  type: string;\n  id: string;\n  locked: boolean;\n  ports: SerializedPortModel[];\n}\n\nexport interface SerializedLinkModel extends SerializedBaseModel {\n  name?: string;\n  sourcePort: string;\n  targetPort: string;\n  extras: any;\n  points: SerializedPointModel[];\n  label?: SerializedLabelModel;\n  type: string;\n}\n\nexport interface SerializedPortModel extends SerializedBaseModel {\n  x: number;\n  y: number;\n  name: string;\n  linkType: string;\n  maximumLinks: number;\n  type: string;\n  magnetic: boolean;\n  height: number;\n  width: number;\n  canCreateLinks: boolean;\n}\n\nexport interface SerializedPointModel extends SerializedBaseModel {\n  coords: Coords;\n  type: string;\n}\n\nexport interface SerializedLabelModel extends SerializedBaseModel {\n  type: string;\n  rotation: number;\n  coords: Coords;\n}\n",
            "properties": [
                {
                    "name": "extras",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "height",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "locked",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "nodeType",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "ports",
                    "type": "SerializedPortModel[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "width",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "x",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "y",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "SerializedBaseModel"
        },
        {
            "name": "SerializedPointModel",
            "id": "interface-SerializedPointModel-b1ce629a5190ec1ca1bb3d8b70d2361e",
            "file": "libs/ngx-diagrams/src/lib/interfaces/serialization.interface.ts",
            "type": "interface",
            "sourceCode": "import { Coords } from './';\n\nexport interface SerializedBaseModel {\n  locked: boolean;\n  id: string;\n}\n\nexport interface SerializedDiagramModel extends SerializedBaseModel {\n  nodes: SerializedNodeModel[];\n  links: SerializedLinkModel[];\n}\n\nexport interface SerializedNodeModel extends SerializedBaseModel {\n  x: number;\n  y: number;\n  nodeType: string;\n  extras: {\n    [s: string]: any;\n  };\n  width: number;\n  height: number;\n  type: string;\n  id: string;\n  locked: boolean;\n  ports: SerializedPortModel[];\n}\n\nexport interface SerializedLinkModel extends SerializedBaseModel {\n  name?: string;\n  sourcePort: string;\n  targetPort: string;\n  extras: any;\n  points: SerializedPointModel[];\n  label?: SerializedLabelModel;\n  type: string;\n}\n\nexport interface SerializedPortModel extends SerializedBaseModel {\n  x: number;\n  y: number;\n  name: string;\n  linkType: string;\n  maximumLinks: number;\n  type: string;\n  magnetic: boolean;\n  height: number;\n  width: number;\n  canCreateLinks: boolean;\n}\n\nexport interface SerializedPointModel extends SerializedBaseModel {\n  coords: Coords;\n  type: string;\n}\n\nexport interface SerializedLabelModel extends SerializedBaseModel {\n  type: string;\n  rotation: number;\n  coords: Coords;\n}\n",
            "properties": [
                {
                    "name": "coords",
                    "type": "Coords",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 53
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "SerializedBaseModel"
        },
        {
            "name": "SerializedPortModel",
            "id": "interface-SerializedPortModel-b1ce629a5190ec1ca1bb3d8b70d2361e",
            "file": "libs/ngx-diagrams/src/lib/interfaces/serialization.interface.ts",
            "type": "interface",
            "sourceCode": "import { Coords } from './';\n\nexport interface SerializedBaseModel {\n  locked: boolean;\n  id: string;\n}\n\nexport interface SerializedDiagramModel extends SerializedBaseModel {\n  nodes: SerializedNodeModel[];\n  links: SerializedLinkModel[];\n}\n\nexport interface SerializedNodeModel extends SerializedBaseModel {\n  x: number;\n  y: number;\n  nodeType: string;\n  extras: {\n    [s: string]: any;\n  };\n  width: number;\n  height: number;\n  type: string;\n  id: string;\n  locked: boolean;\n  ports: SerializedPortModel[];\n}\n\nexport interface SerializedLinkModel extends SerializedBaseModel {\n  name?: string;\n  sourcePort: string;\n  targetPort: string;\n  extras: any;\n  points: SerializedPointModel[];\n  label?: SerializedLabelModel;\n  type: string;\n}\n\nexport interface SerializedPortModel extends SerializedBaseModel {\n  x: number;\n  y: number;\n  name: string;\n  linkType: string;\n  maximumLinks: number;\n  type: string;\n  magnetic: boolean;\n  height: number;\n  width: number;\n  canCreateLinks: boolean;\n}\n\nexport interface SerializedPointModel extends SerializedBaseModel {\n  coords: Coords;\n  type: string;\n}\n\nexport interface SerializedLabelModel extends SerializedBaseModel {\n  type: string;\n  rotation: number;\n  coords: Coords;\n}\n",
            "properties": [
                {
                    "name": "canCreateLinks",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "height",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "linkType",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "magnetic",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "maximumLinks",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "width",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "x",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "y",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "SerializedBaseModel"
        },
        {
            "name": "ZonedClass",
            "id": "interface-ZonedClass-95a8ba087560debc8f9321814c92650b",
            "file": "libs/ngx-diagrams/src/lib/utils/decorators.ts",
            "type": "interface",
            "sourceCode": "import { NgZone } from '@angular/core';\n\nexport interface ZonedClass {\n  ngZone: NgZone;\n}\n\nexport function OutsideZone<T extends ZonedClass>(targetClass: T, functionName: string, descriptor) {\n  const source = descriptor.value;\n  descriptor.value = function (...data) {\n    if (!this.ngZone) {\n      throw new Error(\"Class with 'OutsideZone' decorator should have 'ngZone' class property with 'NgZone' class.\");\n    }\n    return this.ngZone.runOutsideAngular(() => source.call(this, ...data));\n  };\n  return descriptor;\n}\n",
            "properties": [
                {
                    "name": "ngZone",
                    "type": "NgZone",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "DagreEngine",
            "id": "injectable-DagreEngine-12e90174452d08b72a5dc441ada0705c",
            "file": "libs/ngx-diagrams/src/lib/plugins/dagre-engine.plugin.ts",
            "properties": [
                {
                    "name": "g",
                    "type": "dagre.graphlib.Graph",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methods": [
                {
                    "name": "instantiate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                },
                {
                    "name": "redistribute",
                    "args": [
                        {
                            "name": "model",
                            "type": "DiagramModel"
                        },
                        {
                            "name": "options",
                            "type": "DagreEngineOptions",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "DiagramModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "DagreEngineOptions",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport * as dagre from 'dagre';\nimport { EdgeConfig, GraphLabel, NodeConfig } from 'dagre';\nimport { DiagramModel, PointModel } from '../models';\n\nexport interface DagreEngineOptions {\n  graph?: GraphLabel;\n  layout?: GraphLabel & NodeConfig & EdgeConfig;\n  /**\n   * Will also layout links\n   */\n  includeLinks?: boolean;\n}\n\n@Injectable()\nexport class DagreEngine {\n  g: dagre.graphlib.Graph;\n\n  instantiate() {\n    try {\n      this.g = new dagre.graphlib.Graph({ multigraph: true });\n    } catch (error) {\n      console.warn(\"`dagre` packages isn't installed, please install it before using the DagreEngine plugin\");\n    }\n  }\n\n  redistribute(model: DiagramModel, options: DagreEngineOptions = {}): void {\n    this.instantiate();\n\n    this.g.setGraph(options.graph || {});\n\n    this.g.setDefaultEdgeLabel(() => {\n      return {};\n    });\n\n    const processedlinks: { [id: string]: boolean } = {};\n\n    // set nodes\n    model.getNodes().forEach((node) => {\n      this.g.setNode(node.id, {\n        width: node.getWidth(),\n        height: node.getHeight()\n      });\n    });\n\n    model.getLinks().forEach((link) => {\n      // set edges\n      if (link.getSourcePort() && link.getTargetPort()) {\n        processedlinks[link.id] = true;\n        this.g.setEdge({\n          v: link.getSourcePort().getNode().id,\n          w: link.getTargetPort().getNode().id,\n          name: link.id\n        });\n      }\n    });\n\n    // layout the graph\n    dagre.layout(this.g, options.layout);\n\n    this.g.nodes().forEach((v) => {\n      const { x, y } = this.g.node(v);\n      model.getNode(v).setCoords({ x, y });\n    });\n\n    // also include links?\n    if (options.includeLinks) {\n      this.g.edges().forEach((e) => {\n        const edge = this.g.edge(e);\n        const link = model.getLink(e.name);\n\n        const points = [link.getFirstPoint()];\n        for (let i = 1; i < edge.points.length - 2; i++) {\n          points.push(new PointModel(link, { x: edge.points[i].x, y: edge.points[i].y }));\n        }\n        link.setPoints(points.concat(link.getLastPoint()));\n      });\n    }\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "DiagramEngine",
            "id": "injectable-DiagramEngine-0b989385a7e1621fe71ef8ac5c92ceb7",
            "file": "libs/ngx-diagrams/src/lib/services/engine.service.ts",
            "properties": [
                {
                    "name": "_renderer",
                    "type": "Renderer2",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "canvas$",
                    "defaultValue": "createValueState<Element>(null)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "canvasMatrix",
                    "defaultValue": "[]",
                    "type": "number[][]",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "diagramModel",
                    "type": "DiagramModel",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "hAdjustmentFactor",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "labelFactories",
                    "defaultValue": "new Map<string, AbstractLabelFactory>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "linkFactories",
                    "defaultValue": "new Map<string, AbstractLinkFactory>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "markMatrixPoint",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 548
                },
                {
                    "name": "nodeFactories",
                    "defaultValue": "new Map<string, AbstractNodeFactory>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "pathFinding",
                    "type": "PathFinding",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "portFactories",
                    "defaultValue": "new Map<string, AbstractPortFactory>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "routingMatrix",
                    "defaultValue": "[]",
                    "type": "number[][]",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "smartRouting",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "vAdjustmentFactor",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 48
                }
            ],
            "methods": [
                {
                    "name": "calculateCanvasMatrix",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 329
                },
                {
                    "name": "calculateMatrixDimensions",
                    "args": [],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 352,
                    "description": "<p>Despite being a long method, we simply iterate over all three collections (nodes, ports and points)\nto find the highest X and Y dimensions, so we can build the matrix large enough to contain all elements.</p>\n"
                },
                {
                    "name": "calculateRoutingMatrix",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 490
                },
                {
                    "name": "createDiagram",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 56
                },
                {
                    "name": "generateWidgetForLabel",
                    "args": [
                        {
                            "name": "label",
                            "type": "LabelModel"
                        },
                        {
                            "name": "labelHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef | null",
                    "typeParameters": [],
                    "line": 89,
                    "jsdoctags": [
                        {
                            "name": "label",
                            "type": "LabelModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "labelHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateWidgetForLink",
                    "args": [
                        {
                            "name": "link",
                            "type": "LinkModel"
                        },
                        {
                            "name": "linksHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef | null",
                    "typeParameters": [],
                    "line": 173,
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "LinkModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "linksHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateWidgetForNode",
                    "args": [
                        {
                            "name": "node",
                            "type": "NodeModel"
                        },
                        {
                            "name": "nodesHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef | null",
                    "typeParameters": [],
                    "line": 117,
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "NodeModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nodesHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateWidgetForPort",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        },
                        {
                            "name": "portsHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef | null",
                    "typeParameters": [],
                    "line": 145,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "portsHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCanvasMatrix",
                    "args": [],
                    "optional": false,
                    "returnType": "[][]",
                    "typeParameters": [],
                    "line": 448,
                    "description": "<p>A representation of the canvas in the following format:</p>\n<p>+-----------------+\n| 0 0 0 0 0 0 0 0 |\n| 0 0 0 0 0 0 0 0 |\n| 0 0 0 0 0 0 0 0 |\n| 0 0 0 0 0 0 0 0 |\n| 0 0 0 0 0 0 0 0 |\n+-----------------+</p>\n<p>In which all walkable points are marked by zeros.\nIt uses @link{#ROUTING_SCALING_FACTOR} to reduce the matrix dimensions and improve performance.</p>\n"
                },
                {
                    "name": "getDiagramModel",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 278
                },
                {
                    "name": "getFactoryForLabel",
                    "args": [
                        {
                            "name": "label",
                            "type": "LabelModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "AbstractLabelFactory | null",
                    "typeParameters": [],
                    "line": 85,
                    "jsdoctags": [
                        {
                            "name": "label",
                            "type": "LabelModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFactoryForLink",
                    "args": [
                        {
                            "name": "link",
                            "type": "LinkModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "AbstractLinkFactory | null",
                    "typeParameters": [],
                    "line": 169,
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "LinkModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFactoryForNode",
                    "args": [
                        {
                            "name": "node",
                            "type": "NodeModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "AbstractNodeFactory | null",
                    "typeParameters": [],
                    "line": 113,
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "NodeModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFactoryForPort",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "AbstractPortFactory | null",
                    "typeParameters": [],
                    "line": 141,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLabelFactories",
                    "args": [],
                    "optional": false,
                    "returnType": "EntityMap<AbstractLabelFactory>",
                    "typeParameters": [],
                    "line": 74
                },
                {
                    "name": "getLabelFactory",
                    "args": [
                        {
                            "name": "type",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "AbstractLabelFactory",
                    "typeParameters": [],
                    "line": 78,
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLinkFactories",
                    "args": [],
                    "optional": false,
                    "returnType": "EntityMap<AbstractLinkFactory>",
                    "typeParameters": [],
                    "line": 154
                },
                {
                    "name": "getLinkFactory",
                    "args": [
                        {
                            "name": "type",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "AbstractLinkFactory",
                    "typeParameters": [],
                    "line": 162,
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNodeDimensions",
                    "args": [
                        {
                            "name": "node",
                            "type": "NodeModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 244,
                    "description": "<p>Determine the width and height of the node passed in.\nIt currently assumes nodes have a rectangular shape, can be overriden for customised shapes.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "NodeModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNodeElement",
                    "args": [
                        {
                            "name": "node",
                            "type": "NodeModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "HTMLElement",
                    "typeParameters": [],
                    "line": 182,
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "NodeModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNodeFactories",
                    "args": [],
                    "optional": false,
                    "returnType": "EntityMap<AbstractNodeFactory>",
                    "typeParameters": [],
                    "line": 102
                },
                {
                    "name": "getNodeFactory",
                    "args": [
                        {
                            "name": "type",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "AbstractNodeFactory",
                    "typeParameters": [],
                    "line": 106,
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNodePortElement",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "HTMLElement",
                    "typeParameters": [],
                    "line": 190,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPathfinding",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 325
                },
                {
                    "name": "getPortCenter",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "{ x: number; y: number; }",
                    "typeParameters": [],
                    "line": 202,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPortCoords",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 220,
                    "description": "<p>Calculate rectangular coordinates of the port passed in.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPortFactories",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 130
                },
                {
                    "name": "getPortFactory",
                    "args": [
                        {
                            "name": "type",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "AbstractPortFactory",
                    "typeParameters": [],
                    "line": 134,
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRelativeMousePoint",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 265,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRelativePoint",
                    "args": [
                        {
                            "name": "x",
                            "type": "number"
                        },
                        {
                            "name": "y",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "{ x: number; y: number; }",
                    "typeParameters": [],
                    "line": 273,
                    "jsdoctags": [
                        {
                            "name": "x",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "y",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRoutingMatrix",
                    "args": [],
                    "optional": false,
                    "returnType": "[][]",
                    "typeParameters": [],
                    "line": 482,
                    "description": "<p>A representation of the canvas in the following format:</p>\n<p>+-----------------+\n| 0 0 1 1 0 0 0 0 |\n| 0 0 1 1 0 0 1 1 |\n| 0 0 0 0 0 0 1 1 |\n| 1 1 0 0 0 0 0 0 |\n| 1 1 0 0 0 0 0 0 |\n+-----------------+</p>\n<p>In which all points blocked by a node (and its ports) are\nmarked as 1; points were there is nothing (ie, free) receive 0.</p>\n"
                },
                {
                    "name": "getSmartRouting",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 502
                },
                {
                    "name": "isModelLocked",
                    "args": [
                        {
                            "name": "model",
                            "type": "BaseEntity"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 282,
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "BaseEntity",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "markNodes",
                    "args": [
                        {
                            "name": "matrix",
                            "type": "number[][]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 509,
                    "description": "<p>Updates (by reference) where nodes will be drawn on the matrix passed in.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "matrix",
                            "type": "number[][]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "markPorts",
                    "args": [
                        {
                            "name": "matrix",
                            "type": "number[][]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 527,
                    "description": "<p>Updates (by reference) where ports will be drawn on the matrix passed in.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "matrix",
                            "type": "number[][]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerDefaultFactories",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61
                },
                {
                    "name": "registerLabelFactory",
                    "args": [
                        {
                            "name": "labelFactory",
                            "type": "AbstractLabelFactory"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "jsdoctags": [
                        {
                            "name": "labelFactory",
                            "type": "AbstractLabelFactory",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerLinkFactory",
                    "args": [
                        {
                            "name": "factory",
                            "type": "AbstractLinkFactory"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158,
                    "jsdoctags": [
                        {
                            "name": "factory",
                            "type": "AbstractLinkFactory",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerNodeFactory",
                    "args": [
                        {
                            "name": "nodeFactory",
                            "type": "AbstractNodeFactory"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "jsdoctags": [
                        {
                            "name": "nodeFactory",
                            "type": "AbstractNodeFactory",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerPortFactory",
                    "args": [
                        {
                            "name": "factory",
                            "type": "AbstractPortFactory"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "jsdoctags": [
                        {
                            "name": "factory",
                            "type": "AbstractPortFactory",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setCanvas",
                    "args": [
                        {
                            "name": "canvas",
                            "type": "Element"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 261,
                    "jsdoctags": [
                        {
                            "name": "canvas",
                            "type": "Element",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSmartRoutingStatus",
                    "args": [
                        {
                            "name": "status",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 315,
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "translateRoutingX",
                    "args": [
                        {
                            "name": "x",
                            "type": "number"
                        },
                        {
                            "name": "reverse",
                            "type": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 461,
                    "description": "<p>The routing matrix does not have negative indexes, but elements could be negatively positioned.\nWe use the functions below to translate back and forth between these coordinates, relying on the\ncalculated values of hAdjustmentFactor and vAdjustmentFactor.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "x",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reverse",
                            "type": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "translateRoutingY",
                    "args": [
                        {
                            "name": "y",
                            "type": "number"
                        },
                        {
                            "name": "reverse",
                            "type": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 464,
                    "jsdoctags": [
                        {
                            "name": "y",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reverse",
                            "type": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "zoomToFit",
                    "args": [
                        {
                            "name": "additionalZoomFactor",
                            "type": "number",
                            "defaultValue": "0.005"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 294,
                    "description": "<p>fit the canvas zoom levels to the elements contained.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 9778,
                                "end": 9798,
                                "flags": 0,
                                "escapedText": "additionalZoomFactor"
                            },
                            "type": "number",
                            "defaultValue": "0.005",
                            "tagName": {
                                "pos": 9772,
                                "end": 9777,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>allow for further zooming out to make sure edges doesn&#39;t cut</p>\n"
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import {\n  ComponentFactoryResolver,\n  ComponentRef,\n  Injectable,\n  Renderer2,\n  RendererFactory2,\n  ViewContainerRef\n} from '@angular/core';\nimport { delay, filter, take } from 'rxjs/operators';\nimport { BaseEntity } from '../base.entity';\nimport { DefaultLabelFactory } from '../defaults/factories/default-label.factory';\nimport { DefaultLinkFactory } from '../defaults/factories/default-link.factory';\nimport { DefaultNodeFactory } from '../defaults/factories/default-node.factory';\nimport { DefaultPortFactory } from '../defaults/factories/default-port.factory';\nimport { AbstractLabelFactory } from '../factories/label.factory';\nimport { AbstractLinkFactory } from '../factories/link.factory';\nimport { AbstractNodeFactory } from '../factories/node.factory';\nimport { AbstractPortFactory } from '../factories/port.factory';\nimport { DiagramModel } from '../models/diagram.model';\nimport { LabelModel } from '../models/label.model';\nimport { LinkModel } from '../models/link.model';\nimport { NodeModel } from '../models/node.model';\nimport { PortModel } from '../models/port.model';\nimport { NgxDiagramsModule } from '../ngx-diagrams.module';\nimport { PathFinding, ROUTING_SCALING_FACTOR } from '../plugins/smart-routing.plugin';\nimport { createValueState } from '../state/state';\nimport { EntityMap } from '../utils';\n\n@Injectable({ providedIn: NgxDiagramsModule })\nexport class DiagramEngine {\n  protected _renderer: Renderer2;\n  protected nodeFactories = new Map<string, AbstractNodeFactory>();\n  protected labelFactories = new Map<string, AbstractLabelFactory>();\n  protected linkFactories = new Map<string, AbstractLinkFactory>();\n  protected portFactories = new Map<string, AbstractPortFactory>();\n  protected canvas$ = createValueState<Element>(null);\n\n  // smart routing related properties\n  smartRouting: boolean;\n  pathFinding: PathFinding;\n\n  // calculated only when smart routing is active\n  canvasMatrix: number[][] = [];\n  routingMatrix: number[][] = [];\n\n  // used when at least one element has negative coordinates\n  hAdjustmentFactor = 0;\n  vAdjustmentFactor = 0;\n\n  diagramModel: DiagramModel;\n\n  constructor(protected resolver: ComponentFactoryResolver, protected rendererFactory: RendererFactory2) {\n    this._renderer = this.rendererFactory.createRenderer(null, null);\n  }\n\n  createDiagram() {\n    this.diagramModel = new DiagramModel(this);\n    return this.diagramModel;\n  }\n\n  registerDefaultFactories() {\n    this.registerNodeFactory(new DefaultNodeFactory(this.resolver, this._renderer));\n    this.registerPortFactory(new DefaultPortFactory(this.resolver, this._renderer));\n    this.registerLinkFactory(new DefaultLinkFactory(this.resolver, this._renderer));\n    this.registerLabelFactory(new DefaultLabelFactory(this.resolver, this._renderer));\n  }\n\n  //#region Factories\n  // LABELS\n  registerLabelFactory(labelFactory: AbstractLabelFactory) {\n    this.labelFactories.set(labelFactory.type, labelFactory);\n  }\n\n  getLabelFactories(): EntityMap<AbstractLabelFactory> {\n    return this.labelFactories;\n  }\n\n  getLabelFactory(type: string): AbstractLabelFactory {\n    if (this.labelFactories.has(type)) {\n      return this.labelFactories.get(type);\n    }\n    throw new Error(`cannot find factory for node of type: [${type}]`);\n  }\n\n  getFactoryForLabel(label: LabelModel): AbstractLabelFactory | null {\n    return this.getLabelFactory(label.getType());\n  }\n\n  generateWidgetForLabel(label: LabelModel, labelHost: ViewContainerRef): ComponentRef<LabelModel> | null {\n    const labelFactory = this.getFactoryForLabel(label);\n    if (!labelFactory) {\n      throw new Error(`Cannot find widget factory for node: ${label.getType()}`);\n    }\n    return labelFactory.generateWidget(label, labelHost);\n  }\n\n  // NODES\n  registerNodeFactory(nodeFactory: AbstractNodeFactory) {\n    this.nodeFactories.set(nodeFactory.type, nodeFactory);\n  }\n\n  getNodeFactories(): EntityMap<AbstractNodeFactory> {\n    return this.nodeFactories;\n  }\n\n  getNodeFactory(type: string): AbstractNodeFactory {\n    if (this.nodeFactories.has(type)) {\n      return this.nodeFactories.get(type);\n    }\n    throw new Error(`cannot find factory for node of type: [${type}]`);\n  }\n\n  getFactoryForNode(node: NodeModel): AbstractNodeFactory | null {\n    return this.getNodeFactory(node.getType());\n  }\n\n  generateWidgetForNode(node: NodeModel, nodesHost: ViewContainerRef): ComponentRef<NodeModel> | null {\n    const nodeFactory = this.getFactoryForNode(node);\n    if (!nodeFactory) {\n      throw new Error(`Cannot find widget factory for node: ${node.getType()}`);\n    }\n    return nodeFactory.generateWidget(this, node, nodesHost);\n  }\n\n  // PORTS\n  registerPortFactory(factory: AbstractPortFactory) {\n    this.portFactories.set(factory.type, factory);\n  }\n\n  getPortFactories() {\n    return this.portFactories;\n  }\n\n  getPortFactory(type: string): AbstractPortFactory {\n    if (this.portFactories.has(type)) {\n      return this.portFactories.get(type);\n    }\n    throw new Error(`cannot find factory for port of type: [${type}]`);\n  }\n\n  getFactoryForPort(port: PortModel): AbstractPortFactory | null {\n    return this.getPortFactory(port.getType());\n  }\n\n  generateWidgetForPort(port: PortModel, portsHost: ViewContainerRef): ComponentRef<PortModel> | null {\n    const portFactory = this.getFactoryForPort(port);\n    if (!portFactory) {\n      throw new Error(`Cannot find widget factory for port: ${port.getType()}`);\n    }\n    return portFactory.generateWidget(port, portsHost);\n  }\n\n  // LINKS\n  getLinkFactories(): EntityMap<AbstractLinkFactory> {\n    return this.linkFactories;\n  }\n\n  registerLinkFactory(factory: AbstractLinkFactory) {\n    this.linkFactories.set(factory.type, factory);\n  }\n\n  getLinkFactory(type: string): AbstractLinkFactory {\n    if (this.linkFactories.has(type)) {\n      return this.linkFactories.get(type);\n    }\n    throw new Error(`cannot find factory for link of type: [${type}]`);\n  }\n\n  getFactoryForLink(link: LinkModel): AbstractLinkFactory | null {\n    return this.getLinkFactory(link.getType());\n  }\n\n  generateWidgetForLink(link: LinkModel, linksHost: ViewContainerRef): ComponentRef<LinkModel> | null {\n    const linkFactory = this.getFactoryForLink(link);\n    if (!linkFactory) {\n      throw new Error(`Cannot find link factory for link: ${link.getType()}`);\n    }\n    return linkFactory.generateWidget(this, link, linksHost);\n  }\n  //#endregion\n\n  getNodeElement(node: NodeModel): HTMLElement {\n    const selector = this.canvas$.value.querySelector(`[data-nodeid=\"${node.id}\"]`);\n    if (selector === null) {\n      throw new Error('Cannot find Node element with node id: [' + node.id + ']');\n    }\n    return selector as HTMLElement;\n  }\n\n  getNodePortElement(port: PortModel): HTMLElement {\n    const selector = this.canvas$.value.querySelector(\n      `[data-nodeid=\"${port.getParent().id}\"] [data-portid=\"${port.id}\"]`\n    );\n    if (selector === null) {\n      throw new Error(\n        'Cannot find Node Port element with node id: [' + port.getParent().id + '] and port id: [' + port.id + ']'\n      );\n    }\n    return selector as HTMLElement;\n  }\n\n  getPortCenter(port: PortModel) {\n    const sourceElement = this.getNodePortElement(port);\n    const sourceRect = sourceElement.getBoundingClientRect();\n    const rel = this.getRelativePoint(sourceRect.left, sourceRect.top);\n\n    return {\n      x:\n        sourceElement.offsetWidth / 2 +\n        (rel.x - this.diagramModel.getOffsetX()) / (this.diagramModel.getZoomLevel() / 100.0),\n      y:\n        sourceElement.offsetHeight / 2 +\n        (rel.y - this.diagramModel.getOffsetY()) / (this.diagramModel.getZoomLevel() / 100.0)\n    };\n  }\n\n  /**\n   * Calculate rectangular coordinates of the port passed in.\n   */\n  getPortCoords(\n    port: PortModel\n  ): {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n  } {\n    const sourceElement = this.getNodePortElement(port);\n    const sourceRect = sourceElement.getBoundingClientRect() as DOMRect;\n    const canvasRect = this.canvas$.value.getBoundingClientRect() as ClientRect;\n\n    return {\n      x: (sourceRect.x - this.diagramModel.getOffsetX()) / (this.diagramModel.getZoomLevel() / 100.0) - canvasRect.left,\n      y: (sourceRect.y - this.diagramModel.getOffsetY()) / (this.diagramModel.getZoomLevel() / 100.0) - canvasRect.top,\n      width: sourceRect.width,\n      height: sourceRect.height\n    };\n  }\n\n  /**\n   * Determine the width and height of the node passed in.\n   * It currently assumes nodes have a rectangular shape, can be overriden for customised shapes.\n   */\n  getNodeDimensions(node: NodeModel): { width: number; height: number } {\n    if (!this.canvas$.value) {\n      return {\n        width: 0,\n        height: 0\n      };\n    }\n\n    const nodeElement = this.getNodeElement(node);\n    const nodeRect = nodeElement.getBoundingClientRect();\n\n    return {\n      width: nodeRect.width,\n      height: nodeRect.height\n    };\n  }\n\n  setCanvas(canvas: Element) {\n    this.canvas$.set(canvas).emit();\n  }\n\n  getRelativeMousePoint(event: MouseEvent): { x: number; y: number } {\n    const point = this.getRelativePoint(event.clientX, event.clientY);\n    return {\n      x: (point.x - this.diagramModel.getOffsetX()) / (this.diagramModel.getZoomLevel() / 100.0),\n      y: (point.y - this.diagramModel.getOffsetY()) / (this.diagramModel.getZoomLevel() / 100.0)\n    };\n  }\n\n  getRelativePoint(x: number, y: number) {\n    const canvasRect = this.canvas$.value.getBoundingClientRect();\n    return { x: x - canvasRect.left, y: y - canvasRect.top };\n  }\n\n  getDiagramModel() {\n    return this.diagramModel;\n  }\n\n  isModelLocked(model: BaseEntity) {\n    if (this.diagramModel.getLocked()) {\n      return true;\n    }\n\n    return model.getLocked();\n  }\n\n  /**\n   * fit the canvas zoom levels to the elements contained.\n   * @param additionalZoomFactor allow for further zooming out to make sure edges doesn't cut\n   */\n  zoomToFit(additionalZoomFactor = 0.005) {\n    this.canvas$.value$.pipe(filter(Boolean), take(1), delay(0)).subscribe((canvas: HTMLElement) => {\n      const xFactor = canvas.clientWidth / canvas.scrollWidth;\n      const yFactor = canvas.clientHeight / canvas.scrollHeight;\n      const zoomFactor = xFactor < yFactor ? xFactor : yFactor;\n\n      let newZoomLvl = this.diagramModel.getZoomLevel() * (zoomFactor - additionalZoomFactor);\n      const maxZoomOut = this.diagramModel.getMaxZoomOut();\n\n      if (maxZoomOut && newZoomLvl < maxZoomOut) {\n        newZoomLvl = maxZoomOut;\n      }\n\n      this.diagramModel.setZoomLevel(newZoomLvl);\n\n      // TODO: either block the canvas movement on 0,0 or detect the top left furthest element and set the offest to its edges\n      this.diagramModel.setOffset(0, 0);\n    });\n  }\n\n  // SMART ROUTING\n  setSmartRoutingStatus(status: boolean) {\n    if (status && !this.pathFinding) {\n      this.pathFinding = new PathFinding(this);\n    } else {\n      this.pathFinding = null;\n    }\n\n    this.smartRouting = status;\n  }\n\n  getPathfinding() {\n    return this.pathFinding;\n  }\n\n  calculateCanvasMatrix() {\n    const {\n      width: canvasWidth,\n      hAdjustmentFactor,\n      height: canvasHeight,\n      vAdjustmentFactor\n    } = this.calculateMatrixDimensions();\n\n    this.hAdjustmentFactor = hAdjustmentFactor;\n    this.vAdjustmentFactor = vAdjustmentFactor;\n\n    const matrixWidth = Math.ceil(canvasWidth / ROUTING_SCALING_FACTOR);\n    const matrixHeight = Math.ceil(canvasHeight / ROUTING_SCALING_FACTOR);\n\n    this.canvasMatrix = Array.from({ length: matrixHeight }, (_, i) => i + 1).map(() => {\n      return new Array(matrixWidth).fill(0);\n    });\n  }\n\n  /**\n   * Despite being a long method, we simply iterate over all three collections (nodes, ports and points)\n   * to find the highest X and Y dimensions, so we can build the matrix large enough to contain all elements.\n   */\n  calculateMatrixDimensions(): {\n    width: number;\n    hAdjustmentFactor: number;\n    height: number;\n    vAdjustmentFactor: number;\n  } {\n    const allNodesCoords = this.diagramModel.getNodesArray().map((item) => ({\n      x: item.getCoords().x,\n      width: item.getWidth(),\n      y: item.getCoords().y,\n      height: item.getHeight()\n    }));\n\n    const allLinks = this.diagramModel.getLinksArray();\n\n    const allPortsCoords = allLinks\n      .flatMap((link) => [link.getSourcePort(), link.getTargetPort()])\n      .filter((port) => port !== null)\n      .map((item) => ({\n        x: item.getX(),\n        width: item.getWidth(),\n        y: item.getY(),\n        height: item.getHeight()\n      }));\n\n    const allPointsCoords = allLinks\n      .flatMap((link) => link.getPoints())\n      .map((item) => ({\n        // points don't have width/height, so let's just use 0\n        x: item.getCoords().x,\n        width: 0,\n        y: item.getCoords().y,\n        height: 0\n      }));\n\n    const canvas = this.canvas$.value as HTMLDivElement;\n\n    const allElements = allNodesCoords.concat(allPortsCoords, allPointsCoords);\n\n    const minX =\n      Math.floor(\n        Math.min(\n          allElements.reduce((a, b) => {\n            return a.x <= b.x ? a : b;\n          }).x,\n          0\n        ) / ROUTING_SCALING_FACTOR\n      ) * ROUTING_SCALING_FACTOR;\n\n    const maxXElement = allElements.reduce((a, b) => {\n      return a.x + a.width >= b.x + b.width ? a : b;\n    });\n\n    const maxX = Math.max(maxXElement.x + maxXElement.width, canvas.offsetWidth);\n\n    const minY =\n      Math.floor(\n        Math.min(\n          allElements.reduce((a, b) => {\n            return a.y <= b.y ? a : b;\n          }).y,\n          0\n        ) / ROUTING_SCALING_FACTOR\n      ) * ROUTING_SCALING_FACTOR;\n\n    const maxYElement = allElements.reduce((a, b) => {\n      return a.y + a.height >= b.y + b.height ? a : b;\n    });\n\n    const maxY = Math.max(maxYElement.y + maxYElement.height, canvas.offsetWidth);\n\n    const width = Math.ceil(Math.abs(minX) + maxX);\n    const height = Math.ceil(Math.abs(minY) + maxY);\n\n    return {\n      width,\n      hAdjustmentFactor: Math.abs(minX) / ROUTING_SCALING_FACTOR + 1,\n      height,\n      vAdjustmentFactor: Math.abs(minY) / ROUTING_SCALING_FACTOR + 1\n    };\n  }\n\n  /**\n   * A representation of the canvas in the following format:\n   *\n   * +-----------------+\n   * | 0 0 0 0 0 0 0 0 |\n   * | 0 0 0 0 0 0 0 0 |\n   * | 0 0 0 0 0 0 0 0 |\n   * | 0 0 0 0 0 0 0 0 |\n   * | 0 0 0 0 0 0 0 0 |\n   * +-----------------+\n   *\n   * In which all walkable points are marked by zeros.\n   * It uses @link{#ROUTING_SCALING_FACTOR} to reduce the matrix dimensions and improve performance.\n   */\n  getCanvasMatrix(): number[][] {\n    if (this.canvasMatrix.length === 0) {\n      this.calculateCanvasMatrix();\n    }\n\n    return this.canvasMatrix;\n  }\n\n  /**\n   * The routing matrix does not have negative indexes, but elements could be negatively positioned.\n   * We use the functions below to translate back and forth between these coordinates, relying on the\n   * calculated values of hAdjustmentFactor and vAdjustmentFactor.\n   */\n  translateRoutingX(x: number, reverse = false) {\n    return x + this.hAdjustmentFactor * (reverse ? -1 : 1);\n  }\n  translateRoutingY(y: number, reverse = false) {\n    return y + this.vAdjustmentFactor * (reverse ? -1 : 1);\n  }\n\n  /**\n   * A representation of the canvas in the following format:\n   *\n   * +-----------------+\n   * | 0 0 1 1 0 0 0 0 |\n   * | 0 0 1 1 0 0 1 1 |\n   * | 0 0 0 0 0 0 1 1 |\n   * | 1 1 0 0 0 0 0 0 |\n   * | 1 1 0 0 0 0 0 0 |\n   * +-----------------+\n   *\n   * In which all points blocked by a node (and its ports) are\n   * marked as 1; points were there is nothing (ie, free) receive 0.\n   */\n  getRoutingMatrix(): number[][] {\n    if (this.routingMatrix.length === 0) {\n      this.calculateRoutingMatrix();\n    }\n\n    return this.routingMatrix;\n  }\n\n  calculateRoutingMatrix(): void {\n    const matrix = this.getCanvasMatrix().map((item) => item.slice(0));\n\n    // nodes need to be marked as blocked points\n    this.markNodes(matrix);\n\n    // same thing for ports\n    this.markPorts(matrix);\n\n    this.routingMatrix = matrix;\n  }\n\n  getSmartRouting() {\n    return !!this.smartRouting;\n  }\n\n  /**\n   * Updates (by reference) where nodes will be drawn on the matrix passed in.\n   */\n  markNodes(matrix: number[][]): void {\n    this.diagramModel.getNodes().forEach((node) => {\n      const startX = Math.floor(node.getCoords().x / ROUTING_SCALING_FACTOR);\n      const endX = Math.ceil((node.getCoords().x + node.getWidth()) / ROUTING_SCALING_FACTOR);\n      const startY = Math.floor(node.getCoords().y / ROUTING_SCALING_FACTOR);\n      const endY = Math.ceil((node.getCoords().y + node.getHeight()) / ROUTING_SCALING_FACTOR);\n\n      for (let x = startX - 1; x <= endX + 1; x++) {\n        for (let y = startY - 1; y < endY + 1; y++) {\n          this.markMatrixPoint(matrix, this.translateRoutingX(x), this.translateRoutingY(y));\n        }\n      }\n    });\n  }\n\n  /**\n   * Updates (by reference) where ports will be drawn on the matrix passed in.\n   */\n  markPorts(matrix: number[][]): void {\n    const allElements = this.diagramModel\n      .getLinksArray()\n      .flatMap((link) => [link.getSourcePort(), link.getTargetPort()]);\n\n    allElements\n      .filter((port) => port !== null)\n      .forEach((port) => {\n        const startX = Math.floor(port.getX() / ROUTING_SCALING_FACTOR);\n        const endX = Math.ceil((port.getX() + port.getWidth()) / ROUTING_SCALING_FACTOR);\n        const startY = Math.floor(port.getY() / ROUTING_SCALING_FACTOR);\n        const endY = Math.ceil((port.getY() + port.getHeight()) / ROUTING_SCALING_FACTOR);\n\n        for (let x = startX - 1; x <= endX + 1; x++) {\n          for (let y = startY - 1; y < endY + 1; y++) {\n            this.markMatrixPoint(matrix, this.translateRoutingX(x), this.translateRoutingY(y));\n          }\n        }\n      });\n  }\n\n  markMatrixPoint = (matrix: number[][], x: number, y: number) => {\n    if (matrix[y] !== undefined && matrix[y][x] !== undefined) {\n      matrix[y][x] = 1;\n    }\n  };\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver"
                    },
                    {
                        "name": "rendererFactory",
                        "type": "RendererFactory2"
                    }
                ],
                "line": 50,
                "jsdoctags": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "rendererFactory",
                        "type": "RendererFactory2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AbstractFactory",
            "id": "class-AbstractFactory-09f28dcdb8815ba1d35fb4b0dde046b4",
            "file": "libs/ngx-diagrams/src/lib/factories/base.factory.ts",
            "type": "class",
            "sourceCode": "import { BaseModel } from '../models/base.model';\n\nexport abstract class AbstractFactory<T extends BaseModel> {\n  protected _type: string;\n\n  constructor(type: string) {\n    this._type = type;\n  }\n\n  get type(): string {\n    return this._type;\n  }\n\n  abstract getNewInstance(initialConfig?: any): T;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "type",
                        "type": "string"
                    }
                ],
                "line": 4,
                "jsdoctags": [
                    {
                        "name": "type",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        113
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getNewInstance",
                    "args": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "accessors": {
                "type": {
                    "name": "type",
                    "getSignature": {
                        "name": "type",
                        "type": "string",
                        "returnType": "string",
                        "line": 10
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AbstractLabelFactory",
            "id": "class-AbstractLabelFactory-1619017ea494f7d087cd8b162c2de685",
            "file": "libs/ngx-diagrams/src/lib/factories/label.factory.ts",
            "type": "class",
            "sourceCode": "import { AbstractFactory } from './base.factory';\nimport { ViewContainerRef, ComponentRef } from '@angular/core';\nimport { LabelModel } from '../models/label.model';\n\nexport abstract class AbstractLabelFactory<\n  T extends LabelModel = LabelModel\n> extends AbstractFactory<T> {\n  abstract generateWidget(\n    label: LabelModel,\n    labelsHost: ViewContainerRef\n  ): ComponentRef<T>;\n}\n",
            "properties": [
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "AbstractFactory"
                    }
                }
            ],
            "methods": [
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "name": "label",
                            "type": "LabelModel"
                        },
                        {
                            "name": "labelsHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<T>",
                    "typeParameters": [],
                    "line": 8,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "label",
                            "type": "LabelModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "labelsHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNewInstance",
                    "args": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFactory"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "AbstractFactory",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AbstractLinkFactory",
            "id": "class-AbstractLinkFactory-2a784b96dc70a81497967eccd9e21663",
            "file": "libs/ngx-diagrams/src/lib/factories/link.factory.ts",
            "type": "class",
            "sourceCode": "import { LinkModel } from '../models/link.model';\nimport { AbstractFactory } from './base.factory';\nimport { ViewContainerRef, ComponentRef } from '@angular/core';\nimport { DiagramEngine } from '../services/engine.service';\n\nexport abstract class AbstractLinkFactory<\n  T extends LinkModel = LinkModel\n> extends AbstractFactory<T> {\n  abstract generateWidget(\n    diagramEngine: DiagramEngine,\n    link: LinkModel,\n    linksHost: ViewContainerRef\n  ): ComponentRef<T>;\n}\n",
            "properties": [
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "AbstractFactory"
                    }
                }
            ],
            "methods": [
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "name": "diagramEngine",
                            "type": "DiagramEngine"
                        },
                        {
                            "name": "link",
                            "type": "LinkModel"
                        },
                        {
                            "name": "linksHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<T>",
                    "typeParameters": [],
                    "line": 9,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "diagramEngine",
                            "type": "DiagramEngine",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "link",
                            "type": "LinkModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "linksHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNewInstance",
                    "args": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFactory"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "AbstractFactory",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AbstractNodeFactory",
            "id": "class-AbstractNodeFactory-7301f8f7f0a76041aeeafae34d53448f",
            "file": "libs/ngx-diagrams/src/lib/factories/node.factory.ts",
            "type": "class",
            "sourceCode": "import { NodeModel } from '../models/node.model';\nimport { AbstractFactory } from './base.factory';\nimport { DiagramEngine } from '../services/engine.service';\nimport { ViewContainerRef, ComponentRef } from '@angular/core';\n\nexport abstract class AbstractNodeFactory<\n  T extends NodeModel = NodeModel\n> extends AbstractFactory<T> {\n  abstract generateWidget(\n    diagramEngine: DiagramEngine,\n    node: NodeModel,\n    nodeHost: ViewContainerRef\n  ): ComponentRef<T>;\n}\n",
            "properties": [
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "AbstractFactory"
                    }
                }
            ],
            "methods": [
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "name": "diagramEngine",
                            "type": "DiagramEngine"
                        },
                        {
                            "name": "node",
                            "type": "NodeModel"
                        },
                        {
                            "name": "nodeHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<T>",
                    "typeParameters": [],
                    "line": 9,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "diagramEngine",
                            "type": "DiagramEngine",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "node",
                            "type": "NodeModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nodeHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNewInstance",
                    "args": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFactory"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "AbstractFactory",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AbstractPortFactory",
            "id": "class-AbstractPortFactory-e0fbb1190cac9edb994b24edd4af747a",
            "file": "libs/ngx-diagrams/src/lib/factories/port.factory.ts",
            "type": "class",
            "sourceCode": "import { PortModel } from '../models/port.model';\nimport { AbstractFactory } from './base.factory';\nimport { ViewContainerRef, ComponentRef } from '@angular/core';\n\nexport abstract class AbstractPortFactory<\n  T extends PortModel = PortModel\n> extends AbstractFactory<T> {\n  abstract generateWidget(\n    port: PortModel,\n    portHost: ViewContainerRef\n  ): ComponentRef<T>;\n}\n",
            "properties": [
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "AbstractFactory"
                    }
                }
            ],
            "methods": [
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        },
                        {
                            "name": "portHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<T>",
                    "typeParameters": [],
                    "line": 8,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "portHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNewInstance",
                    "args": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFactory"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "AbstractFactory",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BaseAction",
            "id": "class-BaseAction-a7b323858d4741fcd6169bed7f82248d",
            "file": "libs/ngx-diagrams/src/lib/actions/base.action.ts",
            "type": "class",
            "sourceCode": "export class BaseAction {\n  mouseX: number;\n  mouseY: number;\n  ms: number;\n\n  constructor(mouseX: number, mouseY: number) {\n    this.mouseX = mouseX;\n    this.mouseY = mouseY;\n    this.ms = new Date().getTime();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "mouseX",
                        "type": "number"
                    },
                    {
                        "name": "mouseY",
                        "type": "number"
                    }
                ],
                "line": 4,
                "jsdoctags": [
                    {
                        "name": "mouseX",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mouseY",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "mouseX",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "mouseY",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "ms",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BaseEntity",
            "id": "class-BaseEntity-bffff06c3008d71577c6933926aeaee9",
            "file": "libs/ngx-diagrams/src/lib/base.entity.ts",
            "type": "class",
            "sourceCode": "import { MonoTypeOperatorFunction, Observable, Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { BaseEvent, LockEvent } from './interfaces/event.interface';\nimport { createValueState } from './state/state';\nimport {\n  entityProperty as _entityProperty,\n  ID,\n  log as _log,\n  LOG_LEVEL,\n  UID,\n  withLog as _withLog\n} from './utils/tool-kit.util';\nimport { HashMap } from './utils/types';\n\nexport type BaseEntityType = 'node' | 'link' | 'port' | 'point';\n\nexport class BaseEntity {\n  protected _id: ID;\n\n  protected destroyed$ = new Subject<void>();\n  protected locked$ = createValueState(false, this.entityPipe('locked'));\n\n  protected readonly _logPrefix: string;\n\n  constructor(id?: ID, logPrefix = '') {\n    this._id = id || UID();\n    this._logPrefix = `${logPrefix}`;\n  }\n\n  get id(): ID {\n    return this._id;\n  }\n\n  set id(id: ID) {\n    this._id = id;\n  }\n\n  log(message: string, ...args: any): void {\n    _log(`${this._logPrefix} ${message}: `, LOG_LEVEL.LOG, ...args);\n  }\n\n  withLog(message: string, ...args: any): any {\n    return _withLog(`${this._logPrefix} ${message}: `, LOG_LEVEL.LOG, ...args);\n  }\n\n  entityPipe<T>(logMessage = ''): MonoTypeOperatorFunction<T> {\n    return _entityProperty<T>(this.onEntityDestroy(), 0, `${this._logPrefix}: ${logMessage}`);\n  }\n\n  getLocked(): boolean {\n    return this.locked$.value;\n  }\n\n  setLocked(locked = true) {\n    this.locked$.set(locked).emit();\n  }\n\n  // eslint-disable-next-line\n  doClone(lookupTable: HashMap<any> = {}, clone: any) {\n    /*noop*/\n  }\n\n  clone(lookupTable: HashMap<any> = {}) {\n    // try and use an existing clone first\n    if (lookupTable[this.id]) {\n      return lookupTable[this.id];\n    }\n    const clone = { ...this };\n    clone.id = UID();\n    // clone.clearListeners();\n    lookupTable[this.id] = clone;\n\n    this.doClone(lookupTable, clone);\n    return clone;\n  }\n\n  serialize() {\n    return {\n      id: this.id,\n      locked: this.getLocked()\n    };\n  }\n\n  lockChanges(): Observable<LockEvent> {\n    return this.locked$.select((locked) => new LockEvent(this, locked));\n  }\n\n  destroy() {\n    this.log('entity destroyed');\n    this.destroyed$.next();\n    this.destroyed$.complete();\n  }\n\n  onEntityDestroy(): Observable<BaseEvent<BaseEntity>> {\n    return this.destroyed$.pipe(map((opts) => new BaseEvent(this, opts)));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "id",
                        "type": "ID",
                        "optional": true
                    },
                    {
                        "name": "logPrefix",
                        "type": "string",
                        "defaultValue": "''"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "ID",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logPrefix",
                        "type": "string",
                        "defaultValue": "''",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113,
                        132
                    ]
                },
                {
                    "name": "destroyed$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "locked$",
                    "defaultValue": "createValueState(false, this.entityPipe('locked'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        113
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 50
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 84
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 94
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 77
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "accessors": {
                "id": {
                    "name": "id",
                    "setSignature": {
                        "name": "id",
                        "type": "void",
                        "args": [
                            {
                                "name": "id",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 34,
                        "jsdoctags": [
                            {
                                "name": "id",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "id",
                        "type": "",
                        "returnType": "ID",
                        "line": 30
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BaseEvent",
            "id": "class-BaseEvent-0891b2f46b0f06f06af1483c5bb51095",
            "file": "libs/ngx-diagrams/src/lib/interfaces/event.interface.ts",
            "type": "class",
            "sourceCode": "import { BaseEntity } from '../base.entity';\nimport { ID, UID } from '../utils/tool-kit.util';\n\n// region events\nexport class BaseEvent<T extends BaseEntity> {\n  entity: T;\n  entityId: ID;\n  stopPropagation: () => any;\n  firing: boolean;\n  id: ID;\n  propogate: boolean;\n\n  constructor(entity: T, options?: any) {\n    this.id = UID();\n    this.entity = entity;\n    this.entityId = entity.id;\n    this.firing = true;\n    this.stopPropagation = () => (this.firing = false);\n    this.propogate = options ? options.propagate : null;\n  }\n}\nexport class LockEvent<T extends BaseEntity = BaseEntity> extends BaseEvent<T> {\n  locked: boolean;\n\n  constructor(entity: T, locked = false) {\n    super(entity);\n    this.locked = locked;\n  }\n}\nexport class ParentChangeEvent<\n  P extends BaseEntity = BaseEntity,\n  T extends BaseEntity = BaseEntity\n> extends BaseEvent<T> {\n  parent: P;\n\n  constructor(entity: T, parent: P) {\n    super(entity);\n    this.parent = parent;\n  }\n}\nexport class SelectionEvent<\n  T extends BaseEntity = BaseEntity\n> extends BaseEvent<T> {\n  isSelected: boolean;\n\n  constructor(entity: T, selected: boolean) {\n    super(entity);\n    this.isSelected = selected;\n  }\n}\nexport class PaintedEvent<T extends BaseEntity = BaseEntity> extends BaseEvent<\n  T\n> {\n  isPainted: boolean;\n\n  constructor(entity: T, painted = false) {\n    super(entity);\n    this.isPainted = painted;\n  }\n}\n// endregion\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "entity",
                        "type": "T"
                    },
                    {
                        "name": "options",
                        "type": "any",
                        "optional": true
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "entity",
                        "type": "T",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "options",
                        "type": "any",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "entity",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "entityId",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "firing",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "propogate",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "stopPropagation",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BaseModel",
            "id": "class-BaseModel-5d301d36984037db077f2f691d4e5031",
            "file": "libs/ngx-diagrams/src/lib/models/base.model.ts",
            "type": "class",
            "sourceCode": "import { Observable } from 'rxjs';\nimport { BaseEntity } from '../base.entity';\nimport { PaintedEvent, ParentChangeEvent, SelectionEvent } from '../interfaces/event.interface';\nimport { createValueState } from '../state/state';\n\nexport class BaseModel<E extends BaseEntity = BaseEntity> extends BaseEntity {\n  protected readonly _type: string;\n\n  protected parent$ = createValueState<E>(null, this.entityPipe('ParentsChange'));\n  protected selected$ = createValueState<boolean>(false, this.entityPipe('SelectedChange'));\n  protected hovered$ = createValueState<boolean>(false, this.entityPipe('HoveredChange'));\n  protected painted$ = createValueState<boolean>(false, this.entityPipe('PaintedChange'));\n\n  constructor(type?: string, id?: string, logPrefix = '[Base]') {\n    super(id, logPrefix);\n    this._type = type;\n  }\n\n  serialize() {\n    return {\n      ...super.serialize(),\n      type: this.getType()\n    };\n  }\n\n  getParent(): E {\n    return this.parent$.value;\n  }\n\n  setParent(parent: E): void {\n    this.parent$.set(parent).emit();\n  }\n\n  parentChanges(): Observable<ParentChangeEvent<E>> {\n    return this.parent$.select((p) => new ParentChangeEvent(this, p));\n  }\n\n  getPainted(): boolean {\n    return this.painted$.value;\n  }\n\n  setPainted(painted = true): void {\n    this.painted$.set(painted).emit();\n  }\n\n  getHovered(): boolean {\n    return this.hovered$.value;\n  }\n\n  setHovered(painted = true): void {\n    this.hovered$.set(painted).emit();\n  }\n\n  selectHovered(): Observable<boolean> {\n    return this.hovered$.value$;\n  }\n\n  paintChanges(): Observable<PaintedEvent> {\n    return this.painted$.select((p) => new PaintedEvent(this, p));\n  }\n\n  getType(): string {\n    return this._type;\n  }\n\n  getSelected(): boolean {\n    return this.selected$.value;\n  }\n\n  selectSelected(): Observable<boolean> {\n    return this.selected$.select();\n  }\n\n  setSelected(selected = true): void {\n    this.selected$.set(selected).emit();\n  }\n\n  selectionChanges(): Observable<SelectionEvent> {\n    return this.selected$.select((selected) => new SelectionEvent(this, selected));\n  }\n\n  getSelectedEntities(): BaseModel[] {\n    return this.getSelected() ? [this] : [];\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "type",
                        "type": "string",
                        "optional": true
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "optional": true
                    },
                    {
                        "name": "logPrefix",
                        "type": "string",
                        "defaultValue": "'[Base]'"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "type",
                        "type": "string",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logPrefix",
                        "type": "string",
                        "defaultValue": "'[Base]'",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        113,
                        132
                    ]
                },
                {
                    "name": "hovered$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('HoveredChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "painted$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('PaintedChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "parent$",
                    "defaultValue": "createValueState<E>(null, this.entityPipe('ParentsChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "selected$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('SelectedChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "destroyed$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "locked$",
                    "defaultValue": "createValueState(false, this.entityPipe('locked'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 46
                },
                {
                    "name": "getPainted",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 38
                },
                {
                    "name": "getParent",
                    "args": [],
                    "optional": false,
                    "returnType": "E",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "getSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 66
                },
                {
                    "name": "getSelectedEntities",
                    "args": [],
                    "optional": false,
                    "returnType": "BaseModel[]",
                    "typeParameters": [],
                    "line": 82
                },
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 62
                },
                {
                    "name": "paintChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<PaintedEvent>",
                    "typeParameters": [],
                    "line": 58
                },
                {
                    "name": "parentChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ParentChangeEvent<E>>",
                    "typeParameters": [],
                    "line": 34
                },
                {
                    "name": "selectHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 54
                },
                {
                    "name": "selectionChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SelectionEvent>",
                    "typeParameters": [],
                    "line": 78
                },
                {
                    "name": "selectSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 70
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19
                },
                {
                    "name": "setHovered",
                    "args": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setPainted",
                    "args": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setParent",
                    "args": [
                        {
                            "name": "parent",
                            "type": "E"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "jsdoctags": [
                        {
                            "name": "parent",
                            "type": "E",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSelected",
                    "args": [
                        {
                            "name": "selected",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "jsdoctags": [
                        {
                            "name": "selected",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 50,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 84,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 94,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 77,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "BaseEntity",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CustomLabelFactory",
            "id": "class-CustomLabelFactory-2f826698810ea3813f2e78f99631a9c6",
            "file": "libs/ngx-diagrams/stories/label/custom/custom.factory.ts",
            "type": "class",
            "sourceCode": "import {\n  ViewContainerRef,\n  ComponentRef,\n  ComponentFactoryResolver,\n  ComponentFactory,\n  Renderer2,\n} from '@angular/core';\nimport { AbstractLabelFactory, DefaultLabelModel } from 'ngx-diagrams';\nimport { CustomLabelComponent } from './custom-label.component';\n\nexport class CustomLabelFactory extends AbstractLabelFactory<\n  DefaultLabelModel\n> {\n  constructor(\n    private resolver: ComponentFactoryResolver,\n    private renderer: Renderer2\n  ) {\n    super('custom-label');\n  }\n\n  generateWidget(\n    label: CustomLabelComponent,\n    labelHost: ViewContainerRef\n  ): ComponentRef<CustomLabelComponent> {\n    const componentRef = labelHost.createComponent(this.getRecipe());\n\n    // attach coordinates and default positional behaviour to the generated component host\n    const rootNode = componentRef.location.nativeElement;\n\n    // default style for link\n    this.renderer.setStyle(rootNode, 'position', 'absolute');\n\n    // data attributes\n    this.renderer.setAttribute(rootNode, 'data-labelid', label.id);\n\n    // on destroy make sure to destroy the componentRef\n    label.onEntityDestroy().subscribe(() => {\n      componentRef.destroy();\n    });\n\n    // assign all passed properties to node initialization.\n    Object.entries(label).forEach(([key, value]) => {\n      componentRef.instance[key] = value;\n    });\n\n    return componentRef;\n  }\n\n  getRecipe(): ComponentFactory<CustomLabelComponent> {\n    return this.resolver.resolveComponentFactory(CustomLabelComponent);\n  }\n\n  getNewInstance() {\n    return new DefaultLabelModel();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "AbstractLabelFactory"
                    }
                },
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "AbstractFactory"
                    }
                }
            ],
            "methods": [
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "name": "label",
                            "type": "CustomLabelComponent"
                        },
                        {
                            "name": "labelHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<CustomLabelComponent>",
                    "typeParameters": [],
                    "line": 21,
                    "jsdoctags": [
                        {
                            "name": "label",
                            "type": "CustomLabelComponent",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "labelHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNewInstance",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 53
                },
                {
                    "name": "getRecipe",
                    "args": [],
                    "optional": false,
                    "returnType": "ComponentFactory<CustomLabelComponent>",
                    "typeParameters": [],
                    "line": 49
                },
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "name": "label",
                            "type": "LabelModel"
                        },
                        {
                            "name": "labelsHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<T>",
                    "typeParameters": [],
                    "line": 8,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "label",
                            "type": "LabelModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "labelsHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractLabelFactory"
                    }
                },
                {
                    "name": "getNewInstance",
                    "args": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractLabelFactory"
                    }
                },
                {
                    "name": "getNewInstance",
                    "args": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFactory"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "AbstractLabelFactory",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CustomLinkFactory",
            "id": "class-CustomLinkFactory-b82d353d878df477111c6cd67f6b2a18",
            "file": "libs/ngx-diagrams/stories/link/custom/custom.factory.ts",
            "type": "class",
            "sourceCode": "import {\n  ViewContainerRef,\n  ComponentRef,\n  ComponentFactoryResolver,\n  ComponentFactory,\n  Renderer2,\n} from '@angular/core';\nimport {\n  AbstractLinkFactory,\n  DefaultLinkModel,\n  DiagramEngine,\n} from 'ngx-diagrams';\nimport { CustomLinkComponent } from './custom-link.component';\n\nexport class CustomLinkFactory extends AbstractLinkFactory<DefaultLinkModel> {\n  constructor(\n    private resolver: ComponentFactoryResolver,\n    private renderer: Renderer2\n  ) {\n    super('custom-link');\n  }\n\n  generateWidget(\n    diagramEngine: DiagramEngine,\n    link: DefaultLinkModel,\n    linksHost: ViewContainerRef\n  ): ComponentRef<CustomLinkComponent> {\n    const componentRef = linksHost.createComponent(this.getRecipe());\n    link.setWidth(1);\n    link.setColor('pink');\n    // attach coordinates and default positional behaviour to the generated component host\n    const rootNode = componentRef.location.nativeElement;\n\n    // default style for link\n    this.renderer.setStyle(rootNode, 'position', 'absolute');\n\n    // data attributes\n    this.renderer.setAttribute(rootNode, 'data-linkid', link.id);\n\n    // on destroy make sure to destroy the componentRef\n    link.onEntityDestroy().subscribe(() => {\n      componentRef.destroy();\n    });\n\n    // assign all passed properties to node initialization.\n    Object.entries(link).forEach(([key, value]) => {\n      componentRef.instance[key] = value;\n    });\n\n    componentRef.instance.diagramEngine = diagramEngine;\n    componentRef.instance.setPainted(true);\n    return componentRef;\n  }\n\n  getRecipe(): ComponentFactory<CustomLinkComponent> {\n    return this.resolver.resolveComponentFactory(CustomLinkComponent);\n  }\n\n  getNewInstance() {\n    return new DefaultLinkModel({ type: 'custom-link' });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "AbstractLinkFactory"
                    }
                },
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "AbstractFactory"
                    }
                }
            ],
            "methods": [
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "name": "diagramEngine",
                            "type": "DiagramEngine"
                        },
                        {
                            "name": "link",
                            "type": "DefaultLinkModel"
                        },
                        {
                            "name": "linksHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<CustomLinkComponent>",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "diagramEngine",
                            "type": "DiagramEngine",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "link",
                            "type": "DefaultLinkModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "linksHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNewInstance",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 59
                },
                {
                    "name": "getRecipe",
                    "args": [],
                    "optional": false,
                    "returnType": "ComponentFactory<CustomLinkComponent>",
                    "typeParameters": [],
                    "line": 55
                },
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "name": "diagramEngine",
                            "type": "DiagramEngine"
                        },
                        {
                            "name": "link",
                            "type": "LinkModel"
                        },
                        {
                            "name": "linksHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<T>",
                    "typeParameters": [],
                    "line": 9,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "diagramEngine",
                            "type": "DiagramEngine",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "link",
                            "type": "LinkModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "linksHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractLinkFactory"
                    }
                },
                {
                    "name": "getNewInstance",
                    "args": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractLinkFactory"
                    }
                },
                {
                    "name": "getNewInstance",
                    "args": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFactory"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "AbstractLinkFactory",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CustomNodeFactory",
            "id": "class-CustomNodeFactory-d6b13b8289a83ba43b79deb34e7a4d44",
            "file": "libs/ngx-diagrams/stories/node/custom/custom.factory.ts",
            "type": "class",
            "sourceCode": "import {\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  ComponentRef,\n  ComponentFactory,\n  Renderer2,\n} from '@angular/core';\nimport {\n  AbstractNodeFactory,\n  DefaultNodeModel,\n  DiagramEngine,\n} from 'ngx-diagrams';\nimport { CustomNodeComponent } from './custom.component';\n\nexport class CustomNodeFactory extends AbstractNodeFactory<DefaultNodeModel> {\n  constructor(\n    private resolver: ComponentFactoryResolver,\n    private renderer: Renderer2\n  ) {\n    super('custom-node');\n  }\n\n  generateWidget(\n    diagramEngine: DiagramEngine,\n    node: DefaultNodeModel,\n    nodesHost: ViewContainerRef\n  ): ComponentRef<CustomNodeComponent> {\n    const componentRef = nodesHost.createComponent(this.getRecipe());\n\n    // attach coordinates and default positional behaviour to the generated component host\n    const rootNode = componentRef.location.nativeElement;\n\n    // default style for node\n    this.renderer.setStyle(rootNode, 'position', 'absolute');\n    this.renderer.setStyle(rootNode, 'display', 'block');\n\n    // data attributes\n    this.renderer.setAttribute(rootNode, 'data-nodeid', node.id);\n\n    // subscribe to node coordinates\n    node.selectCoords().subscribe(({ x, y }) => {\n      this.renderer.setStyle(rootNode, 'left', `${x}px`);\n      this.renderer.setStyle(rootNode, 'top', `${y}px`);\n    });\n\n    node.selectionChanges().subscribe((e) => {\n      e.isSelected\n        ? this.renderer.addClass(rootNode, 'selected')\n        : this.renderer.removeClass(rootNode, 'selected');\n    });\n\n    node.onEntityDestroy().subscribe((e) => {\n      componentRef.destroy();\n    });\n\n    // assign all passed properties to node initialization.\n    Object.entries(node).forEach(([key, value]) => {\n      componentRef.instance[key] = value;\n    });\n\n    componentRef.instance.setDiagramEngine(diagramEngine);\n\n    return componentRef;\n  }\n\n  getRecipe(): ComponentFactory<CustomNodeComponent> {\n    return this.resolver.resolveComponentFactory(CustomNodeComponent);\n  }\n\n  getNewInstance(initialConfig?: any): DefaultNodeModel {\n    return new DefaultNodeModel(...initialConfig);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "AbstractNodeFactory"
                    }
                },
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "AbstractFactory"
                    }
                }
            ],
            "methods": [
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "name": "diagramEngine",
                            "type": "DiagramEngine"
                        },
                        {
                            "name": "node",
                            "type": "DefaultNodeModel"
                        },
                        {
                            "name": "nodesHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<CustomNodeComponent>",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "diagramEngine",
                            "type": "DiagramEngine",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "node",
                            "type": "DefaultNodeModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nodesHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNewInstance",
                    "args": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "DefaultNodeModel",
                    "typeParameters": [],
                    "line": 70,
                    "jsdoctags": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRecipe",
                    "args": [],
                    "optional": false,
                    "returnType": "ComponentFactory<CustomNodeComponent>",
                    "typeParameters": [],
                    "line": 66
                },
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "name": "diagramEngine",
                            "type": "DiagramEngine"
                        },
                        {
                            "name": "node",
                            "type": "NodeModel"
                        },
                        {
                            "name": "nodeHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<T>",
                    "typeParameters": [],
                    "line": 9,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "diagramEngine",
                            "type": "DiagramEngine",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "node",
                            "type": "NodeModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nodeHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractNodeFactory"
                    }
                },
                {
                    "name": "getNewInstance",
                    "args": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractNodeFactory"
                    }
                },
                {
                    "name": "getNewInstance",
                    "args": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFactory"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "AbstractNodeFactory",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CustomPortFactory",
            "id": "class-CustomPortFactory-2a54d5185a68486bf444f625892abc4b",
            "file": "libs/ngx-diagrams/stories/port/custom/custom.factory.ts",
            "type": "class",
            "sourceCode": "import {\n  ViewContainerRef,\n  ComponentRef,\n  ComponentFactory,\n  ComponentFactoryResolver,\n  Renderer2,\n} from '@angular/core';\nimport { AbstractPortFactory, DefaultPortModel } from 'ngx-diagrams';\nimport { Observable } from 'rxjs';\nimport { map, takeUntil } from 'rxjs/operators';\nimport { CustomPortComponent } from './custom.component';\n\nexport class CustomPortFactory extends AbstractPortFactory<\n  CustomPortComponent\n> {\n  constructor(\n    private resolver: ComponentFactoryResolver,\n    private renderer: Renderer2\n  ) {\n    super('custom-port');\n  }\n\n  generateWidget(\n    port: DefaultPortModel,\n    portsHost: ViewContainerRef\n  ): ComponentRef<CustomPortComponent> {\n    const componentRef = portsHost.createComponent(this.getRecipe());\n\n    // attach coordinates and default positional behaviour to the generated component host\n    const rootNode = componentRef.location.nativeElement as HTMLElement;\n\n    // data attributes\n    this.renderer.setAttribute(rootNode, 'data-portid', port.id);\n    this.renderer.setAttribute(rootNode, 'data-name', port.getName());\n\n    port.in\n      ? this.renderer.addClass(rootNode, 'in')\n      : this.renderer.addClass(rootNode, 'out');\n\n    // assign all passed properties to node initialization.\n    Object.entries(port).forEach(([key, value]) => {\n      componentRef.instance[key] = value;\n    });\n\n    // this method will add classes to all ports that have links\n    this.isConnected(port).subscribe((connected) => {\n      connected\n        ? this.renderer.addClass(rootNode, 'connected')\n        : this.renderer.removeClass(rootNode, 'connected');\n    });\n\n    port.onEntityDestroy().subscribe((e) => {\n      componentRef.destroy();\n    });\n\n    return componentRef;\n  }\n\n  getRecipe(): ComponentFactory<CustomPortComponent> {\n    return this.resolver.resolveComponentFactory(CustomPortComponent);\n  }\n\n  getNewInstance(initialConfig?: any): DefaultPortModel {\n    return new DefaultPortModel({\n      isInput: true,\n      name: 'unknown',\n      ...initialConfig,\n    });\n  }\n\n  isConnected(port: DefaultPortModel): Observable<boolean> {\n    return port.selectLinks().pipe(\n      takeUntil(port.onEntityDestroy()),\n      map((links) => Object.keys(links).length > 0)\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "AbstractPortFactory"
                    }
                },
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "AbstractFactory"
                    }
                }
            ],
            "methods": [
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "name": "port",
                            "type": "DefaultPortModel"
                        },
                        {
                            "name": "portsHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<CustomPortComponent>",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "DefaultPortModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "portsHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNewInstance",
                    "args": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "DefaultPortModel",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRecipe",
                    "args": [],
                    "optional": false,
                    "returnType": "ComponentFactory<CustomPortComponent>",
                    "typeParameters": [],
                    "line": 59
                },
                {
                    "name": "isConnected",
                    "args": [
                        {
                            "name": "port",
                            "type": "DefaultPortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 71,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "DefaultPortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        },
                        {
                            "name": "portHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<T>",
                    "typeParameters": [],
                    "line": 8,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "portHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractPortFactory"
                    }
                },
                {
                    "name": "getNewInstance",
                    "args": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractPortFactory"
                    }
                },
                {
                    "name": "getNewInstance",
                    "args": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFactory"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "AbstractPortFactory",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DefaultLabelFactory",
            "id": "class-DefaultLabelFactory-96e861f314d18a41443c25a77fa4c3e7",
            "file": "libs/ngx-diagrams/src/lib/defaults/factories/default-label.factory.ts",
            "type": "class",
            "sourceCode": "import {\n  ViewContainerRef,\n  ComponentRef,\n  ComponentFactoryResolver,\n  ComponentFactory,\n  Renderer2,\n} from '@angular/core';\nimport { AbstractLabelFactory } from '../../factories/label.factory';\nimport { DefaultLabelComponent } from '../components/default-label/default-label.component';\nimport { DefaultLabelModel } from '../models/default-label.model';\n\nexport class DefaultLabelFactory extends AbstractLabelFactory<\n  DefaultLabelModel\n> {\n  constructor(\n    protected resolver: ComponentFactoryResolver,\n    protected renderer: Renderer2\n  ) {\n    super('default');\n  }\n\n  generateWidget(\n    label: DefaultLabelComponent,\n    labelHost: ViewContainerRef\n  ): ComponentRef<DefaultLabelComponent> {\n    const componentRef = labelHost.createComponent(this.getRecipe());\n\n    // attach coordinates and default positional behaviour to the generated component host\n    const rootNode = componentRef.location.nativeElement;\n\n    // default style for link\n    this.renderer.setStyle(rootNode, 'position', 'absolute');\n\n    // data attributes\n    this.renderer.setAttribute(rootNode, 'data-labelid', label.id);\n\n    // on destroy make sure to destroy the componentRef\n    label.onEntityDestroy().subscribe(() => {\n      componentRef.destroy();\n    });\n\n    // assign all passed properties to node initialization.\n    Object.entries(label).forEach(([key, value]) => {\n      componentRef.instance[key] = value;\n    });\n\n    componentRef.instance.setPainted(true);\n    return componentRef;\n  }\n\n  getRecipe(): ComponentFactory<DefaultLabelComponent> {\n    return this.resolver.resolveComponentFactory(DefaultLabelComponent);\n  }\n\n  getNewInstance() {\n    return new DefaultLabelModel();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "AbstractLabelFactory"
                    }
                },
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "AbstractFactory"
                    }
                }
            ],
            "methods": [
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "name": "label",
                            "type": "DefaultLabelComponent"
                        },
                        {
                            "name": "labelHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<DefaultLabelComponent>",
                    "typeParameters": [],
                    "line": 22,
                    "jsdoctags": [
                        {
                            "name": "label",
                            "type": "DefaultLabelComponent",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "labelHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNewInstance",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 55
                },
                {
                    "name": "getRecipe",
                    "args": [],
                    "optional": false,
                    "returnType": "ComponentFactory<DefaultLabelComponent>",
                    "typeParameters": [],
                    "line": 51
                },
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "name": "label",
                            "type": "LabelModel"
                        },
                        {
                            "name": "labelsHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<T>",
                    "typeParameters": [],
                    "line": 8,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "label",
                            "type": "LabelModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "labelsHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractLabelFactory"
                    }
                },
                {
                    "name": "getNewInstance",
                    "args": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractLabelFactory"
                    }
                },
                {
                    "name": "getNewInstance",
                    "args": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFactory"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "AbstractLabelFactory",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DefaultLabelModel",
            "id": "class-DefaultLabelModel-b4750b0902464b7f474059201f599717",
            "file": "libs/ngx-diagrams/src/lib/defaults/models/default-label.model.ts",
            "type": "class",
            "sourceCode": "import { Observable } from 'rxjs';\nimport { LabelModel } from '../../models/label.model';\nimport { createValueState } from '../../state/state';\n\nexport class DefaultLabelModel extends LabelModel {\n  protected label$ = createValueState<string>('', this.entityPipe('label'));\n\n  constructor(label = 'NO LABEL', type = 'default', id?: string, logPrefix = '[DefaultLabel]') {\n    super(type, id, logPrefix);\n    this.setLabel(label);\n  }\n\n  setLabel(label: string) {\n    this.label$.set(label).emit();\n  }\n\n  getLabel(): string {\n    return this.label$.value;\n  }\n\n  selectLabel(): Observable<string> {\n    return this.label$.value$;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "label",
                        "type": "string",
                        "defaultValue": "'NO LABEL'"
                    },
                    {
                        "name": "type",
                        "type": "string",
                        "defaultValue": "'default'"
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "optional": true
                    },
                    {
                        "name": "logPrefix",
                        "type": "string",
                        "defaultValue": "'[DefaultLabel]'"
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "label",
                        "type": "string",
                        "defaultValue": "'NO LABEL'",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "type",
                        "type": "string",
                        "defaultValue": "'default'",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logPrefix",
                        "type": "string",
                        "defaultValue": "'[DefaultLabel]'",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "label$",
                    "defaultValue": "createValueState<string>('', this.entityPipe('label'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "coords$",
                    "defaultValue": "createValueState<Coords>({ x: 0, y: 0 }, this.entityPipe('coords'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "rotation$",
                    "defaultValue": "createValueState<number>(0, this.entityPipe('rotation'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "hovered$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('HoveredChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "painted$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('PaintedChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "parent$",
                    "defaultValue": "createValueState<E>(null, this.entityPipe('ParentsChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "selected$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('SelectedChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "destroyed$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "locked$",
                    "defaultValue": "createValueState(false, this.entityPipe('locked'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "destroyed$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "locked$",
                    "defaultValue": "createValueState(false, this.entityPipe('locked'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "hovered$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('HoveredChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "painted$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('PaintedChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parent$",
                    "defaultValue": "createValueState<E>(null, this.entityPipe('ParentsChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selected$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('SelectedChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "destroyed$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "locked$",
                    "defaultValue": "createValueState(false, this.entityPipe('locked'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "destroyed$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "locked$",
                    "defaultValue": "createValueState(false, this.entityPipe('locked'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 17
                },
                {
                    "name": "selectLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 21
                },
                {
                    "name": "setLabel",
                    "args": [
                        {
                            "name": "label",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "jsdoctags": [
                        {
                            "name": "label",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "getCoords",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "getRotation",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 25,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "selectCoords",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Coords>",
                    "typeParameters": [],
                    "line": 49,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "selectRotation",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 41,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "SerializedLabelModel",
                    "typeParameters": [],
                    "line": 16,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "setCoords",
                    "args": [
                        {
                            "name": "newCoords",
                            "type": "Partial<Coords>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "jsdoctags": [
                        {
                            "name": "newCoords",
                            "type": "Partial<Coords>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "setRotation",
                    "args": [
                        {
                            "name": "angle",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "jsdoctags": [
                        {
                            "name": "angle",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "getHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 46,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "getPainted",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 38,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "getParent",
                    "args": [],
                    "optional": false,
                    "returnType": "E",
                    "typeParameters": [],
                    "line": 26,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "getSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 66,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "getSelectedEntities",
                    "args": [],
                    "optional": false,
                    "returnType": "BaseModel[]",
                    "typeParameters": [],
                    "line": 82,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 62,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "paintChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<PaintedEvent>",
                    "typeParameters": [],
                    "line": 58,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "parentChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ParentChangeEvent<E>>",
                    "typeParameters": [],
                    "line": 34,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "selectHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 54,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "selectionChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SelectionEvent>",
                    "typeParameters": [],
                    "line": 78,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "selectSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 70,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "setHovered",
                    "args": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "setPainted",
                    "args": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "setParent",
                    "args": [
                        {
                            "name": "parent",
                            "type": "E"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "jsdoctags": [
                        {
                            "name": "parent",
                            "type": "E",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "setSelected",
                    "args": [
                        {
                            "name": "selected",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "jsdoctags": [
                        {
                            "name": "selected",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 50,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 84,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 94,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 77,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 50,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 84,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 94,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 77,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "getHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 46,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getPainted",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 38,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getParent",
                    "args": [],
                    "optional": false,
                    "returnType": "E",
                    "typeParameters": [],
                    "line": 26,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 66,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelectedEntities",
                    "args": [],
                    "optional": false,
                    "returnType": "BaseModel[]",
                    "typeParameters": [],
                    "line": 82,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 62,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "paintChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<PaintedEvent>",
                    "typeParameters": [],
                    "line": 58,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parentChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ParentChangeEvent<E>>",
                    "typeParameters": [],
                    "line": 34,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 54,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectionChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SelectionEvent>",
                    "typeParameters": [],
                    "line": 78,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 70,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setHovered",
                    "args": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setPainted",
                    "args": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setParent",
                    "args": [
                        {
                            "name": "parent",
                            "type": "E"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "jsdoctags": [
                        {
                            "name": "parent",
                            "type": "E",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setSelected",
                    "args": [
                        {
                            "name": "selected",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "jsdoctags": [
                        {
                            "name": "selected",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 50,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 84,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 94,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 77,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 50,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 84,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 94,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 77,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "LabelModel",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DefaultLinkFactory",
            "id": "class-DefaultLinkFactory-25e101736661c26463a9d88bb50091b2",
            "file": "libs/ngx-diagrams/src/lib/defaults/factories/default-link.factory.ts",
            "type": "class",
            "sourceCode": "import { AbstractLinkFactory } from '../../factories/link.factory';\nimport { DefaultLinkComponent } from '../components/default-link/default-link.component';\nimport { DefaultLinkModel } from '../models/default-link.model';\nimport {\n  ViewContainerRef,\n  ComponentRef,\n  ComponentFactoryResolver,\n  ComponentFactory,\n  Renderer2,\n} from '@angular/core';\nimport { DiagramEngine } from '../../services/engine.service';\n\nexport class DefaultLinkFactory extends AbstractLinkFactory<DefaultLinkModel> {\n  constructor(\n    protected resolver: ComponentFactoryResolver,\n    protected renderer: Renderer2\n  ) {\n    super('default');\n  }\n\n  generateWidget(\n    diagramEngine: DiagramEngine,\n    link: DefaultLinkModel,\n    linksHost: ViewContainerRef\n  ): ComponentRef<DefaultLinkComponent> {\n    const componentRef = linksHost.createComponent(this.getRecipe());\n\n    // attach coordinates and default positional behaviour to the generated component host\n    const rootNode = componentRef.location.nativeElement;\n\n    // default style for link\n    this.renderer.setStyle(rootNode, 'position', 'absolute');\n    this.renderer.addClass(rootNode, 'label');\n\n    // data attributes\n    this.renderer.setAttribute(rootNode, 'data-linkid', link.id);\n\n    // on destroy make sure to destroy the componentRef\n    link.onEntityDestroy().subscribe(() => {\n      componentRef.destroy();\n    });\n\n    // assign all passed properties to link initialization.\n    Object.entries(link).forEach(([key, value]) => {\n      componentRef.instance[key] = value;\n    });\n\n    componentRef.instance.diagramEngine = diagramEngine;\n    componentRef.instance.setPainted(true);\n    return componentRef;\n  }\n\n  getRecipe(): ComponentFactory<DefaultLinkComponent> {\n    return this.resolver.resolveComponentFactory(DefaultLinkComponent);\n  }\n\n  getNewInstance() {\n    return new DefaultLinkModel();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "AbstractLinkFactory"
                    }
                },
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "AbstractFactory"
                    }
                }
            ],
            "methods": [
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "name": "diagramEngine",
                            "type": "DiagramEngine"
                        },
                        {
                            "name": "link",
                            "type": "DefaultLinkModel"
                        },
                        {
                            "name": "linksHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<DefaultLinkComponent>",
                    "typeParameters": [],
                    "line": 21,
                    "jsdoctags": [
                        {
                            "name": "diagramEngine",
                            "type": "DiagramEngine",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "link",
                            "type": "DefaultLinkModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "linksHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNewInstance",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 57
                },
                {
                    "name": "getRecipe",
                    "args": [],
                    "optional": false,
                    "returnType": "ComponentFactory<DefaultLinkComponent>",
                    "typeParameters": [],
                    "line": 53
                },
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "name": "diagramEngine",
                            "type": "DiagramEngine"
                        },
                        {
                            "name": "link",
                            "type": "LinkModel"
                        },
                        {
                            "name": "linksHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<T>",
                    "typeParameters": [],
                    "line": 9,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "diagramEngine",
                            "type": "DiagramEngine",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "link",
                            "type": "LinkModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "linksHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractLinkFactory"
                    }
                },
                {
                    "name": "getNewInstance",
                    "args": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractLinkFactory"
                    }
                },
                {
                    "name": "getNewInstance",
                    "args": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFactory"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "AbstractLinkFactory",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DefaultLinkModel",
            "id": "class-DefaultLinkModel-7ffded3d7d7bfe8e15ac676897b5c8d8",
            "file": "libs/ngx-diagrams/src/lib/defaults/models/default-link.model.ts",
            "type": "class",
            "sourceCode": "import { Observable } from 'rxjs';\nimport { LinkModel } from '../../models/link.model';\nimport { createValueState } from '../../state/state';\n\nexport class DefaultLinkModel extends LinkModel {\n  width$ = createValueState<number>(3, this.entityPipe('width'));\n  color$ = createValueState<string>('rgba(255, 255, 255, 0.5)', this.entityPipe('color'));\n  curvyness$ = createValueState<number>(50, this.entityPipe('curvyness'));\n\n  constructor({\n    type = 'default',\n    id,\n    logPrefix = '[DefaultLink]'\n  }: { type?: string; id?: string; logPrefix?: string } = {}) {\n    super(type, id, logPrefix);\n  }\n\n  setWidth(width: number) {\n    this.width$.set(width).emit();\n  }\n\n  setColor(color: string) {\n    this.color$.set(color).emit();\n  }\n\n  selectWidth(): Observable<number> {\n    return this.width$.value$;\n  }\n\n  selectColor(): Observable<string> {\n    return this.color$.value$;\n  }\n\n  setCurvyness(curvyness: number) {\n    this.curvyness$.set(curvyness).emit();\n  }\n\n  get color() {\n    return this.color$.value;\n  }\n\n  get width() {\n    return this.width$.value;\n  }\n\n  get curvyness() {\n    return this.curvyness$.value;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "type": "literal type",
                        "defaultValue": "{}"
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "type": "literal type",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "color$",
                    "defaultValue": "createValueState<string>('rgba(255, 255, 255, 0.5)', this.entityPipe('color'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "curvyness$",
                    "defaultValue": "createValueState<number>(50, this.entityPipe('curvyness'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "width$",
                    "defaultValue": "createValueState<number>(3, this.entityPipe('width'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "diagramEngine",
                    "type": "DiagramEngine",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "extras",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "label$",
                    "defaultValue": "createValueState<LabelModel>(null, this.entityPipe('label'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "points",
                    "type": "PointModel[]",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "sourcePort",
                    "type": "PortModel | null",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "targetPort",
                    "type": "PortModel | null",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "hovered$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('HoveredChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "painted$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('PaintedChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "parent$",
                    "defaultValue": "createValueState<E>(null, this.entityPipe('ParentsChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "selected$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('SelectedChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "destroyed$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "locked$",
                    "defaultValue": "createValueState(false, this.entityPipe('locked'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "destroyed$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "locked$",
                    "defaultValue": "createValueState(false, this.entityPipe('locked'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "hovered$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('HoveredChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "painted$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('PaintedChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parent$",
                    "defaultValue": "createValueState<E>(null, this.entityPipe('ParentsChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selected$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('SelectedChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "destroyed$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "locked$",
                    "defaultValue": "createValueState(false, this.entityPipe('locked'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "destroyed$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "locked$",
                    "defaultValue": "createValueState(false, this.entityPipe('locked'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "methods": [
                {
                    "name": "selectColor",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 30
                },
                {
                    "name": "selectWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "setColor",
                    "args": [
                        {
                            "name": "color",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setCurvyness",
                    "args": [
                        {
                            "name": "curvyness",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "jsdoctags": [
                        {
                            "name": "curvyness",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setWidth",
                    "args": [
                        {
                            "name": "width",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "jsdoctags": [
                        {
                            "name": "width",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addPoint",
                    "args": [
                        {
                            "name": "pointModel",
                            "type": "P"
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "defaultValue": "1"
                        }
                    ],
                    "optional": false,
                    "returnType": "P",
                    "typeParameters": [
                        "P"
                    ],
                    "line": 222,
                    "jsdoctags": [
                        {
                            "name": "pointModel",
                            "type": "P",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "defaultValue": "1",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "object",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "object",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "generatePoint",
                    "args": [
                        {
                            "type": "Coords"
                        }
                    ],
                    "optional": false,
                    "returnType": "PointModel",
                    "typeParameters": [],
                    "line": 229,
                    "jsdoctags": [
                        {
                            "type": "Coords",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getExtras",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 55,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getFirstPoint",
                    "args": [],
                    "optional": false,
                    "returnType": "PointModel",
                    "typeParameters": [],
                    "line": 129,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "LabelModel",
                    "typeParameters": [],
                    "line": 189,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getLastPoint",
                    "args": [],
                    "optional": false,
                    "returnType": "PointModel",
                    "typeParameters": [],
                    "line": 133,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getName",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 51,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getPointForPort",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "PointModel",
                    "typeParameters": [],
                    "line": 117,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getPointIndex",
                    "args": [
                        {
                            "name": "point",
                            "type": "PointModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 94,
                    "jsdoctags": [
                        {
                            "name": "point",
                            "type": "PointModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getPointModel",
                    "args": [
                        {
                            "name": "id",
                            "type": "ID"
                        }
                    ],
                    "optional": false,
                    "returnType": "PointModel | null",
                    "typeParameters": [],
                    "line": 98,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "ID",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getPoints",
                    "args": [],
                    "optional": false,
                    "returnType": "PointModel[]",
                    "typeParameters": [],
                    "line": 169,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getPortForPoint",
                    "args": [
                        {
                            "name": "point",
                            "type": "PointModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "PortModel",
                    "typeParameters": [],
                    "line": 107,
                    "jsdoctags": [
                        {
                            "name": "point",
                            "type": "PointModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getSourcePort",
                    "args": [],
                    "optional": false,
                    "returnType": "PortModel",
                    "typeParameters": [],
                    "line": 147,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getTargetPort",
                    "args": [],
                    "optional": false,
                    "returnType": "PortModel",
                    "typeParameters": [],
                    "line": 151,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "isLastPoint",
                    "args": [
                        {
                            "name": "point",
                            "type": "PointModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 89,
                    "jsdoctags": [
                        {
                            "name": "point",
                            "type": "PointModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "point",
                    "args": [
                        {
                            "type": "Coords"
                        }
                    ],
                    "optional": false,
                    "returnType": "PointModel",
                    "typeParameters": [],
                    "line": 165,
                    "jsdoctags": [
                        {
                            "type": "Coords",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "removeMiddlePoints",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 216,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "removePoint",
                    "args": [
                        {
                            "name": "pointModel",
                            "type": "PointModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 204,
                    "jsdoctags": [
                        {
                            "name": "pointModel",
                            "type": "PointModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "removePointsAfter",
                    "args": [
                        {
                            "name": "pointModel",
                            "type": "PointModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 212,
                    "jsdoctags": [
                        {
                            "name": "pointModel",
                            "type": "PointModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "removePointsBefore",
                    "args": [
                        {
                            "name": "pointModel",
                            "type": "PointModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 208,
                    "jsdoctags": [
                        {
                            "name": "pointModel",
                            "type": "PointModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "resetLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 193,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "selectLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LabelModel | null>",
                    "typeParameters": [],
                    "line": 185,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "SerializedLinkModel",
                    "typeParameters": [],
                    "line": 33,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "setExtras",
                    "args": [
                        {
                            "name": "extras",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "extras",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "setLabel",
                    "args": [
                        {
                            "name": "label",
                            "type": "LabelModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 180,
                    "jsdoctags": [
                        {
                            "name": "label",
                            "type": "LabelModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 233,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "setName",
                    "args": [
                        {
                            "name": "name",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "setPoints",
                    "args": [
                        {
                            "name": "points",
                            "type": "PointModel[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "jsdoctags": [
                        {
                            "name": "points",
                            "type": "PointModel[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "setSourcePort",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "setTargetPort",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 46,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getPainted",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 38,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getParent",
                    "args": [],
                    "optional": false,
                    "returnType": "E",
                    "typeParameters": [],
                    "line": 26,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 66,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getSelectedEntities",
                    "args": [],
                    "optional": false,
                    "returnType": "BaseModel[]",
                    "typeParameters": [],
                    "line": 82,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 62,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "paintChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<PaintedEvent>",
                    "typeParameters": [],
                    "line": 58,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "parentChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ParentChangeEvent<E>>",
                    "typeParameters": [],
                    "line": 34,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "selectHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 54,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "selectionChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SelectionEvent>",
                    "typeParameters": [],
                    "line": 78,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "selectSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 70,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "setHovered",
                    "args": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "setPainted",
                    "args": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "setParent",
                    "args": [
                        {
                            "name": "parent",
                            "type": "E"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "jsdoctags": [
                        {
                            "name": "parent",
                            "type": "E",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "setSelected",
                    "args": [
                        {
                            "name": "selected",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "jsdoctags": [
                        {
                            "name": "selected",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 50,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 84,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 94,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 77,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 50,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 84,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 94,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 77,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 46,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getPainted",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 38,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getParent",
                    "args": [],
                    "optional": false,
                    "returnType": "E",
                    "typeParameters": [],
                    "line": 26,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 66,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelectedEntities",
                    "args": [],
                    "optional": false,
                    "returnType": "BaseModel[]",
                    "typeParameters": [],
                    "line": 82,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 62,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "paintChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<PaintedEvent>",
                    "typeParameters": [],
                    "line": 58,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parentChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ParentChangeEvent<E>>",
                    "typeParameters": [],
                    "line": 34,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 54,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectionChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SelectionEvent>",
                    "typeParameters": [],
                    "line": 78,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 70,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setHovered",
                    "args": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setPainted",
                    "args": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setParent",
                    "args": [
                        {
                            "name": "parent",
                            "type": "E"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "jsdoctags": [
                        {
                            "name": "parent",
                            "type": "E",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setSelected",
                    "args": [
                        {
                            "name": "selected",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "jsdoctags": [
                        {
                            "name": "selected",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 50,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 84,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 94,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 77,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 50,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 84,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 94,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 77,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "LinkModel",
            "accessors": {
                "color": {
                    "name": "color",
                    "getSignature": {
                        "name": "color",
                        "type": "",
                        "returnType": "",
                        "line": 38
                    }
                },
                "width": {
                    "name": "width",
                    "getSignature": {
                        "name": "width",
                        "type": "",
                        "returnType": "",
                        "line": 42
                    }
                },
                "curvyness": {
                    "name": "curvyness",
                    "getSignature": {
                        "name": "curvyness",
                        "type": "",
                        "returnType": "",
                        "line": 46
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DefaultNodeFactory",
            "id": "class-DefaultNodeFactory-d41a8b81ce358e9e1614c08a58778217",
            "file": "libs/ngx-diagrams/src/lib/defaults/factories/default-node.factory.ts",
            "type": "class",
            "sourceCode": "import { DefaultNodeComponent } from '../components/default-node/default-node.component';\nimport { AbstractNodeFactory } from '../../factories/node.factory';\nimport {\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  ComponentRef,\n  ComponentFactory,\n  Renderer2,\n} from '@angular/core';\nimport { DiagramEngine } from '../../services/engine.service';\nimport { DefaultNodeModel } from '../models/default-node.model';\n\nexport class DefaultNodeFactory extends AbstractNodeFactory<DefaultNodeModel> {\n  constructor(\n    protected resolver: ComponentFactoryResolver,\n    protected renderer: Renderer2\n  ) {\n    super('default');\n  }\n\n  generateWidget(\n    diagramEngine: DiagramEngine,\n    node: DefaultNodeModel,\n    nodesHost: ViewContainerRef\n  ): ComponentRef<DefaultNodeComponent> {\n    const componentRef = nodesHost.createComponent(this.getRecipe());\n\n    // attach coordinates and default positional behaviour to the generated component host\n    const rootNode = componentRef.location.nativeElement;\n\n    // default style for node\n    this.renderer.setStyle(rootNode, 'position', 'absolute');\n    this.renderer.setStyle(rootNode, 'display', 'block');\n\n    // data attributes\n    this.renderer.setAttribute(rootNode, 'data-nodeid', node.id);\n\n    // subscribe to node coordinates\n    node.selectCoords().subscribe(({ x, y }) => {\n      this.renderer.setStyle(rootNode, 'left', `${x}px`);\n      this.renderer.setStyle(rootNode, 'top', `${y}px`);\n    });\n\n    node.selectionChanges().subscribe((e) => {\n      e.isSelected\n        ? this.renderer.addClass(rootNode, 'selected')\n        : this.renderer.removeClass(rootNode, 'selected');\n    });\n\n    node.onEntityDestroy().subscribe(() => {\n      componentRef.destroy();\n    });\n\n    // assign all passed properties to node initialization.\n    Object.entries(node).forEach(([key, value]) => {\n      componentRef.instance[key] = value;\n    });\n\n    componentRef.instance.setDiagramEngine(diagramEngine);\n    componentRef.instance.setPainted(true);\n\n    return componentRef;\n  }\n\n  getRecipe(): ComponentFactory<DefaultNodeComponent> {\n    return this.resolver.resolveComponentFactory(DefaultNodeComponent);\n  }\n\n  getNewInstance(initialConfig?: any): DefaultNodeModel {\n    return new DefaultNodeModel(initialConfig);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "AbstractNodeFactory"
                    }
                },
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "AbstractFactory"
                    }
                }
            ],
            "methods": [
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "name": "diagramEngine",
                            "type": "DiagramEngine"
                        },
                        {
                            "name": "node",
                            "type": "DefaultNodeModel"
                        },
                        {
                            "name": "nodesHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<DefaultNodeComponent>",
                    "typeParameters": [],
                    "line": 21,
                    "jsdoctags": [
                        {
                            "name": "diagramEngine",
                            "type": "DiagramEngine",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "node",
                            "type": "DefaultNodeModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nodesHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNewInstance",
                    "args": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "DefaultNodeModel",
                    "typeParameters": [],
                    "line": 69,
                    "jsdoctags": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRecipe",
                    "args": [],
                    "optional": false,
                    "returnType": "ComponentFactory<DefaultNodeComponent>",
                    "typeParameters": [],
                    "line": 65
                },
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "name": "diagramEngine",
                            "type": "DiagramEngine"
                        },
                        {
                            "name": "node",
                            "type": "NodeModel"
                        },
                        {
                            "name": "nodeHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<T>",
                    "typeParameters": [],
                    "line": 9,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "diagramEngine",
                            "type": "DiagramEngine",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "node",
                            "type": "NodeModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nodeHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractNodeFactory"
                    }
                },
                {
                    "name": "getNewInstance",
                    "args": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractNodeFactory"
                    }
                },
                {
                    "name": "getNewInstance",
                    "args": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFactory"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "AbstractNodeFactory",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DefaultNodeModel",
            "id": "class-DefaultNodeModel-4cac2955fdeb1c426fec196574293fdf",
            "file": "libs/ngx-diagrams/src/lib/defaults/models/default-node.model.ts",
            "type": "class",
            "sourceCode": "import { Observable } from 'rxjs';\nimport { NodeModel } from '../../models/node.model';\nimport { DefaultPortModel } from './default-port.model';\n\nexport class DefaultNodeModel extends NodeModel {\n  name: string;\n  color: string;\n  height$: Observable<number>;\n  width$: Observable<number>;\n\n  constructor({\n    name = 'Untitled',\n    type = 'default',\n    color = 'rgb(0, 192, 255)',\n    id\n  }: {\n    name?: string;\n    type?: string;\n    id?: string;\n    color?: string;\n  } = {}) {\n    super(type, id);\n    this.name = name;\n    this.color = color;\n    this.height$ = this.selectHeight();\n    this.width$ = this.selectWidth();\n  }\n\n  addInPort({\n    name,\n    type = 'default',\n    id,\n    linkType = 'default'\n  }: {\n    name: string;\n    type?: string;\n    id?: string;\n    linkType?: string;\n  }) {\n    const port = new DefaultPortModel({\n      isInput: true,\n      name,\n      type,\n      id,\n      label: null,\n      linkType\n    });\n    this.addPort(port);\n    return port;\n  }\n\n  addOutPort({\n    name,\n    type = 'default',\n    id,\n    linkType = 'default',\n    maximumLinks = null\n  }: {\n    name: string;\n    type?: string;\n    id?: string;\n    linkType?: string;\n    maximumLinks?: number;\n  }) {\n    const port = new DefaultPortModel({\n      isInput: false,\n      name,\n      type,\n      id,\n      label: null,\n      linkType,\n      maximumLinks\n    });\n    this.addPort(port);\n    return port;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "type": "literal type",
                        "defaultValue": "{}"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "type": "literal type",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "color",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "height$",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "width$",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "coords$",
                    "defaultValue": "createValueState<Coords>({ x: 0, y: 0 }, this.entityPipe('coords'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "diagramEngine$",
                    "defaultValue": "createValueState<DiagramEngine>(null, this.entityPipe('diagramEngine'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "dimensions$",
                    "defaultValue": "createValueState<Dimensions>({ width: 0, height: 0 }, this.entityPipe('dimensions'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "extras$",
                    "defaultValue": "createValueState<any>({}, this.entityPipe('extras'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "ports$",
                    "defaultValue": "createEntityState<P>([], this.entityPipe('ports'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "hovered$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('HoveredChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "painted$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('PaintedChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "parent$",
                    "defaultValue": "createValueState<E>(null, this.entityPipe('ParentsChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "selected$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('SelectedChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "destroyed$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "locked$",
                    "defaultValue": "createValueState(false, this.entityPipe('locked'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "destroyed$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "locked$",
                    "defaultValue": "createValueState(false, this.entityPipe('locked'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "hovered$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('HoveredChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "painted$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('PaintedChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parent$",
                    "defaultValue": "createValueState<E>(null, this.entityPipe('ParentsChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selected$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('SelectedChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "destroyed$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "locked$",
                    "defaultValue": "createValueState(false, this.entityPipe('locked'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "destroyed$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "locked$",
                    "defaultValue": "createValueState(false, this.entityPipe('locked'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "methods": [
                {
                    "name": "addInPort",
                    "args": [
                        {
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29,
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addOutPort",
                    "args": [
                        {
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 52,
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addPort",
                    "args": [
                        {
                            "name": "port",
                            "type": "P"
                        }
                    ],
                    "optional": false,
                    "returnType": "P",
                    "typeParameters": [],
                    "line": 117,
                    "description": "<p>Assign a port to the node and set the node as its getParent</p>\n",
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "P",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 3515,
                                "end": 3522,
                                "flags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>the inserted port</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "coordsChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Coords>",
                    "typeParameters": [],
                    "line": 97,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 196,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "dimensionChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Dimensions>",
                    "typeParameters": [],
                    "line": 156,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getCoords",
                    "args": [],
                    "optional": false,
                    "returnType": "Coords",
                    "typeParameters": [],
                    "line": 48,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getDiagramEngine",
                    "args": [],
                    "optional": false,
                    "returnType": "DiagramEngine",
                    "typeParameters": [],
                    "line": 36,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getDimensions",
                    "args": [],
                    "optional": false,
                    "returnType": "Dimensions",
                    "typeParameters": [],
                    "line": 151,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getExtras",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 188,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getHeight",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 160,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getPort",
                    "args": [
                        {
                            "name": "id",
                            "type": "ID"
                        }
                    ],
                    "optional": false,
                    "returnType": "P",
                    "typeParameters": [],
                    "line": 129,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "ID",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getPorts",
                    "args": [],
                    "optional": false,
                    "returnType": "EntityMap<P>",
                    "typeParameters": [],
                    "line": 139,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getPortsArray",
                    "args": [],
                    "optional": false,
                    "returnType": "P[]",
                    "typeParameters": [],
                    "line": 143,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getSelectedEntities",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 81,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 168,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "removeAllPorts",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 201,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "removePort",
                    "args": [
                        {
                            "name": "portOrId",
                            "type": "ID | P"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 123,
                    "jsdoctags": [
                        {
                            "name": "portOrId",
                            "type": "ID | P",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "selectCoords",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Coords>",
                    "typeParameters": [],
                    "line": 101,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "selectDiagramEngine",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<DiagramEngine>",
                    "typeParameters": [],
                    "line": 40,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "selectExtras",
                    "args": [
                        {
                            "name": "selector",
                            "type": "function",
                            "optional": true,
                            "function": [
                                {
                                    "name": "extra",
                                    "type": "E"
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<E>",
                    "typeParameters": [
                        "E"
                    ],
                    "line": 192,
                    "jsdoctags": [
                        {
                            "name": "selector",
                            "type": "function",
                            "optional": true,
                            "function": [
                                {
                                    "name": "extra",
                                    "type": "E"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "selectHeight",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 180,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "selectPorts",
                    "args": [
                        {
                            "name": "selector",
                            "type": "function",
                            "optional": true,
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<P[]>",
                    "typeParameters": [],
                    "line": 133,
                    "jsdoctags": [
                        {
                            "name": "selector",
                            "type": "function",
                            "optional": true,
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "selectWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 176,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "selectX",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 105,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "selectY",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 109,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "SerializedNodeModel",
                    "typeParameters": [],
                    "line": 66,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "setCoords",
                    "args": [
                        {
                            "type": "Coords"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "jsdoctags": [
                        {
                            "type": "Coords",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "setDiagramEngine",
                    "args": [
                        {
                            "name": "diagramEngine",
                            "type": "DiagramEngine"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "jsdoctags": [
                        {
                            "name": "diagramEngine",
                            "type": "DiagramEngine",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "setDimensions",
                    "args": [
                        {
                            "name": "dimensions",
                            "type": "Partial<Dimensions>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "jsdoctags": [
                        {
                            "name": "dimensions",
                            "type": "Partial<Dimensions>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "setExtras",
                    "args": [
                        {
                            "name": "extras",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 184,
                    "jsdoctags": [
                        {
                            "name": "extras",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "setHeight",
                    "args": [
                        {
                            "name": "height",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 164,
                    "jsdoctags": [
                        {
                            "name": "height",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "setWidth",
                    "args": [
                        {
                            "name": "width",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 172,
                    "jsdoctags": [
                        {
                            "name": "width",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 46,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getPainted",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 38,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getParent",
                    "args": [],
                    "optional": false,
                    "returnType": "E",
                    "typeParameters": [],
                    "line": 26,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 66,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getSelectedEntities",
                    "args": [],
                    "optional": false,
                    "returnType": "BaseModel[]",
                    "typeParameters": [],
                    "line": 82,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 62,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "paintChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<PaintedEvent>",
                    "typeParameters": [],
                    "line": 58,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "parentChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ParentChangeEvent<E>>",
                    "typeParameters": [],
                    "line": 34,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "selectHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 54,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "selectionChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SelectionEvent>",
                    "typeParameters": [],
                    "line": 78,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "selectSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 70,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "setHovered",
                    "args": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "setPainted",
                    "args": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "setParent",
                    "args": [
                        {
                            "name": "parent",
                            "type": "E"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "jsdoctags": [
                        {
                            "name": "parent",
                            "type": "E",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "setSelected",
                    "args": [
                        {
                            "name": "selected",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "jsdoctags": [
                        {
                            "name": "selected",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 50,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 84,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 94,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 77,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 50,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 84,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 94,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 77,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 46,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getPainted",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 38,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getParent",
                    "args": [],
                    "optional": false,
                    "returnType": "E",
                    "typeParameters": [],
                    "line": 26,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 66,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelectedEntities",
                    "args": [],
                    "optional": false,
                    "returnType": "BaseModel[]",
                    "typeParameters": [],
                    "line": 82,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 62,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "paintChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<PaintedEvent>",
                    "typeParameters": [],
                    "line": 58,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parentChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ParentChangeEvent<E>>",
                    "typeParameters": [],
                    "line": 34,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 54,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectionChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SelectionEvent>",
                    "typeParameters": [],
                    "line": 78,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 70,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setHovered",
                    "args": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setPainted",
                    "args": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setParent",
                    "args": [
                        {
                            "name": "parent",
                            "type": "E"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "jsdoctags": [
                        {
                            "name": "parent",
                            "type": "E",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setSelected",
                    "args": [
                        {
                            "name": "selected",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "jsdoctags": [
                        {
                            "name": "selected",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 50,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 84,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 94,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 77,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 50,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 84,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 94,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 77,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "NodeModel",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DefaultPortFactory",
            "id": "class-DefaultPortFactory-178203c0dc04cd80bc9099c5a38728db",
            "file": "libs/ngx-diagrams/src/lib/defaults/factories/default-port.factory.ts",
            "type": "class",
            "sourceCode": "import { AbstractPortFactory } from '../../factories/port.factory';\nimport { DefaultPortModel } from '../models/default-port.model';\nimport {\n  ViewContainerRef,\n  ComponentRef,\n  ComponentFactory,\n  ComponentFactoryResolver,\n  Renderer2,\n} from '@angular/core';\nimport { DefaultPortComponent } from '../components/default-port/default-port.component';\n\nexport class DefaultPortFactory extends AbstractPortFactory<DefaultPortModel> {\n  constructor(\n    protected resolver: ComponentFactoryResolver,\n    protected renderer: Renderer2\n  ) {\n    super('default');\n  }\n\n  generateWidget(\n    port: DefaultPortModel,\n    portsHost: ViewContainerRef\n  ): ComponentRef<DefaultPortComponent> {\n    const componentRef = portsHost.createComponent(this.getRecipe());\n\n    // attach coordinates and default positional behaviour to the generated component host\n    const rootNode = componentRef.location.nativeElement as HTMLElement;\n\n    // data attributes\n    this.renderer.setAttribute(rootNode, 'data-portid', port.id);\n    this.renderer.setAttribute(rootNode, 'data-name', port.getName());\n\n    port.in\n      ? this.renderer.addClass(rootNode, 'in')\n      : this.renderer.addClass(rootNode, 'out');\n\n    // assign all passed properties to node initialization.\n    Object.entries(port).forEach(([key, value]) => {\n      componentRef.instance[key] = value;\n    });\n\n    port.onEntityDestroy().subscribe(() => {\n      componentRef.destroy();\n    });\n\n    componentRef.instance.setPainted(true);\n    return componentRef;\n  }\n\n  getRecipe(): ComponentFactory<DefaultPortComponent> {\n    return this.resolver.resolveComponentFactory(DefaultPortComponent);\n  }\n\n  getNewInstance(initialConfig?: any): DefaultPortModel {\n    return new DefaultPortModel({\n      isInput: true,\n      name: 'unknown',\n      ...initialConfig,\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "AbstractPortFactory"
                    }
                },
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "AbstractFactory"
                    }
                }
            ],
            "methods": [
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "name": "port",
                            "type": "DefaultPortModel"
                        },
                        {
                            "name": "portsHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<DefaultPortComponent>",
                    "typeParameters": [],
                    "line": 20,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "DefaultPortModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "portsHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNewInstance",
                    "args": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "DefaultPortModel",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRecipe",
                    "args": [],
                    "optional": false,
                    "returnType": "ComponentFactory<DefaultPortComponent>",
                    "typeParameters": [],
                    "line": 50
                },
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        },
                        {
                            "name": "portHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<T>",
                    "typeParameters": [],
                    "line": 8,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "portHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractPortFactory"
                    }
                },
                {
                    "name": "getNewInstance",
                    "args": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractPortFactory"
                    }
                },
                {
                    "name": "getNewInstance",
                    "args": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFactory"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "AbstractPortFactory",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DefaultPortModel",
            "id": "class-DefaultPortModel-b5cb8b1a9da9dbe7b1256d26c00bcd6d",
            "file": "libs/ngx-diagrams/src/lib/defaults/models/default-port.model.ts",
            "type": "class",
            "sourceCode": "import { LinkModel } from '../../models/link.model';\nimport { PortModel } from '../../models/port.model';\nimport { HashMap } from '../../utils/types';\nimport { DefaultLinkModel } from './default-link.model';\n\nexport interface DefaultPortModelConfig {\n  id?: string;\n  isInput?: boolean;\n  name?: string;\n  type?: string;\n  label?: string;\n  linkType?: string;\n  maximumLinks?: number;\n}\n\nexport class DefaultPortModel extends PortModel {\n  in: boolean;\n  label: string;\n  links: HashMap<any>;\n\n  constructor({\n    isInput = true,\n    name = 'port',\n    type = 'default',\n    id = null,\n    label = null,\n    linkType = 'default',\n    maximumLinks = null\n  }: DefaultPortModelConfig = {}) {\n    super(name, type, id, null, linkType);\n    this.in = isInput;\n    this.label = label || name;\n\n    if (this.in) {\n      this.setCanCreateLinks(false);\n    } else {\n      this.setMaximumLinks(maximumLinks);\n      this.setMagnetic(false);\n    }\n  }\n\n  link(port: PortModel): LinkModel {\n    if (super.getCanCreateLinks()) {\n      const link = new DefaultLinkModel({ type: this.getLinkType() });\n      link.setSourcePort(this);\n      link.setTargetPort(port);\n      return link;\n    }\n\n    return null;\n  }\n\n  createLinkModel() {\n    if (super.getCanCreateLinks()) {\n      return new DefaultLinkModel({ type: this.getLinkType() });\n    }\n  }\n\n  canLinkToPort(port: PortModel): boolean {\n    if (port instanceof DefaultPortModel) {\n      return this.in !== port.in;\n    }\n    return true;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "type": "DefaultPortModelConfig",
                        "defaultValue": "{}"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "type": "DefaultPortModelConfig",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "in",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "links",
                    "type": "HashMap<any>",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "canCreateLinks$",
                    "defaultValue": "createValueState(true, this.entityPipe('magnetic'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "height$",
                    "defaultValue": "createValueState(0, this.entityPipe('y'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "links$",
                    "defaultValue": "createEntityState<LinkModel>([], this.entityPipe('links'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "linkType",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "magnetic$",
                    "defaultValue": "createValueState(true, this.entityPipe('magnetic'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "maximumLinks",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "width$",
                    "defaultValue": "createValueState(0, this.entityPipe('y'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "x$",
                    "defaultValue": "createValueState(0, this.entityPipe('x'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "y$",
                    "defaultValue": "createValueState(0, this.entityPipe('y'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "hovered$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('HoveredChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "painted$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('PaintedChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "parent$",
                    "defaultValue": "createValueState<E>(null, this.entityPipe('ParentsChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "selected$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('SelectedChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "destroyed$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "locked$",
                    "defaultValue": "createValueState(false, this.entityPipe('locked'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "destroyed$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "locked$",
                    "defaultValue": "createValueState(false, this.entityPipe('locked'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "hovered$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('HoveredChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "painted$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('PaintedChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parent$",
                    "defaultValue": "createValueState<E>(null, this.entityPipe('ParentsChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selected$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('SelectedChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "destroyed$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "locked$",
                    "defaultValue": "createValueState(false, this.entityPipe('locked'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "destroyed$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "locked$",
                    "defaultValue": "createValueState(false, this.entityPipe('locked'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "methods": [
                {
                    "name": "canLinkToPort",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createLinkModel",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 53
                },
                {
                    "name": "link",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "LinkModel",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addLink",
                    "args": [
                        {
                            "name": "link",
                            "type": "LinkModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "LinkModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "canLinkToPort",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 163,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "createLinkModel",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 171,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 177,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getCanCreateLinks",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 61,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getCoords",
                    "args": [],
                    "optional": false,
                    "returnType": "{ x: any; y: any; }",
                    "typeParameters": [],
                    "line": 71,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getHeight",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 111,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getLinks",
                    "args": [],
                    "optional": false,
                    "returnType": "EntityMap<LinkModel>",
                    "typeParameters": [],
                    "line": 144,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getLinksArray",
                    "args": [],
                    "optional": false,
                    "returnType": "LinkModel[]",
                    "typeParameters": [],
                    "line": 148,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getLinkType",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 127,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getMagnetic",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 83,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getMaximumLinks",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 119,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getName",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 57,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getNode",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 53,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 115,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getX",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 107,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getY",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 103,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "isLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 167,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "removeLink",
                    "args": [
                        {
                            "name": "linkOrId",
                            "type": "ID | LinkModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "jsdoctags": [
                        {
                            "name": "linkOrId",
                            "type": "ID | LinkModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "selectCanCreateLinks",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 75,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "selectLinks",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<EntityMap<LinkModel>>",
                    "typeParameters": [],
                    "line": 152,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "selectMagnetic",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 87,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "selectX",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 95,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "selectY",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 99,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "setCanCreateLinks",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "setLinkType",
                    "args": [
                        {
                            "name": "type",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "setMagnetic",
                    "args": [
                        {
                            "name": "magnetic",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "jsdoctags": [
                        {
                            "name": "magnetic",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "setMaximumLinks",
                    "args": [
                        {
                            "name": "maximumLinks",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "jsdoctags": [
                        {
                            "name": "maximumLinks",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "updateCoords",
                    "args": [
                        {
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 156,
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 46,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getPainted",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 38,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getParent",
                    "args": [],
                    "optional": false,
                    "returnType": "E",
                    "typeParameters": [],
                    "line": 26,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 66,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getSelectedEntities",
                    "args": [],
                    "optional": false,
                    "returnType": "BaseModel[]",
                    "typeParameters": [],
                    "line": 82,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 62,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "paintChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<PaintedEvent>",
                    "typeParameters": [],
                    "line": 58,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "parentChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ParentChangeEvent<E>>",
                    "typeParameters": [],
                    "line": 34,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "selectHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 54,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "selectionChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SelectionEvent>",
                    "typeParameters": [],
                    "line": 78,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "selectSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 70,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "setHovered",
                    "args": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "setPainted",
                    "args": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "setParent",
                    "args": [
                        {
                            "name": "parent",
                            "type": "E"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "jsdoctags": [
                        {
                            "name": "parent",
                            "type": "E",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "setSelected",
                    "args": [
                        {
                            "name": "selected",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "jsdoctags": [
                        {
                            "name": "selected",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 50,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 84,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 94,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 77,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 50,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 84,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 94,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 77,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 46,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getPainted",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 38,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getParent",
                    "args": [],
                    "optional": false,
                    "returnType": "E",
                    "typeParameters": [],
                    "line": 26,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 66,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelectedEntities",
                    "args": [],
                    "optional": false,
                    "returnType": "BaseModel[]",
                    "typeParameters": [],
                    "line": 82,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 62,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "paintChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<PaintedEvent>",
                    "typeParameters": [],
                    "line": 58,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parentChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ParentChangeEvent<E>>",
                    "typeParameters": [],
                    "line": 34,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 54,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectionChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SelectionEvent>",
                    "typeParameters": [],
                    "line": 78,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 70,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setHovered",
                    "args": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setPainted",
                    "args": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setParent",
                    "args": [
                        {
                            "name": "parent",
                            "type": "E"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "jsdoctags": [
                        {
                            "name": "parent",
                            "type": "E",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setSelected",
                    "args": [
                        {
                            "name": "selected",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "jsdoctags": [
                        {
                            "name": "selected",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 50,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 84,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 94,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 77,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 50,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 84,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 94,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 77,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "PortModel",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DiagramModel",
            "id": "class-DiagramModel-99c958a9cfdb6d67579e23524b60ae39",
            "file": "libs/ngx-diagrams/src/lib/models/diagram.model.ts",
            "type": "class",
            "sourceCode": "import { Observable } from 'rxjs';\nimport { BaseEntity, BaseEntityType } from '../base.entity';\nimport { Coords } from '../interfaces/coords.interface';\nimport { SelectOptions } from '../interfaces/select-options.interface';\nimport { SerializedDiagramModel } from '../interfaces/serialization.interface';\nimport { DiagramEngine } from '../services/engine.service';\nimport { createEntityState, createValueState } from '../state/state';\nimport { coerceArray, ID, isEmptyArray, unique } from '../utils';\nimport { EntityMap } from '../utils/types';\nimport { BaseModel } from './base.model';\nimport { LinkModel } from './link.model';\nimport { NodeModel } from './node.model';\nimport { PortModel } from './port.model';\n\nexport class DiagramModel extends BaseEntity {\n  protected nodes$ = createEntityState<NodeModel>([], this.entityPipe('nodes'));\n  protected links$ = createEntityState<LinkModel>([], this.entityPipe('links'));\n  protected offsetX$ = createValueState(0, this.entityPipe('offsetX'));\n  protected offsetY$ = createValueState(0, this.entityPipe('offsetY'));\n  protected zoom$ = createValueState(100, this.entityPipe('zoom'));\n  protected maxZoomOut$ = createValueState(null);\n  protected maxZoomIn$ = createValueState(null);\n  protected gridSize$ = createValueState(0);\n\n  constructor(protected diagramEngine: DiagramEngine, id?: string, logPrefix = '[Diagram]') {\n    super(id, logPrefix);\n  }\n\n  // TODO: support the following events for links and nodes\n  // removed, updated<positionChanged/dataChanged>, added\n  getNodes(): EntityMap<NodeModel> {\n    return this.nodes$.value;\n  }\n\n  getNodesArray(): NodeModel[] {\n    return this.nodes$.array();\n  }\n\n  getNode(id: ID): NodeModel | undefined {\n    return this.nodes$.get(id);\n  }\n\n  getLink(id: ID): LinkModel | undefined {\n    return this.links$.get(id);\n  }\n\n  getLinks(): EntityMap<LinkModel> {\n    return this.links$.value;\n  }\n\n  getLinksArray(): LinkModel[] {\n    return this.links$.array();\n  }\n\n  getAllPorts(options: SelectOptions<PortModel> = {}): Map<string, PortModel> {\n    const result = new Map<ID, PortModel>();\n\n    this.getNodes().forEach((node) => {\n      const ports = options.filter ? node.getPortsArray().filter(options.filter) : node.getPortsArray();\n      ports.forEach((port) => result.set(port.id, port));\n    });\n\n    return result;\n  }\n\n  /**\n   * Add a node to the diagram\n   * @returns Inserted Node\n   */\n  addNode(node: NodeModel): NodeModel {\n    this.nodes$.add(node).emit();\n    return node;\n  }\n\n  /**\n   * Delete a node from the diagram\n   */\n  deleteNode(nodeOrId: NodeModel | string): void {\n    const nodeId: ID = typeof nodeOrId === 'string' ? nodeOrId : nodeOrId.id;\n    const node = this.getNode(nodeId);\n\n    for (const port of node.getPorts().values()) {\n      for (const link of port.getLinks().values()) {\n        this.deleteLink(link);\n      }\n    }\n\n    this.nodes$.remove(nodeId).emit();\n  }\n\n  /**\n   * Get nodes as observable, use `.getValue()` for snapshot\n   */\n  selectNodes(): Observable<EntityMap<NodeModel>> {\n    return this.nodes$.value$;\n  }\n\n  /**\n   * Add link\n   * @returns Newly created link\n   */\n  addLink(link: LinkModel): LinkModel {\n    this.links$.add(link).emit();\n    return link;\n  }\n\n  /**\n   * Delete link\n   */\n  deleteLink(linkOrId: LinkModel | string) {\n    const linkId: ID = typeof linkOrId === 'string' ? linkOrId : linkOrId.id;\n    this.links$.remove(linkId).emit();\n  }\n\n  reset() {\n    this.nodes$.clear().emit();\n    this.links$.clear().emit();\n  }\n\n  /**\n   * Get links behaviour subject, use `.getValue()` for snapshot\n   */\n  selectLinks(): Observable<EntityMap<LinkModel>> {\n    return this.links$.value$;\n  }\n\n  // /**\n  //  * Serialize the diagram model to JSON\n  //  * @returns diagram model as a string\n  //  */\n  serialize(): SerializedDiagramModel {\n    const serializedNodes = this.nodes$.map((node) => node.serialize());\n    const serializedLinks = this.links$.map((link) => link.serialize());\n\n    return { ...super.serialize(), nodes: serializedNodes, links: serializedLinks };\n  }\n\n  setMaxZoomOut(maxZoomOut: number) {\n    this.maxZoomOut$.set(maxZoomOut).emit();\n  }\n\n  setMaxZoomIn(maxZoomIn: number) {\n    this.maxZoomIn$.set(maxZoomIn).emit();\n  }\n\n  getMaxZoomOut() {\n    return this.maxZoomOut$.value;\n  }\n\n  getMaxZoomIn() {\n    return this.maxZoomIn$.value;\n  }\n\n  setOffset(x: number, y: number) {\n    this.offsetX$.set(x).emit();\n    this.offsetY$.set(y).emit();\n  }\n\n  setOffsetX(x: number) {\n    this.offsetX$.set(x).emit();\n  }\n\n  getOffsetX(): number {\n    return this.offsetX$.value;\n  }\n\n  selectOffsetX(): Observable<number> {\n    return this.offsetX$.value$;\n  }\n\n  setOffsetY(y: number) {\n    this.offsetY$.set(y).emit();\n  }\n\n  getOffsetY(): number {\n    return this.offsetY$.value;\n  }\n\n  selectOffsetY(): Observable<number> {\n    return this.offsetY$.value$;\n  }\n\n  setZoomLevel(z: number) {\n    const maxZoomIn = this.getMaxZoomIn();\n    const maxZoomOut = this.getMaxZoomOut();\n\n    // check if zoom levels exceeded defined boundaries\n    if ((maxZoomIn && z > maxZoomIn) || (maxZoomOut && z < maxZoomOut)) {\n      return;\n    }\n\n    this.zoom$.set(z).emit();\n  }\n\n  getZoomLevel(): number {\n    return this.zoom$.value;\n  }\n\n  selectZoomLevel(): Observable<number> {\n    return this.zoom$.value$;\n  }\n\n  getDiagramEngine(): DiagramEngine {\n    return this.diagramEngine;\n  }\n\n  clearSelection(ignore: BaseModel | null = null) {\n    this.getSelectedItems().forEach((element) => {\n      if (ignore?.id === element.id) {\n        return;\n      }\n      element.setSelected(false);\n    });\n  }\n\n  getGridPosition({ x, y }: Coords): Coords {\n    const gridSize = this.gridSize$.value;\n    if (gridSize === 0) {\n      return { x, y };\n    }\n\n    return {\n      x: gridSize * Math.floor((x + gridSize / 2) / gridSize),\n      y: gridSize * Math.floor((y + gridSize / 2) / gridSize)\n    };\n  }\n\n  getSelectedItems(...filters: BaseEntityType[]): BaseModel[] {\n    filters = coerceArray(filters);\n\n    const items: BaseModel[] = [];\n    const nodes = this.nodes$.array();\n    const links = this.links$.array();\n\n    const selectedNodes = () => nodes.flatMap((node) => node.getSelectedEntities());\n    const selectedPorts = () =>\n      nodes.flatMap((node) => node.getPortsArray().flatMap((port: PortModel) => port.getSelectedEntities()));\n    const selectedLinks = () => links.flatMap((link) => link.getSelectedEntities());\n    const selectedPoints = () =>\n      links.flatMap((link) => link.getPoints().flatMap((point) => point.getSelectedEntities()));\n\n    if (isEmptyArray(filters)) {\n      items.push(...selectedNodes(), ...selectedPorts(), ...selectedLinks(), ...selectedPoints());\n    } else {\n      const byType: Record<BaseEntityType, () => BaseModel[]> = {\n        node: selectedNodes,\n        port: selectedPorts,\n        link: selectedLinks,\n        point: selectedPoints\n      };\n\n      for (const type of filters) {\n        items.push(...byType[type]());\n      }\n    }\n\n    return unique(items);\n  }\n\n  addAll(...models: BaseModel[]) {\n    const links: LinkModel[] = [];\n    const nodes: NodeModel[] = [];\n\n    for (const model of models) {\n      if (model instanceof LinkModel) {\n        links.push(model);\n      } else if (model instanceof NodeModel) {\n        nodes.push(model);\n      }\n    }\n\n    this.addLinks(links);\n    this.addNodes(nodes);\n\n    return models;\n  }\n\n  addLinks(links: LinkModel[]) {\n    this.links$.addMany(links).emit();\n  }\n\n  addNodes(nodes: NodeModel[]) {\n    this.nodes$.addMany(nodes).emit();\n  }\n\n  destroy() {\n    super.destroy();\n    this.nodes$.destroy();\n    this.links$.destroy();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine"
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "optional": true
                    },
                    {
                        "name": "logPrefix",
                        "type": "string",
                        "defaultValue": "'[Diagram]'"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logPrefix",
                        "type": "string",
                        "defaultValue": "'[Diagram]'",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "gridSize$",
                    "defaultValue": "createValueState(0)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "links$",
                    "defaultValue": "createEntityState<LinkModel>([], this.entityPipe('links'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "maxZoomIn$",
                    "defaultValue": "createValueState(null)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "maxZoomOut$",
                    "defaultValue": "createValueState(null)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "nodes$",
                    "defaultValue": "createEntityState<NodeModel>([], this.entityPipe('nodes'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "offsetX$",
                    "defaultValue": "createValueState(0, this.entityPipe('offsetX'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "offsetY$",
                    "defaultValue": "createValueState(0, this.entityPipe('offsetY'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "zoom$",
                    "defaultValue": "createValueState(100, this.entityPipe('zoom'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "destroyed$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "locked$",
                    "defaultValue": "createValueState(false, this.entityPipe('locked'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "methods": [
                {
                    "name": "addAll",
                    "args": [
                        {
                            "name": "models",
                            "type": "BaseModel[]",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 260,
                    "jsdoctags": [
                        {
                            "name": "models",
                            "type": "BaseModel[]",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addLink",
                    "args": [
                        {
                            "name": "link",
                            "type": "LinkModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "LinkModel",
                    "typeParameters": [],
                    "line": 102,
                    "description": "<p>Add link</p>\n",
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "LinkModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 3094,
                                "end": 3101,
                                "flags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Newly created link</p>\n"
                        }
                    ]
                },
                {
                    "name": "addLinks",
                    "args": [
                        {
                            "name": "links",
                            "type": "LinkModel[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 278,
                    "jsdoctags": [
                        {
                            "name": "links",
                            "type": "LinkModel[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addNode",
                    "args": [
                        {
                            "name": "node",
                            "type": "NodeModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "NodeModel",
                    "typeParameters": [],
                    "line": 70,
                    "description": "<p>Add a node to the diagram</p>\n",
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "NodeModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 2372,
                                "end": 2379,
                                "flags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Inserted Node</p>\n"
                        }
                    ]
                },
                {
                    "name": "addNodes",
                    "args": [
                        {
                            "name": "nodes",
                            "type": "NodeModel[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 282,
                    "jsdoctags": [
                        {
                            "name": "nodes",
                            "type": "NodeModel[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearSelection",
                    "args": [
                        {
                            "name": "ignore",
                            "type": "BaseModel | null",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 207,
                    "jsdoctags": [
                        {
                            "name": "ignore",
                            "type": "BaseModel | null",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteLink",
                    "args": [
                        {
                            "name": "linkOrId",
                            "type": "LinkModel | string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "description": "<p>Delete link</p>\n",
                    "jsdoctags": [
                        {
                            "name": "linkOrId",
                            "type": "LinkModel | string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteNode",
                    "args": [
                        {
                            "name": "nodeOrId",
                            "type": "NodeModel | string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "description": "<p>Delete a node from the diagram</p>\n",
                    "jsdoctags": [
                        {
                            "name": "nodeOrId",
                            "type": "NodeModel | string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 286
                },
                {
                    "name": "getAllPorts",
                    "args": [
                        {
                            "name": "options",
                            "type": "SelectOptions<PortModel>",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "Map<string, PortModel>",
                    "typeParameters": [],
                    "line": 55,
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "SelectOptions<PortModel>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDiagramEngine",
                    "args": [],
                    "optional": false,
                    "returnType": "DiagramEngine",
                    "typeParameters": [],
                    "line": 203
                },
                {
                    "name": "getGridPosition",
                    "args": [
                        {
                            "type": "Coords"
                        }
                    ],
                    "optional": false,
                    "returnType": "Coords",
                    "typeParameters": [],
                    "line": 216,
                    "jsdoctags": [
                        {
                            "type": "Coords",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLink",
                    "args": [
                        {
                            "name": "id",
                            "type": "ID"
                        }
                    ],
                    "optional": false,
                    "returnType": "LinkModel | undefined",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "ID",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLinks",
                    "args": [],
                    "optional": false,
                    "returnType": "EntityMap<LinkModel>",
                    "typeParameters": [],
                    "line": 47
                },
                {
                    "name": "getLinksArray",
                    "args": [],
                    "optional": false,
                    "returnType": "LinkModel[]",
                    "typeParameters": [],
                    "line": 51
                },
                {
                    "name": "getMaxZoomIn",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 150
                },
                {
                    "name": "getMaxZoomOut",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 146
                },
                {
                    "name": "getNode",
                    "args": [
                        {
                            "name": "id",
                            "type": "ID"
                        }
                    ],
                    "optional": false,
                    "returnType": "NodeModel | undefined",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "ID",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNodes",
                    "args": [],
                    "optional": false,
                    "returnType": "EntityMap<NodeModel>",
                    "typeParameters": [],
                    "line": 31
                },
                {
                    "name": "getNodesArray",
                    "args": [],
                    "optional": false,
                    "returnType": "NodeModel[]",
                    "typeParameters": [],
                    "line": 35
                },
                {
                    "name": "getOffsetX",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 163
                },
                {
                    "name": "getOffsetY",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 175
                },
                {
                    "name": "getSelectedItems",
                    "args": [
                        {
                            "name": "filters",
                            "type": "BaseEntityType[]",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "BaseModel[]",
                    "typeParameters": [],
                    "line": 228,
                    "jsdoctags": [
                        {
                            "name": "filters",
                            "type": "BaseEntityType[]",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getZoomLevel",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 195
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115
                },
                {
                    "name": "selectLinks",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<EntityMap<LinkModel>>",
                    "typeParameters": [],
                    "line": 123,
                    "description": "<p>Get links behaviour subject, use <code>.getValue()</code> for snapshot</p>\n"
                },
                {
                    "name": "selectNodes",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<EntityMap<NodeModel>>",
                    "typeParameters": [],
                    "line": 94,
                    "description": "<p>Get nodes as observable, use <code>.getValue()</code> for snapshot</p>\n"
                },
                {
                    "name": "selectOffsetX",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 167
                },
                {
                    "name": "selectOffsetY",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 179
                },
                {
                    "name": "selectZoomLevel",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 199
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "SerializedDiagramModel",
                    "typeParameters": [],
                    "line": 131
                },
                {
                    "name": "setMaxZoomIn",
                    "args": [
                        {
                            "name": "maxZoomIn",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "jsdoctags": [
                        {
                            "name": "maxZoomIn",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setMaxZoomOut",
                    "args": [
                        {
                            "name": "maxZoomOut",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "jsdoctags": [
                        {
                            "name": "maxZoomOut",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setOffset",
                    "args": [
                        {
                            "name": "x",
                            "type": "number"
                        },
                        {
                            "name": "y",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 154,
                    "jsdoctags": [
                        {
                            "name": "x",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "y",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setOffsetX",
                    "args": [
                        {
                            "name": "x",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 159,
                    "jsdoctags": [
                        {
                            "name": "x",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setOffsetY",
                    "args": [
                        {
                            "name": "y",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 171,
                    "jsdoctags": [
                        {
                            "name": "y",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setZoomLevel",
                    "args": [
                        {
                            "name": "z",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 183,
                    "jsdoctags": [
                        {
                            "name": "z",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 50,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 84,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 94,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 77,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "BaseEntity",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "EntityState",
            "id": "class-EntityState-c5c9ec0689790bb9f304685a3503ca84",
            "file": "libs/ngx-diagrams/src/lib/state/state.ts",
            "type": "class",
            "sourceCode": "import { BehaviorSubject, MonoTypeOperatorFunction, Observable, OperatorFunction } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { BaseEntity } from '../base.entity';\nimport { ID, isArray, mapToEntries } from '../utils';\nimport { EntityMap, Entries, HashMap } from '../utils/types';\n\nexport class ValueState<T> {\n  protected readonly stream$: BehaviorSubject<T>;\n\n  readonly value$: Observable<T>;\n\n  constructor(value?: T, operator?: OperatorFunction<any, any>) {\n    this.stream$ = new BehaviorSubject(value);\n    this.value$ = operator ? this.stream$.pipe(operator) : this.stream$.asObservable();\n  }\n\n  get value(): T {\n    return this.stream$.getValue();\n  }\n\n  set(value: T): ValueState<T> {\n    this.stream$.next(value);\n    return this;\n  }\n\n  emit(): void {\n    this.stream$.next(this.value);\n  }\n\n  select(): Observable<T>;\n  select(project: (value: T) => T): Observable<T>;\n  select<R>(project: (value: T) => R): Observable<R>;\n  select<R>(project?: ((value: T) => T) | ((value: T) => R)): Observable<T | R> {\n    const mapFn = project || ((v) => v);\n    return this.value$.pipe(\n      map((value) => mapFn(value)),\n      distinctUntilChanged()\n    );\n  }\n}\n\nexport function createValueState<T>(value: T, operator?: OperatorFunction<any, any>): ValueState<T> {\n  return new ValueState<T>(value, operator);\n}\n\nexport class EntityState<T extends BaseEntity> extends ValueState<EntityMap<T>> {\n  protected stream$: BehaviorSubject<EntityMap<T>>;\n\n  value$: Observable<EntityMap<T>>;\n\n  constructor(value?: EntityMap<T>, entityPipe?: MonoTypeOperatorFunction<EntityMap<T>>) {\n    super(value, entityPipe);\n  }\n\n  destroy() {\n    this.clear();\n    this.stream$ = null;\n    this.value$ = null;\n  }\n\n  clear(destroy = true) {\n    if (destroy) {\n      this.forEach((entity) => entity.destroy());\n    }\n\n    this.value.clear();\n    return this;\n  }\n\n  get(id: ID): T {\n    return this.value.get(id);\n  }\n\n  has(id: ID): boolean {\n    return this.value.has(id);\n  }\n\n  add(entity: T): EntityState<T> {\n    this.value.set(entity.id, entity);\n    return this;\n  }\n\n  addMany(entities: T[]): EntityState<T> {\n    for (const entity of entities) {\n      this.add(entity);\n    }\n    return this;\n  }\n\n  remove(id: ID, destroy = true): EntityState<T> {\n    if (destroy) {\n      this.value.get(id)?.destroy();\n    }\n\n    this.value.delete(id);\n    return this;\n  }\n\n  array(): T[] {\n    return Array.from(this.value.values());\n  }\n\n  array$(): Observable<T[]> {\n    return this.select((value) => Array.from(value.values()));\n  }\n\n  forEach(cb: (value: T, key: string, map: EntityMap<T>) => void): void {\n    this.value.forEach(cb);\n  }\n\n  map<R = any>(cb: (value: T, index: number, array: T[]) => R): R[] {\n    return this.array().map(cb);\n  }\n}\n\nexport function createEntityState<T extends BaseEntity>(\n  value: HashMap<T> | Entries<T> = [],\n  entityPipe: MonoTypeOperatorFunction<Map<ID, T>>\n): EntityState<T> {\n  if (isArray(value)) {\n    return new EntityState(new Map(value), entityPipe);\n  } else {\n    return new EntityState(new Map(mapToEntries(value)), entityPipe);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "value",
                        "type": "EntityMap<T>",
                        "optional": true
                    },
                    {
                        "name": "entityPipe",
                        "type": "MonoTypeOperatorFunction<EntityMap<T>>",
                        "optional": true
                    }
                ],
                "line": 49,
                "jsdoctags": [
                    {
                        "name": "value",
                        "type": "EntityMap<T>",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "entityPipe",
                        "type": "MonoTypeOperatorFunction<EntityMap<T>>",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "stream$",
                    "type": "BehaviorSubject<EntityMap<T>>",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "value$",
                    "type": "Observable<EntityMap<T>>",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "stream$",
                    "type": "BehaviorSubject<T>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "ValueState"
                    }
                },
                {
                    "name": "value$",
                    "type": "Observable<T>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        132
                    ],
                    "inheritance": {
                        "file": "ValueState"
                    }
                }
            ],
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "entity",
                            "type": "T"
                        }
                    ],
                    "optional": false,
                    "returnType": "EntityState<T>",
                    "typeParameters": [],
                    "line": 78,
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "T",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addMany",
                    "args": [
                        {
                            "name": "entities",
                            "type": "T[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "EntityState<T>",
                    "typeParameters": [],
                    "line": 83,
                    "jsdoctags": [
                        {
                            "name": "entities",
                            "type": "T[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "array",
                    "args": [],
                    "optional": false,
                    "returnType": "T[]",
                    "typeParameters": [],
                    "line": 99
                },
                {
                    "name": "array$",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 103
                },
                {
                    "name": "clear",
                    "args": [
                        {
                            "name": "destroy",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "this",
                    "typeParameters": [],
                    "line": 61,
                    "jsdoctags": [
                        {
                            "name": "destroy",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55
                },
                {
                    "name": "forEach",
                    "args": [
                        {
                            "name": "cb",
                            "type": "function",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "T"
                                },
                                {
                                    "name": "key",
                                    "type": "string"
                                },
                                {
                                    "name": "map",
                                    "type": "EntityMap<T>"
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "jsdoctags": [
                        {
                            "name": "cb",
                            "type": "function",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "T"
                                },
                                {
                                    "name": "key",
                                    "type": "string"
                                },
                                {
                                    "name": "map",
                                    "type": "EntityMap<T>"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "id",
                            "type": "ID"
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [],
                    "line": 70,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "ID",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "has",
                    "args": [
                        {
                            "name": "id",
                            "type": "ID"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 74,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "ID",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "map",
                    "args": [
                        {
                            "name": "cb",
                            "type": "function",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "T"
                                },
                                {
                                    "name": "index",
                                    "type": "number"
                                },
                                {
                                    "name": "array",
                                    "type": "T[]"
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "R[]",
                    "typeParameters": [
                        "R"
                    ],
                    "line": 111,
                    "jsdoctags": [
                        {
                            "name": "cb",
                            "type": "function",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "T"
                                },
                                {
                                    "name": "index",
                                    "type": "number"
                                },
                                {
                                    "name": "array",
                                    "type": "T[]"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "id",
                            "type": "ID"
                        },
                        {
                            "name": "destroy",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "EntityState<T>",
                    "typeParameters": [],
                    "line": 90,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "ID",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "destroy",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "emit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "inheritance": {
                        "file": "ValueState"
                    }
                },
                {
                    "name": "select",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [],
                    "line": 30,
                    "inheritance": {
                        "file": "ValueState"
                    }
                },
                {
                    "name": "select",
                    "args": [
                        {
                            "name": "project",
                            "type": "function",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "T"
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [],
                    "line": 31,
                    "jsdoctags": [
                        {
                            "name": "project",
                            "type": "function",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "T"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ValueState"
                    }
                },
                {
                    "name": "select",
                    "args": [
                        {
                            "name": "project",
                            "type": "function",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "T"
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<R>",
                    "typeParameters": [
                        "R"
                    ],
                    "line": 32,
                    "jsdoctags": [
                        {
                            "name": "project",
                            "type": "function",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "T"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ValueState"
                    }
                },
                {
                    "name": "select",
                    "args": [
                        {
                            "name": "project",
                            "type": " | ",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T | R>",
                    "typeParameters": [
                        "R"
                    ],
                    "line": 33,
                    "jsdoctags": [
                        {
                            "name": "project",
                            "type": " | ",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ValueState"
                    }
                },
                {
                    "name": "set",
                    "args": [
                        {
                            "name": "value",
                            "type": "T"
                        }
                    ],
                    "optional": false,
                    "returnType": "ValueState<T>",
                    "typeParameters": [],
                    "line": 21,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ValueState"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "ValueState",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "InvalidLinkDestroyed",
            "id": "class-InvalidLinkDestroyed-95b1a49a1852ef4c44b485fa4e6ec89b",
            "file": "libs/ngx-diagrams/src/lib/actions/invalid-link-destroyed.action.ts",
            "type": "class",
            "sourceCode": "import { BaseAction } from './base.action';\nimport { PortModel } from '../models/port.model';\nimport { NodeModel } from '../models/node.model';\nimport { LinkModel } from '../models';\n\nexport class InvalidLinkDestroyed extends BaseAction {\n  sourcePort: PortModel;\n  link: LinkModel;\n\n  constructor(mouseX: number, mouseY: number, link: LinkModel) {\n    super(mouseX, mouseY);\n    this.sourcePort = link.getSourcePort();\n    this.link = link;\n  }\n\n  getOutPortNode(): NodeModel {\n    return this.sourcePort.getParent();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "mouseX",
                        "type": "number"
                    },
                    {
                        "name": "mouseY",
                        "type": "number"
                    },
                    {
                        "name": "link",
                        "type": "LinkModel"
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "mouseX",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mouseY",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "link",
                        "type": "LinkModel",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "link",
                    "type": "LinkModel",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "sourcePort",
                    "type": "PortModel",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "mouseX",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "inheritance": {
                        "file": "BaseAction"
                    }
                },
                {
                    "name": "mouseY",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "inheritance": {
                        "file": "BaseAction"
                    }
                },
                {
                    "name": "ms",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "inheritance": {
                        "file": "BaseAction"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getOutPortNode",
                    "args": [],
                    "optional": false,
                    "returnType": "NodeModel",
                    "typeParameters": [],
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "extends": "BaseAction",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LabelModel",
            "id": "class-LabelModel-71c3b8448abb0e97c60420a7e436ffb5",
            "file": "libs/ngx-diagrams/src/lib/models/label.model.ts",
            "type": "class",
            "sourceCode": "import { Observable } from 'rxjs';\nimport { Coords } from '../interfaces/coords.interface';\nimport { SerializedLabelModel } from '../interfaces/serialization.interface';\nimport { createValueState } from '../state/state';\nimport { BaseModel } from './base.model';\nimport { LinkModel } from './link.model';\n\nexport class LabelModel extends BaseModel<LinkModel> {\n  protected coords$ = createValueState<Coords>({ x: 0, y: 0 }, this.entityPipe('coords'));\n  protected rotation$ = createValueState<number>(0, this.entityPipe('rotation'));\n\n  constructor(type?: string, id?: string, logPrefix = '[Label]') {\n    super(type, id, logPrefix);\n  }\n\n  serialize(): SerializedLabelModel {\n    return {\n      ...super.serialize(),\n      type: this.getType(),\n      rotation: this.getRotation(),\n      coords: this.getCoords()\n    };\n  }\n\n  getRotation() {\n    return this.rotation$.value;\n  }\n\n  getCoords() {\n    return this.coords$.value;\n  }\n\n  destroy() {\n    super.destroy();\n  }\n\n  setRotation(angle: number) {\n    this.rotation$.set(angle).emit();\n  }\n\n  selectRotation(): Observable<number> {\n    return this.rotation$.value$;\n  }\n\n  setCoords(newCoords: Partial<Coords>) {\n    this.coords$.set({ ...this.coords$.value, ...newCoords }).emit();\n  }\n\n  selectCoords(): Observable<Coords> {\n    return this.coords$.value$;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "type",
                        "type": "string",
                        "optional": true
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "optional": true
                    },
                    {
                        "name": "logPrefix",
                        "type": "string",
                        "defaultValue": "'[Label]'"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "type",
                        "type": "string",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logPrefix",
                        "type": "string",
                        "defaultValue": "'[Label]'",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "coords$",
                    "defaultValue": "createValueState<Coords>({ x: 0, y: 0 }, this.entityPipe('coords'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "rotation$",
                    "defaultValue": "createValueState<number>(0, this.entityPipe('rotation'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "hovered$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('HoveredChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "painted$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('PaintedChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parent$",
                    "defaultValue": "createValueState<E>(null, this.entityPipe('ParentsChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selected$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('SelectedChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "destroyed$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "locked$",
                    "defaultValue": "createValueState(false, this.entityPipe('locked'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "destroyed$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "locked$",
                    "defaultValue": "createValueState(false, this.entityPipe('locked'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "methods": [
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                },
                {
                    "name": "getCoords",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29
                },
                {
                    "name": "getRotation",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "selectCoords",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Coords>",
                    "typeParameters": [],
                    "line": 49
                },
                {
                    "name": "selectRotation",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 41
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "SerializedLabelModel",
                    "typeParameters": [],
                    "line": 16
                },
                {
                    "name": "setCoords",
                    "args": [
                        {
                            "name": "newCoords",
                            "type": "Partial<Coords>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "jsdoctags": [
                        {
                            "name": "newCoords",
                            "type": "Partial<Coords>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setRotation",
                    "args": [
                        {
                            "name": "angle",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "jsdoctags": [
                        {
                            "name": "angle",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 46,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getPainted",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 38,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getParent",
                    "args": [],
                    "optional": false,
                    "returnType": "E",
                    "typeParameters": [],
                    "line": 26,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 66,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelectedEntities",
                    "args": [],
                    "optional": false,
                    "returnType": "BaseModel[]",
                    "typeParameters": [],
                    "line": 82,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 62,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "paintChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<PaintedEvent>",
                    "typeParameters": [],
                    "line": 58,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parentChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ParentChangeEvent<E>>",
                    "typeParameters": [],
                    "line": 34,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 54,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectionChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SelectionEvent>",
                    "typeParameters": [],
                    "line": 78,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 70,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setHovered",
                    "args": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setPainted",
                    "args": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setParent",
                    "args": [
                        {
                            "name": "parent",
                            "type": "E"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "jsdoctags": [
                        {
                            "name": "parent",
                            "type": "E",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setSelected",
                    "args": [
                        {
                            "name": "selected",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "jsdoctags": [
                        {
                            "name": "selected",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 50,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 84,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 94,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 77,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 50,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 84,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 94,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 77,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "BaseModel",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LinkCreatedAction",
            "id": "class-LinkCreatedAction-fb462d46eff221bda114c3ac5e6d6197",
            "file": "libs/ngx-diagrams/src/lib/actions/links-created.action.ts",
            "type": "class",
            "sourceCode": "import { BaseAction } from './base.action';\nimport { PortModel } from '../models/port.model';\nimport { NodeModel } from '../models/node.model';\nimport { LinkModel } from '../models';\n\n// TODO: refactor into entity-created.action, and fire every time a new entity is created!\nexport class LinkCreatedAction extends BaseAction {\n  sourcePort: PortModel;\n  targetPort: PortModel;\n  link: LinkModel;\n\n  constructor(mouseX: number, mouseY: number, link: LinkModel) {\n    super(mouseX, mouseY);\n    this.sourcePort = link.getSourcePort();\n    this.targetPort = link.getTargetPort();\n    this.link = link;\n  }\n\n  getOutPortNode(): NodeModel {\n    return this.sourcePort.getParent();\n  }\n\n  getInPortNode(): NodeModel {\n    return this.targetPort.getParent();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "mouseX",
                        "type": "number"
                    },
                    {
                        "name": "mouseY",
                        "type": "number"
                    },
                    {
                        "name": "link",
                        "type": "LinkModel"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "mouseX",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mouseY",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "link",
                        "type": "LinkModel",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "link",
                    "type": "LinkModel",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "sourcePort",
                    "type": "PortModel",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "targetPort",
                    "type": "PortModel",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "mouseX",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "inheritance": {
                        "file": "BaseAction"
                    }
                },
                {
                    "name": "mouseY",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "inheritance": {
                        "file": "BaseAction"
                    }
                },
                {
                    "name": "ms",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "inheritance": {
                        "file": "BaseAction"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getInPortNode",
                    "args": [],
                    "optional": false,
                    "returnType": "NodeModel",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "getOutPortNode",
                    "args": [],
                    "optional": false,
                    "returnType": "NodeModel",
                    "typeParameters": [],
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "extends": "BaseAction",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LinkModel",
            "id": "class-LinkModel-7a5c13cebae50149288d225383fba027",
            "file": "libs/ngx-diagrams/src/lib/models/link.model.ts",
            "type": "class",
            "sourceCode": "import { Observable } from 'rxjs';\nimport { Coords } from '../interfaces/coords.interface';\nimport { SerializedLinkModel } from '../interfaces/serialization.interface';\nimport { DiagramEngine } from '../services/engine.service';\nimport { createValueState } from '../state/state';\nimport { ID } from '../utils/tool-kit.util';\nimport { BaseModel } from './base.model';\nimport { DiagramModel } from './diagram.model';\nimport { LabelModel } from './label.model';\nimport { PointModel } from './point.model';\nimport { PortModel } from './port.model';\n\nexport class LinkModel extends BaseModel<DiagramModel> {\n  diagramEngine: DiagramEngine;\n\n  // TODO: decide what should be reactive using RXJS\n  protected name: string;\n  protected sourcePort: PortModel | null;\n  protected targetPort: PortModel | null;\n  protected points: PointModel[];\n  protected extras: any;\n\n  protected label$ = createValueState<LabelModel>(null, this.entityPipe('label'));\n\n  constructor(linkType = 'default', id?: string, logPrefix = '[Link]') {\n    super(linkType, id, logPrefix);\n    this.points = [new PointModel(this, { x: 0, y: 0 }), new PointModel(this, { x: 0, y: 0 })];\n    this.extras = {};\n    this.sourcePort = null;\n    this.targetPort = null;\n  }\n\n  serialize(): SerializedLinkModel {\n    const serializedPoints = this.points.map((point) => point.serialize());\n    const label = this.getLabel()?.serialize();\n    return {\n      ...super.serialize(),\n      name: this.getName(),\n      sourcePort: this.getSourcePort().id,\n      targetPort: this.getTargetPort().id,\n      extras: this.getExtras(),\n      points: serializedPoints,\n      label\n    };\n  }\n\n  setName(name: string) {\n    this.name = name;\n  }\n\n  getName(): string {\n    return this.name;\n  }\n\n  getExtras(): any {\n    return this.extras;\n  }\n\n  setExtras(extras: any) {\n    this.extras = extras;\n  }\n\n  destroy() {\n    if (this.sourcePort) {\n      this.sourcePort.removeLink(this);\n    }\n\n    if (this.targetPort) {\n      this.targetPort.removeLink(this);\n    }\n\n    super.destroy();\n  }\n\n  doClone(lookupTable = {}, clone) {\n    clone.setPoints(\n      this.getPoints().map((point: PointModel) => {\n        return point.clone(lookupTable);\n      })\n    );\n    if (this.sourcePort) {\n      clone.setSourcePort(this.sourcePort.clone(lookupTable));\n    }\n    if (this.targetPort) {\n      clone.setTargetPort(this.targetPort.clone(lookupTable));\n    }\n  }\n\n  isLastPoint(point: PointModel) {\n    const index = this.getPointIndex(point);\n    return index === this.points.length - 1;\n  }\n\n  getPointIndex(point: PointModel) {\n    return this.points.indexOf(point);\n  }\n\n  getPointModel(id: ID): PointModel | null {\n    for (const point of this.points) {\n      if (point.id === id) {\n        return point;\n      }\n    }\n    return null;\n  }\n\n  getPortForPoint(point: PointModel): PortModel {\n    if (this.sourcePort !== null && this.getFirstPoint().id === point.id) {\n      return this.sourcePort;\n    }\n    if (this.targetPort !== null && this.getLastPoint().id === point.id) {\n      return this.targetPort;\n    }\n    return null;\n  }\n\n  getPointForPort(port: PortModel): PointModel {\n    if (this.sourcePort !== null && this.sourcePort.id === port.id) {\n      return this.getFirstPoint();\n    }\n\n    if (this.targetPort !== null && this.targetPort.id === port.id) {\n      return this.getLastPoint();\n    }\n\n    return null;\n  }\n\n  getFirstPoint(): PointModel {\n    return this.points[0];\n  }\n\n  getLastPoint(): PointModel {\n    return this.points[this.points.length - 1];\n  }\n\n  setSourcePort(port: PortModel) {\n    if (port !== null) {\n      port.addLink(this);\n    }\n    if (this.sourcePort !== null) {\n      this.sourcePort.removeLink(this);\n    }\n    this.sourcePort = port;\n  }\n\n  getSourcePort(): PortModel {\n    return this.sourcePort;\n  }\n\n  getTargetPort(): PortModel {\n    return this.targetPort;\n  }\n\n  setTargetPort(port: PortModel) {\n    if (port !== null) {\n      port.addLink(this);\n    }\n    if (this.targetPort !== null) {\n      this.targetPort.removeLink(this);\n    }\n    this.targetPort = port;\n  }\n\n  point({ x, y }: Coords): PointModel {\n    return this.addPoint(this.generatePoint({ x, y }));\n  }\n\n  getPoints(): PointModel[] {\n    return this.points;\n  }\n\n  setPoints(points: PointModel[]) {\n    points.forEach((point) => {\n      point.setParent(this);\n    });\n    this.points = points;\n  }\n\n  setLabel(label: LabelModel) {\n    label.setParent(this);\n    this.label$.set(label).emit();\n  }\n\n  selectLabel(): Observable<LabelModel | null> {\n    return this.label$.value$;\n  }\n\n  getLabel(): LabelModel {\n    return this.label$.value;\n  }\n\n  resetLabel() {\n    const currentLabel = this.getLabel();\n\n    if (currentLabel) {\n      currentLabel.setParent(null);\n      currentLabel.setPainted(false);\n    }\n\n    this.setLabel(null);\n  }\n\n  removePoint(pointModel: PointModel) {\n    this.points.splice(this.getPointIndex(pointModel), 1);\n  }\n\n  removePointsBefore(pointModel: PointModel) {\n    this.points.splice(0, this.getPointIndex(pointModel));\n  }\n\n  removePointsAfter(pointModel: PointModel) {\n    this.points.splice(this.getPointIndex(pointModel) + 1);\n  }\n\n  removeMiddlePoints() {\n    if (this.points.length > 2) {\n      this.points.splice(0, this.points.length - 2);\n    }\n  }\n\n  addPoint<P extends PointModel>(pointModel: P, index = 1): P {\n    pointModel.setParent(this);\n    pointModel.setLocked(this.getLocked());\n    this.points.splice(index, 0, pointModel);\n    return pointModel;\n  }\n\n  generatePoint({ x = 0, y = 0 }: Coords): PointModel {\n    return new PointModel(this, { x, y });\n  }\n\n  setLocked(locked = true) {\n    super.setLocked(locked);\n    this.points.forEach((point) => point.setLocked(locked));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "linkType",
                        "type": "string",
                        "defaultValue": "'default'"
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "optional": true
                    },
                    {
                        "name": "logPrefix",
                        "type": "string",
                        "defaultValue": "'[Link]'"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "linkType",
                        "type": "string",
                        "defaultValue": "'default'",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logPrefix",
                        "type": "string",
                        "defaultValue": "'[Link]'",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "diagramEngine",
                    "type": "DiagramEngine",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "extras",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "label$",
                    "defaultValue": "createValueState<LabelModel>(null, this.entityPipe('label'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "points",
                    "type": "PointModel[]",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "sourcePort",
                    "type": "PortModel | null",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "targetPort",
                    "type": "PortModel | null",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "hovered$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('HoveredChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "painted$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('PaintedChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parent$",
                    "defaultValue": "createValueState<E>(null, this.entityPipe('ParentsChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selected$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('SelectedChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "destroyed$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "locked$",
                    "defaultValue": "createValueState(false, this.entityPipe('locked'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "destroyed$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "locked$",
                    "defaultValue": "createValueState(false, this.entityPipe('locked'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "methods": [
                {
                    "name": "addPoint",
                    "args": [
                        {
                            "name": "pointModel",
                            "type": "P"
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "defaultValue": "1"
                        }
                    ],
                    "optional": false,
                    "returnType": "P",
                    "typeParameters": [
                        "P"
                    ],
                    "line": 222,
                    "jsdoctags": [
                        {
                            "name": "pointModel",
                            "type": "P",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "defaultValue": "1",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "object",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "object",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generatePoint",
                    "args": [
                        {
                            "type": "Coords"
                        }
                    ],
                    "optional": false,
                    "returnType": "PointModel",
                    "typeParameters": [],
                    "line": 229,
                    "jsdoctags": [
                        {
                            "type": "Coords",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getExtras",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 55
                },
                {
                    "name": "getFirstPoint",
                    "args": [],
                    "optional": false,
                    "returnType": "PointModel",
                    "typeParameters": [],
                    "line": 129
                },
                {
                    "name": "getLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "LabelModel",
                    "typeParameters": [],
                    "line": 189
                },
                {
                    "name": "getLastPoint",
                    "args": [],
                    "optional": false,
                    "returnType": "PointModel",
                    "typeParameters": [],
                    "line": 133
                },
                {
                    "name": "getName",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 51
                },
                {
                    "name": "getPointForPort",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "PointModel",
                    "typeParameters": [],
                    "line": 117,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPointIndex",
                    "args": [
                        {
                            "name": "point",
                            "type": "PointModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 94,
                    "jsdoctags": [
                        {
                            "name": "point",
                            "type": "PointModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPointModel",
                    "args": [
                        {
                            "name": "id",
                            "type": "ID"
                        }
                    ],
                    "optional": false,
                    "returnType": "PointModel | null",
                    "typeParameters": [],
                    "line": 98,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "ID",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPoints",
                    "args": [],
                    "optional": false,
                    "returnType": "PointModel[]",
                    "typeParameters": [],
                    "line": 169
                },
                {
                    "name": "getPortForPoint",
                    "args": [
                        {
                            "name": "point",
                            "type": "PointModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "PortModel",
                    "typeParameters": [],
                    "line": 107,
                    "jsdoctags": [
                        {
                            "name": "point",
                            "type": "PointModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSourcePort",
                    "args": [],
                    "optional": false,
                    "returnType": "PortModel",
                    "typeParameters": [],
                    "line": 147
                },
                {
                    "name": "getTargetPort",
                    "args": [],
                    "optional": false,
                    "returnType": "PortModel",
                    "typeParameters": [],
                    "line": 151
                },
                {
                    "name": "isLastPoint",
                    "args": [
                        {
                            "name": "point",
                            "type": "PointModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 89,
                    "jsdoctags": [
                        {
                            "name": "point",
                            "type": "PointModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "point",
                    "args": [
                        {
                            "type": "Coords"
                        }
                    ],
                    "optional": false,
                    "returnType": "PointModel",
                    "typeParameters": [],
                    "line": 165,
                    "jsdoctags": [
                        {
                            "type": "Coords",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeMiddlePoints",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 216
                },
                {
                    "name": "removePoint",
                    "args": [
                        {
                            "name": "pointModel",
                            "type": "PointModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 204,
                    "jsdoctags": [
                        {
                            "name": "pointModel",
                            "type": "PointModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removePointsAfter",
                    "args": [
                        {
                            "name": "pointModel",
                            "type": "PointModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 212,
                    "jsdoctags": [
                        {
                            "name": "pointModel",
                            "type": "PointModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removePointsBefore",
                    "args": [
                        {
                            "name": "pointModel",
                            "type": "PointModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 208,
                    "jsdoctags": [
                        {
                            "name": "pointModel",
                            "type": "PointModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 193
                },
                {
                    "name": "selectLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LabelModel | null>",
                    "typeParameters": [],
                    "line": 185
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "SerializedLinkModel",
                    "typeParameters": [],
                    "line": 33
                },
                {
                    "name": "setExtras",
                    "args": [
                        {
                            "name": "extras",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "extras",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setLabel",
                    "args": [
                        {
                            "name": "label",
                            "type": "LabelModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 180,
                    "jsdoctags": [
                        {
                            "name": "label",
                            "type": "LabelModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 233,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setName",
                    "args": [
                        {
                            "name": "name",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setPoints",
                    "args": [
                        {
                            "name": "points",
                            "type": "PointModel[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "jsdoctags": [
                        {
                            "name": "points",
                            "type": "PointModel[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSourcePort",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setTargetPort",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 46,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getPainted",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 38,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getParent",
                    "args": [],
                    "optional": false,
                    "returnType": "E",
                    "typeParameters": [],
                    "line": 26,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 66,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelectedEntities",
                    "args": [],
                    "optional": false,
                    "returnType": "BaseModel[]",
                    "typeParameters": [],
                    "line": 82,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 62,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "paintChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<PaintedEvent>",
                    "typeParameters": [],
                    "line": 58,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parentChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ParentChangeEvent<E>>",
                    "typeParameters": [],
                    "line": 34,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 54,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectionChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SelectionEvent>",
                    "typeParameters": [],
                    "line": 78,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 70,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setHovered",
                    "args": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setPainted",
                    "args": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setParent",
                    "args": [
                        {
                            "name": "parent",
                            "type": "E"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "jsdoctags": [
                        {
                            "name": "parent",
                            "type": "E",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setSelected",
                    "args": [
                        {
                            "name": "selected",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "jsdoctags": [
                        {
                            "name": "selected",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 50,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 84,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 94,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 77,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 50,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 84,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 94,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 77,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "BaseModel",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LockEvent",
            "id": "class-LockEvent-0891b2f46b0f06f06af1483c5bb51095",
            "file": "libs/ngx-diagrams/src/lib/interfaces/event.interface.ts",
            "type": "class",
            "sourceCode": "import { BaseEntity } from '../base.entity';\nimport { ID, UID } from '../utils/tool-kit.util';\n\n// region events\nexport class BaseEvent<T extends BaseEntity> {\n  entity: T;\n  entityId: ID;\n  stopPropagation: () => any;\n  firing: boolean;\n  id: ID;\n  propogate: boolean;\n\n  constructor(entity: T, options?: any) {\n    this.id = UID();\n    this.entity = entity;\n    this.entityId = entity.id;\n    this.firing = true;\n    this.stopPropagation = () => (this.firing = false);\n    this.propogate = options ? options.propagate : null;\n  }\n}\nexport class LockEvent<T extends BaseEntity = BaseEntity> extends BaseEvent<T> {\n  locked: boolean;\n\n  constructor(entity: T, locked = false) {\n    super(entity);\n    this.locked = locked;\n  }\n}\nexport class ParentChangeEvent<\n  P extends BaseEntity = BaseEntity,\n  T extends BaseEntity = BaseEntity\n> extends BaseEvent<T> {\n  parent: P;\n\n  constructor(entity: T, parent: P) {\n    super(entity);\n    this.parent = parent;\n  }\n}\nexport class SelectionEvent<\n  T extends BaseEntity = BaseEntity\n> extends BaseEvent<T> {\n  isSelected: boolean;\n\n  constructor(entity: T, selected: boolean) {\n    super(entity);\n    this.isSelected = selected;\n  }\n}\nexport class PaintedEvent<T extends BaseEntity = BaseEntity> extends BaseEvent<\n  T\n> {\n  isPainted: boolean;\n\n  constructor(entity: T, painted = false) {\n    super(entity);\n    this.isPainted = painted;\n  }\n}\n// endregion\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "entity",
                        "type": "T"
                    },
                    {
                        "name": "locked",
                        "type": "",
                        "defaultValue": "false"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "entity",
                        "type": "T",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "locked",
                        "type": "",
                        "defaultValue": "false",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "locked",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "entity",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "BaseEvent"
                    }
                },
                {
                    "name": "entityId",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "inheritance": {
                        "file": "BaseEvent"
                    }
                },
                {
                    "name": "firing",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "inheritance": {
                        "file": "BaseEvent"
                    }
                },
                {
                    "name": "id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "inheritance": {
                        "file": "BaseEvent"
                    }
                },
                {
                    "name": "propogate",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "inheritance": {
                        "file": "BaseEvent"
                    }
                },
                {
                    "name": "stopPropagation",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "inheritance": {
                        "file": "BaseEvent"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "BaseEvent",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LooseLinkDestroyed",
            "id": "class-LooseLinkDestroyed-c8cf0742a3ef6474ae19a37b52a0d181",
            "file": "libs/ngx-diagrams/src/lib/actions/loose-link-destroyed.action.ts",
            "type": "class",
            "sourceCode": "import { BaseAction } from './base.action';\nimport { PortModel } from '../models/port.model';\nimport { NodeModel } from '../models/node.model';\nimport { LinkModel } from '../models';\n\nexport class LooseLinkDestroyed extends BaseAction {\n  sourcePort: PortModel;\n  link: LinkModel;\n\n  constructor(mouseX: number, mouseY: number, link: LinkModel) {\n    super(mouseX, mouseY);\n    this.sourcePort = link.getSourcePort();\n    this.link = link;\n  }\n\n  getOutPortNode(): NodeModel {\n    return this.sourcePort.getParent();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "mouseX",
                        "type": "number"
                    },
                    {
                        "name": "mouseY",
                        "type": "number"
                    },
                    {
                        "name": "link",
                        "type": "LinkModel"
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "mouseX",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mouseY",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "link",
                        "type": "LinkModel",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "link",
                    "type": "LinkModel",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "sourcePort",
                    "type": "PortModel",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "mouseX",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "inheritance": {
                        "file": "BaseAction"
                    }
                },
                {
                    "name": "mouseY",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "inheritance": {
                        "file": "BaseAction"
                    }
                },
                {
                    "name": "ms",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "inheritance": {
                        "file": "BaseAction"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getOutPortNode",
                    "args": [],
                    "optional": false,
                    "returnType": "NodeModel",
                    "typeParameters": [],
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "extends": "BaseAction",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "MoveCanvasAction",
            "id": "class-MoveCanvasAction-83410ec1061cd16b6fc3f9da88f0c56c",
            "file": "libs/ngx-diagrams/src/lib/actions/move-canvas.action.ts",
            "type": "class",
            "sourceCode": "import { BaseAction } from './base.action';\nimport { DiagramModel } from '../models/diagram.model';\n\nexport class MoveCanvasAction extends BaseAction {\n  initialOffsetX: number;\n  initialOffsetY: number;\n\n  constructor(mouseX: number, mouseY: number, diagramModel: DiagramModel) {\n    super(mouseX, mouseY);\n    this.initialOffsetX = diagramModel.getOffsetX();\n    this.initialOffsetY = diagramModel.getOffsetY();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "mouseX",
                        "type": "number"
                    },
                    {
                        "name": "mouseY",
                        "type": "number"
                    },
                    {
                        "name": "diagramModel",
                        "type": "DiagramModel"
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "mouseX",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mouseY",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "diagramModel",
                        "type": "DiagramModel",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "initialOffsetX",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "initialOffsetY",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "mouseX",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "inheritance": {
                        "file": "BaseAction"
                    }
                },
                {
                    "name": "mouseY",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "inheritance": {
                        "file": "BaseAction"
                    }
                },
                {
                    "name": "ms",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "inheritance": {
                        "file": "BaseAction"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "BaseAction",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "MoveItemsAction",
            "id": "class-MoveItemsAction-121355400c2bd7237a867a8e61dd495d",
            "file": "libs/ngx-diagrams/src/lib/actions/move-items.action.ts",
            "type": "class",
            "sourceCode": "import { BaseAction } from './base.action';\nimport { PointModel } from '../models/point.model';\nimport { NodeModel } from '../models/node.model';\nimport { DiagramEngine } from '../services/engine.service';\nimport { SelectionModel } from '../models/move-selection.model';\nimport { LinkModel } from '../models/link.model';\n\nexport class MoveItemsAction extends BaseAction {\n  selectionModels: SelectionModel[];\n  moved: boolean;\n\n  constructor(mouseX: number, mouseY: number, diagramEngine: DiagramEngine) {\n    super(mouseX, mouseY);\n    this.moved = false;\n    let selectedItems = diagramEngine.getDiagramModel().getSelectedItems();\n\n    // dont allow items which are locked to move and links which generate their position based on points.\n    selectedItems = selectedItems.filter((item) => {\n      return !diagramEngine.isModelLocked(item) && !(item instanceof LinkModel);\n    });\n\n    this.selectionModels = selectedItems.map((item: PointModel | NodeModel) => {\n      const { x: initialX, y: initialY } = item.getCoords();\n      return {\n        model: item,\n        initialX,\n        initialY,\n      };\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "mouseX",
                        "type": "number"
                    },
                    {
                        "name": "mouseY",
                        "type": "number"
                    },
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "mouseX",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mouseY",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "moved",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "selectionModels",
                    "type": "SelectionModel[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "mouseX",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "inheritance": {
                        "file": "BaseAction"
                    }
                },
                {
                    "name": "mouseY",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "inheritance": {
                        "file": "BaseAction"
                    }
                },
                {
                    "name": "ms",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "inheritance": {
                        "file": "BaseAction"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "BaseAction",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "NodeModel",
            "id": "class-NodeModel-fcf7d9bcd468d2e639a79d4bf727d7da",
            "file": "libs/ngx-diagrams/src/lib/models/node.model.ts",
            "type": "class",
            "sourceCode": "import { Observable } from 'rxjs';\nimport { Coords } from '../interfaces/coords.interface';\nimport { Dimensions } from '../interfaces/dimensions.interface';\nimport { SerializedNodeModel } from '../interfaces/serialization.interface';\nimport { DiagramEngine } from '../services/engine.service';\nimport { createEntityState, createValueState } from '../state/state';\nimport { ID } from '../utils/tool-kit.util';\nimport { EntityMap, HashMap } from '../utils/types';\nimport { BaseModel } from './base.model';\nimport { DiagramModel } from './diagram.model';\nimport { PortModel } from './port.model';\n\nexport class NodeModel<P extends PortModel = PortModel> extends BaseModel<DiagramModel> {\n  protected diagramEngine$ = createValueState<DiagramEngine>(null, this.entityPipe('diagramEngine'));\n  protected extras$ = createValueState<any>({}, this.entityPipe('extras'));\n  protected ports$ = createEntityState<P>([], this.entityPipe('ports'));\n  protected coords$ = createValueState<Coords>({ x: 0, y: 0 }, this.entityPipe('coords'));\n  protected dimensions$ = createValueState<Dimensions>({ width: 0, height: 0 }, this.entityPipe('dimensions'));\n\n  constructor(\n    nodeType = 'default',\n    id?: string,\n    extras: HashMap<any> = {},\n    x = 0,\n    y = 0,\n    width = 0,\n    height = 0,\n    logPrefix = '[Node]'\n  ) {\n    super(nodeType, id, logPrefix);\n    this.setExtras(extras);\n    this.setDimensions({ width, height });\n    this.setCoords({ x, y });\n  }\n\n  getDiagramEngine(): DiagramEngine {\n    return this.diagramEngine$.value;\n  }\n\n  selectDiagramEngine(): Observable<DiagramEngine> {\n    return this.diagramEngine$.value$;\n  }\n\n  setDiagramEngine(diagramEngine: DiagramEngine) {\n    this.diagramEngine$.set(diagramEngine).emit();\n  }\n\n  getCoords(): Coords {\n    return this.coords$.value;\n  }\n\n  setCoords({ x, y }: Coords) {\n    const { x: oldX, y: oldY } = this.getCoords();\n\n    this.getPorts().forEach((port) => {\n      port.getLinks().forEach((link) => {\n        const point = link.getPointForPort(port);\n        const { x: pointX, y: pointY } = point.getCoords();\n        point.setCoords({ x: pointX + x - oldX, y: pointY + y - oldY });\n      });\n    });\n\n    this.coords$.set({ x, y }).emit();\n  }\n\n  serialize(): SerializedNodeModel {\n    const serializedPorts = this.getPortsArray().map((port: P) => port.serialize());\n\n    return {\n      ...super.serialize(),\n      nodeType: this.getType(),\n      extras: this.getExtras(),\n      width: this.getWidth(),\n      height: this.getHeight(),\n      ...this.getCoords(),\n      ports: serializedPorts\n    };\n  }\n\n  // TODO: override selectionChanges and replace this with it (convert to rx)\n  getSelectedEntities() {\n    let entities = super.getSelectedEntities();\n\n    // add the points of each link that are selected here\n    if (this.getSelected()) {\n      this.getPorts().forEach((port) => {\n        const points = port.getLinksArray().map((link) => link.getPointForPort(port));\n        entities = entities.concat(points);\n      });\n    }\n\n    this.log('selectedEntities', entities);\n    return entities;\n  }\n\n  // TODO: map to BaseEvent\n  coordsChanges(): Observable<Coords> {\n    return this.coords$.value$;\n  }\n\n  selectCoords(): Observable<Coords> {\n    return this.coords$.value$;\n  }\n\n  selectX(): Observable<number> {\n    return this.coords$.select((coords) => coords.x);\n  }\n\n  selectY(): Observable<number> {\n    return this.coords$.select((coords) => coords.y);\n  }\n\n  /**\n   * Assign a port to the node and set the node as its getParent\n   * @returns the inserted port\n   */\n  addPort(port: P): P {\n    port.setParent(this);\n    this.ports$.add(port).emit();\n    return port;\n  }\n\n  removePort(portOrId: ID | P): string {\n    const portId = typeof portOrId === 'string' ? portOrId : portOrId.id;\n    this.ports$.remove(portId).emit();\n    return portId;\n  }\n\n  getPort(id: ID): P {\n    return this.ports$.get(id);\n  }\n\n  selectPorts(selector?: () => boolean | ID | ID[]): Observable<P[]> {\n    // TODO: implement selector\n    // TODO: create coerce func\n    return this.ports$.array$().pipe(this.withLog('selectPorts'));\n  }\n\n  getPorts(): EntityMap<P> {\n    return this.ports$.value;\n  }\n\n  getPortsArray(): P[] {\n    return this.ports$.array();\n  }\n\n  setDimensions(dimensions: Partial<Dimensions>) {\n    this.dimensions$.set({ ...this.getDimensions(), ...dimensions }).emit();\n  }\n\n  getDimensions(): Dimensions {\n    return this.dimensions$.value;\n  }\n\n  // TODO: return BaseEvent extension\n  dimensionChanges(): Observable<Dimensions> {\n    return this.dimensions$.select();\n  }\n\n  getHeight(): number {\n    return this.getDimensions().height;\n  }\n\n  setHeight(height: number) {\n    return this.setDimensions({ height });\n  }\n\n  getWidth(): number {\n    return this.getDimensions().width;\n  }\n\n  setWidth(width: number) {\n    return this.setDimensions({ width });\n  }\n\n  selectWidth(): Observable<number> {\n    return this.dimensions$.select((d) => d.width).pipe(this.withLog('selectWidth'));\n  }\n\n  selectHeight(): Observable<number> {\n    return this.dimensions$.select((d) => d.height).pipe(this.withLog('selectHeight'));\n  }\n\n  setExtras(extras: any) {\n    this.extras$.set(extras).emit();\n  }\n\n  getExtras() {\n    return this.extras$.value;\n  }\n\n  selectExtras<E = any>(selector?: (extra: E) => E[keyof E] | string | string[]): Observable<E> {\n    return this.extras$.select(selector);\n  }\n\n  destroy() {\n    super.destroy();\n    this.removeAllPorts();\n  }\n\n  removeAllPorts(): void {\n    this.ports$.clear().emit();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "nodeType",
                        "type": "string",
                        "defaultValue": "'default'"
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "optional": true
                    },
                    {
                        "name": "extras",
                        "type": "HashMap<any>",
                        "defaultValue": "{}"
                    },
                    {
                        "name": "x",
                        "type": "number",
                        "defaultValue": "0"
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "defaultValue": "0"
                    },
                    {
                        "name": "width",
                        "type": "number",
                        "defaultValue": "0"
                    },
                    {
                        "name": "height",
                        "type": "number",
                        "defaultValue": "0"
                    },
                    {
                        "name": "logPrefix",
                        "type": "string",
                        "defaultValue": "'[Node]'"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "nodeType",
                        "type": "string",
                        "defaultValue": "'default'",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "extras",
                        "type": "HashMap<any>",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "x",
                        "type": "number",
                        "defaultValue": "0",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "defaultValue": "0",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "width",
                        "type": "number",
                        "defaultValue": "0",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "height",
                        "type": "number",
                        "defaultValue": "0",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logPrefix",
                        "type": "string",
                        "defaultValue": "'[Node]'",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "coords$",
                    "defaultValue": "createValueState<Coords>({ x: 0, y: 0 }, this.entityPipe('coords'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "diagramEngine$",
                    "defaultValue": "createValueState<DiagramEngine>(null, this.entityPipe('diagramEngine'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "dimensions$",
                    "defaultValue": "createValueState<Dimensions>({ width: 0, height: 0 }, this.entityPipe('dimensions'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "extras$",
                    "defaultValue": "createValueState<any>({}, this.entityPipe('extras'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "ports$",
                    "defaultValue": "createEntityState<P>([], this.entityPipe('ports'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "hovered$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('HoveredChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "painted$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('PaintedChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parent$",
                    "defaultValue": "createValueState<E>(null, this.entityPipe('ParentsChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selected$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('SelectedChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "destroyed$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "locked$",
                    "defaultValue": "createValueState(false, this.entityPipe('locked'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "destroyed$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "locked$",
                    "defaultValue": "createValueState(false, this.entityPipe('locked'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "methods": [
                {
                    "name": "addPort",
                    "args": [
                        {
                            "name": "port",
                            "type": "P"
                        }
                    ],
                    "optional": false,
                    "returnType": "P",
                    "typeParameters": [],
                    "line": 117,
                    "description": "<p>Assign a port to the node and set the node as its getParent</p>\n",
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "P",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 3515,
                                "end": 3522,
                                "flags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>the inserted port</p>\n"
                        }
                    ]
                },
                {
                    "name": "coordsChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Coords>",
                    "typeParameters": [],
                    "line": 97
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 196
                },
                {
                    "name": "dimensionChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Dimensions>",
                    "typeParameters": [],
                    "line": 156
                },
                {
                    "name": "getCoords",
                    "args": [],
                    "optional": false,
                    "returnType": "Coords",
                    "typeParameters": [],
                    "line": 48
                },
                {
                    "name": "getDiagramEngine",
                    "args": [],
                    "optional": false,
                    "returnType": "DiagramEngine",
                    "typeParameters": [],
                    "line": 36
                },
                {
                    "name": "getDimensions",
                    "args": [],
                    "optional": false,
                    "returnType": "Dimensions",
                    "typeParameters": [],
                    "line": 151
                },
                {
                    "name": "getExtras",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 188
                },
                {
                    "name": "getHeight",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 160
                },
                {
                    "name": "getPort",
                    "args": [
                        {
                            "name": "id",
                            "type": "ID"
                        }
                    ],
                    "optional": false,
                    "returnType": "P",
                    "typeParameters": [],
                    "line": 129,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "ID",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPorts",
                    "args": [],
                    "optional": false,
                    "returnType": "EntityMap<P>",
                    "typeParameters": [],
                    "line": 139
                },
                {
                    "name": "getPortsArray",
                    "args": [],
                    "optional": false,
                    "returnType": "P[]",
                    "typeParameters": [],
                    "line": 143
                },
                {
                    "name": "getSelectedEntities",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 81
                },
                {
                    "name": "getWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 168
                },
                {
                    "name": "removeAllPorts",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 201
                },
                {
                    "name": "removePort",
                    "args": [
                        {
                            "name": "portOrId",
                            "type": "ID | P"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 123,
                    "jsdoctags": [
                        {
                            "name": "portOrId",
                            "type": "ID | P",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectCoords",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Coords>",
                    "typeParameters": [],
                    "line": 101
                },
                {
                    "name": "selectDiagramEngine",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<DiagramEngine>",
                    "typeParameters": [],
                    "line": 40
                },
                {
                    "name": "selectExtras",
                    "args": [
                        {
                            "name": "selector",
                            "type": "function",
                            "optional": true,
                            "function": [
                                {
                                    "name": "extra",
                                    "type": "E"
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<E>",
                    "typeParameters": [
                        "E"
                    ],
                    "line": 192,
                    "jsdoctags": [
                        {
                            "name": "selector",
                            "type": "function",
                            "optional": true,
                            "function": [
                                {
                                    "name": "extra",
                                    "type": "E"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectHeight",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 180
                },
                {
                    "name": "selectPorts",
                    "args": [
                        {
                            "name": "selector",
                            "type": "function",
                            "optional": true,
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<P[]>",
                    "typeParameters": [],
                    "line": 133,
                    "jsdoctags": [
                        {
                            "name": "selector",
                            "type": "function",
                            "optional": true,
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 176
                },
                {
                    "name": "selectX",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 105
                },
                {
                    "name": "selectY",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 109
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "SerializedNodeModel",
                    "typeParameters": [],
                    "line": 66
                },
                {
                    "name": "setCoords",
                    "args": [
                        {
                            "type": "Coords"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "jsdoctags": [
                        {
                            "type": "Coords",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDiagramEngine",
                    "args": [
                        {
                            "name": "diagramEngine",
                            "type": "DiagramEngine"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "jsdoctags": [
                        {
                            "name": "diagramEngine",
                            "type": "DiagramEngine",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDimensions",
                    "args": [
                        {
                            "name": "dimensions",
                            "type": "Partial<Dimensions>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "jsdoctags": [
                        {
                            "name": "dimensions",
                            "type": "Partial<Dimensions>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setExtras",
                    "args": [
                        {
                            "name": "extras",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 184,
                    "jsdoctags": [
                        {
                            "name": "extras",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setHeight",
                    "args": [
                        {
                            "name": "height",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 164,
                    "jsdoctags": [
                        {
                            "name": "height",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setWidth",
                    "args": [
                        {
                            "name": "width",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 172,
                    "jsdoctags": [
                        {
                            "name": "width",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 46,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getPainted",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 38,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getParent",
                    "args": [],
                    "optional": false,
                    "returnType": "E",
                    "typeParameters": [],
                    "line": 26,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 66,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelectedEntities",
                    "args": [],
                    "optional": false,
                    "returnType": "BaseModel[]",
                    "typeParameters": [],
                    "line": 82,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 62,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "paintChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<PaintedEvent>",
                    "typeParameters": [],
                    "line": 58,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parentChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ParentChangeEvent<E>>",
                    "typeParameters": [],
                    "line": 34,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 54,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectionChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SelectionEvent>",
                    "typeParameters": [],
                    "line": 78,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 70,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setHovered",
                    "args": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setPainted",
                    "args": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setParent",
                    "args": [
                        {
                            "name": "parent",
                            "type": "E"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "jsdoctags": [
                        {
                            "name": "parent",
                            "type": "E",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setSelected",
                    "args": [
                        {
                            "name": "selected",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "jsdoctags": [
                        {
                            "name": "selected",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 50,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 84,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 94,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 77,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 50,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 84,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 94,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 77,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "BaseModel",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PaintedEvent",
            "id": "class-PaintedEvent-0891b2f46b0f06f06af1483c5bb51095",
            "file": "libs/ngx-diagrams/src/lib/interfaces/event.interface.ts",
            "type": "class",
            "sourceCode": "import { BaseEntity } from '../base.entity';\nimport { ID, UID } from '../utils/tool-kit.util';\n\n// region events\nexport class BaseEvent<T extends BaseEntity> {\n  entity: T;\n  entityId: ID;\n  stopPropagation: () => any;\n  firing: boolean;\n  id: ID;\n  propogate: boolean;\n\n  constructor(entity: T, options?: any) {\n    this.id = UID();\n    this.entity = entity;\n    this.entityId = entity.id;\n    this.firing = true;\n    this.stopPropagation = () => (this.firing = false);\n    this.propogate = options ? options.propagate : null;\n  }\n}\nexport class LockEvent<T extends BaseEntity = BaseEntity> extends BaseEvent<T> {\n  locked: boolean;\n\n  constructor(entity: T, locked = false) {\n    super(entity);\n    this.locked = locked;\n  }\n}\nexport class ParentChangeEvent<\n  P extends BaseEntity = BaseEntity,\n  T extends BaseEntity = BaseEntity\n> extends BaseEvent<T> {\n  parent: P;\n\n  constructor(entity: T, parent: P) {\n    super(entity);\n    this.parent = parent;\n  }\n}\nexport class SelectionEvent<\n  T extends BaseEntity = BaseEntity\n> extends BaseEvent<T> {\n  isSelected: boolean;\n\n  constructor(entity: T, selected: boolean) {\n    super(entity);\n    this.isSelected = selected;\n  }\n}\nexport class PaintedEvent<T extends BaseEntity = BaseEntity> extends BaseEvent<\n  T\n> {\n  isPainted: boolean;\n\n  constructor(entity: T, painted = false) {\n    super(entity);\n    this.isPainted = painted;\n  }\n}\n// endregion\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "entity",
                        "type": "T"
                    },
                    {
                        "name": "painted",
                        "type": "",
                        "defaultValue": "false"
                    }
                ],
                "line": 54,
                "jsdoctags": [
                    {
                        "name": "entity",
                        "type": "T",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "painted",
                        "type": "",
                        "defaultValue": "false",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "isPainted",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "entity",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "BaseEvent"
                    }
                },
                {
                    "name": "entityId",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "inheritance": {
                        "file": "BaseEvent"
                    }
                },
                {
                    "name": "firing",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "inheritance": {
                        "file": "BaseEvent"
                    }
                },
                {
                    "name": "id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "inheritance": {
                        "file": "BaseEvent"
                    }
                },
                {
                    "name": "propogate",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "inheritance": {
                        "file": "BaseEvent"
                    }
                },
                {
                    "name": "stopPropagation",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "inheritance": {
                        "file": "BaseEvent"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "BaseEvent",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ParentChangeEvent",
            "id": "class-ParentChangeEvent-0891b2f46b0f06f06af1483c5bb51095",
            "file": "libs/ngx-diagrams/src/lib/interfaces/event.interface.ts",
            "type": "class",
            "sourceCode": "import { BaseEntity } from '../base.entity';\nimport { ID, UID } from '../utils/tool-kit.util';\n\n// region events\nexport class BaseEvent<T extends BaseEntity> {\n  entity: T;\n  entityId: ID;\n  stopPropagation: () => any;\n  firing: boolean;\n  id: ID;\n  propogate: boolean;\n\n  constructor(entity: T, options?: any) {\n    this.id = UID();\n    this.entity = entity;\n    this.entityId = entity.id;\n    this.firing = true;\n    this.stopPropagation = () => (this.firing = false);\n    this.propogate = options ? options.propagate : null;\n  }\n}\nexport class LockEvent<T extends BaseEntity = BaseEntity> extends BaseEvent<T> {\n  locked: boolean;\n\n  constructor(entity: T, locked = false) {\n    super(entity);\n    this.locked = locked;\n  }\n}\nexport class ParentChangeEvent<\n  P extends BaseEntity = BaseEntity,\n  T extends BaseEntity = BaseEntity\n> extends BaseEvent<T> {\n  parent: P;\n\n  constructor(entity: T, parent: P) {\n    super(entity);\n    this.parent = parent;\n  }\n}\nexport class SelectionEvent<\n  T extends BaseEntity = BaseEntity\n> extends BaseEvent<T> {\n  isSelected: boolean;\n\n  constructor(entity: T, selected: boolean) {\n    super(entity);\n    this.isSelected = selected;\n  }\n}\nexport class PaintedEvent<T extends BaseEntity = BaseEntity> extends BaseEvent<\n  T\n> {\n  isPainted: boolean;\n\n  constructor(entity: T, painted = false) {\n    super(entity);\n    this.isPainted = painted;\n  }\n}\n// endregion\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "entity",
                        "type": "T"
                    },
                    {
                        "name": "parent",
                        "type": "P"
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "entity",
                        "type": "T",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "parent",
                        "type": "P",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "parent",
                    "type": "P",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "entity",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "BaseEvent"
                    }
                },
                {
                    "name": "entityId",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "inheritance": {
                        "file": "BaseEvent"
                    }
                },
                {
                    "name": "firing",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "inheritance": {
                        "file": "BaseEvent"
                    }
                },
                {
                    "name": "id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "inheritance": {
                        "file": "BaseEvent"
                    }
                },
                {
                    "name": "propogate",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "inheritance": {
                        "file": "BaseEvent"
                    }
                },
                {
                    "name": "stopPropagation",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "inheritance": {
                        "file": "BaseEvent"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "BaseEvent",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PathFinding",
            "id": "class-PathFinding-8e5787661c4b05790a4446238f3de908",
            "file": "libs/ngx-diagrams/src/lib/plugins/smart-routing.plugin.ts",
            "type": "class",
            "sourceCode": "import { DiagramEngine } from '../services/engine.service';\nimport * as PF from 'pathfinding';\n\nexport const ROUTING_SCALING_FACTOR = 10;\n\nexport class PathFinding {\n  private pathFinderInstance:\n    | PF.JPFNeverMoveDiagonally\n    | PF.JPFAlwaysMoveDiagonally\n    | PF.JPFMoveDiagonallyIfNoObstacles\n    | PF.JPFMoveDiagonallyIfAtMostOneObstacle;\n\n  constructor(\n    private diagramEngine: DiagramEngine,\n    heuristic = PF.Heuristic.manhattan\n  ) {\n    this.pathFinderInstance = new PF.AStarFinder({\n      heuristic,\n      diagonalMovement: PF.DiagonalMovement.Always,\n      weight: 0,\n    });\n  }\n\n  /**\n   * Taking as argument a fully unblocked walking matrix, this method\n   * finds a direct path from point A to B.\n   */\n  calculateDirectPath(\n    from: {\n      x: number;\n      y: number;\n    },\n    to: {\n      x: number;\n      y: number;\n    }\n  ): number[][] {\n    const matrix = this.diagramEngine.getCanvasMatrix();\n    const grid = new PF.Grid(matrix);\n\n    const fromX = this.diagramEngine.translateRoutingX(\n      Math.floor(from.x / ROUTING_SCALING_FACTOR)\n    );\n    const toX = this.diagramEngine.translateRoutingX(\n      Math.floor(to.x / ROUTING_SCALING_FACTOR)\n    );\n    const fromY = this.diagramEngine.translateRoutingX(\n      Math.floor(from.y / ROUTING_SCALING_FACTOR)\n    );\n    const toY = this.diagramEngine.translateRoutingX(\n      Math.floor(to.y / ROUTING_SCALING_FACTOR)\n    );\n\n    const path = this.pathFinderInstance.findPath(fromX, fromY, toX, toY, grid);\n    return path;\n  }\n\n  /**\n   * Using @link{#calculateDirectPath}'s result as input, we here\n   * determine the first walkable point found in the matrix that includes\n   * blocked paths.\n   */\n  calculateLinkStartEndCoords(\n    matrix: number[][],\n    path: number[][]\n  ): {\n    start: {\n      x: number;\n      y: number;\n    };\n    end: {\n      x: number;\n      y: number;\n    };\n    pathToStart: number[][];\n    pathToEnd: number[][];\n  } {\n    const startIndex = path.findIndex(\n      (point) => matrix[point[1]][point[0]] === 0\n    );\n    const endIndex =\n      path.length -\n      1 -\n      path\n        .slice()\n        .reverse()\n        .findIndex((point) => matrix[point[1]][point[0]] === 0);\n\n    // are we trying to create a path exclusively through blocked areas?\n    // if so, let's fallback to the linear routing\n    if (startIndex === -1 || endIndex === -1) {\n      return undefined;\n    }\n\n    const pathToStart = path.slice(0, startIndex);\n    const pathToEnd = path.slice(endIndex);\n\n    return {\n      start: {\n        x: path[startIndex][0],\n        y: path[startIndex][1],\n      },\n      end: {\n        x: path[endIndex][0],\n        y: path[endIndex][1],\n      },\n      pathToStart,\n      pathToEnd,\n    };\n  }\n\n  /**\n   * Puts everything together: merges the paths from/to the centre of the ports,\n   * with the path calculated around other elements.\n   */\n  calculateDynamicPath(\n    routingMatrix: number[][],\n    start: {\n      x: number;\n      y: number;\n    },\n    end: {\n      x: number;\n      y: number;\n    },\n    pathToStart: number[][],\n    pathToEnd: number[][]\n  ) {\n    // generate the path based on the matrix with obstacles\n    const grid = new PF.Grid(routingMatrix);\n    const dynamicPath = this.pathFinderInstance.findPath(\n      start.x,\n      start.y,\n      end.x,\n      end.y,\n      grid\n    );\n\n    // aggregate everything to have the calculated path ready for rendering\n    const pathCoords = pathToStart\n      .concat(dynamicPath, pathToEnd)\n      .map((coords) => [\n        this.diagramEngine.translateRoutingX(coords[0], true),\n        this.diagramEngine.translateRoutingY(coords[1], true),\n      ]);\n\n    return PF.Util.compressPath(pathCoords);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine"
                    },
                    {
                        "name": "heuristic",
                        "type": "",
                        "defaultValue": "PF.Heuristic.manhattan"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "heuristic",
                        "type": "",
                        "defaultValue": "PF.Heuristic.manhattan",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "pathFinderInstance",
                    "type": "PF.JPFNeverMoveDiagonally | PF.JPFAlwaysMoveDiagonally | PF.JPFMoveDiagonallyIfNoObstacles | PF.JPFMoveDiagonallyIfAtMostOneObstacle",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "calculateDirectPath",
                    "args": [
                        {
                            "name": "from",
                            "type": "literal type"
                        },
                        {
                            "name": "to",
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "[][]",
                    "typeParameters": [],
                    "line": 28,
                    "description": "<p>Taking as argument a fully unblocked walking matrix, this method\nfinds a direct path from point A to B.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "from",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "to",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calculateDynamicPath",
                    "args": [
                        {
                            "name": "routingMatrix",
                            "type": "number[][]"
                        },
                        {
                            "name": "start",
                            "type": "literal type"
                        },
                        {
                            "name": "end",
                            "type": "literal type"
                        },
                        {
                            "name": "pathToStart",
                            "type": "number[][]"
                        },
                        {
                            "name": "pathToEnd",
                            "type": "number[][]"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 116,
                    "description": "<p>Puts everything together: merges the paths from/to the centre of the ports,\nwith the path calculated around other elements.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "routingMatrix",
                            "type": "number[][]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "start",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "end",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pathToStart",
                            "type": "number[][]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pathToEnd",
                            "type": "number[][]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calculateLinkStartEndCoords",
                    "args": [
                        {
                            "name": "matrix",
                            "type": "number[][]"
                        },
                        {
                            "name": "path",
                            "type": "number[][]"
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 63,
                    "description": "<p>Using @link{#calculateDirectPath}&#39;s result as input, we here\ndetermine the first walkable point found in the matrix that includes\nblocked paths.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "matrix",
                            "type": "number[][]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "type": "number[][]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PointModel",
            "id": "class-PointModel-4369f0bc1f3fb0284a14b3d7942b4f76",
            "file": "libs/ngx-diagrams/src/lib/models/point.model.ts",
            "type": "class",
            "sourceCode": "import { Observable } from 'rxjs';\nimport { Coords } from '../interfaces/coords.interface';\nimport { SerializedPointModel } from '../interfaces/serialization.interface';\nimport { createValueState, ValueState } from '../state/state';\nimport { BaseModel } from './base.model';\nimport { LinkModel } from './link.model';\n\nexport class PointModel extends BaseModel<LinkModel> {\n  protected coords$: ValueState<Coords>;\n\n  constructor(link: LinkModel, coords: Coords, id?: string, logPrefix = '[Point]') {\n    super(link.getType(), id, logPrefix);\n    this.coords$ = createValueState(coords, this.entityPipe('coords'));\n    this.setParent(link);\n  }\n\n  serialize(): SerializedPointModel {\n    return {\n      ...super.serialize(),\n      coords: this.getCoords()\n    };\n  }\n\n  isConnectedToPort() {\n    return this.getParent().getPortForPoint(this) !== null;\n  }\n\n  getLink(): LinkModel {\n    return this.getParent();\n  }\n\n  destroy() {\n    if (this.getParent) {\n      this.getParent().removePoint(this);\n    }\n\n    super.destroy();\n  }\n\n  setCoords(newCoords: Partial<Coords>) {\n    this.coords$.set({ ...this.getCoords(), ...newCoords }).emit();\n  }\n\n  selectCoords(): Observable<Coords> {\n    return this.coords$.value$;\n  }\n\n  getCoords(): Coords {\n    return this.coords$.value;\n  }\n\n  selectX(): Observable<number> {\n    return this.coords$.select((coords) => coords.x);\n  }\n\n  selectY(): Observable<number> {\n    return this.coords$.select((coords) => coords.y);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "link",
                        "type": "LinkModel"
                    },
                    {
                        "name": "coords",
                        "type": "Coords"
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "optional": true
                    },
                    {
                        "name": "logPrefix",
                        "type": "string",
                        "defaultValue": "'[Point]'"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "link",
                        "type": "LinkModel",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "coords",
                        "type": "Coords",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logPrefix",
                        "type": "string",
                        "defaultValue": "'[Point]'",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "coords$",
                    "type": "ValueState<Coords>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "hovered$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('HoveredChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "painted$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('PaintedChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parent$",
                    "defaultValue": "createValueState<E>(null, this.entityPipe('ParentsChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selected$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('SelectedChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "destroyed$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "locked$",
                    "defaultValue": "createValueState(false, this.entityPipe('locked'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "destroyed$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "locked$",
                    "defaultValue": "createValueState(false, this.entityPipe('locked'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "methods": [
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                },
                {
                    "name": "getCoords",
                    "args": [],
                    "optional": false,
                    "returnType": "Coords",
                    "typeParameters": [],
                    "line": 48
                },
                {
                    "name": "getLink",
                    "args": [],
                    "optional": false,
                    "returnType": "LinkModel",
                    "typeParameters": [],
                    "line": 28
                },
                {
                    "name": "isConnectedToPort",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 24
                },
                {
                    "name": "selectCoords",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Coords>",
                    "typeParameters": [],
                    "line": 44
                },
                {
                    "name": "selectX",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 52
                },
                {
                    "name": "selectY",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 56
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "SerializedPointModel",
                    "typeParameters": [],
                    "line": 17
                },
                {
                    "name": "setCoords",
                    "args": [
                        {
                            "name": "newCoords",
                            "type": "Partial<Coords>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "jsdoctags": [
                        {
                            "name": "newCoords",
                            "type": "Partial<Coords>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 46,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getPainted",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 38,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getParent",
                    "args": [],
                    "optional": false,
                    "returnType": "E",
                    "typeParameters": [],
                    "line": 26,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 66,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelectedEntities",
                    "args": [],
                    "optional": false,
                    "returnType": "BaseModel[]",
                    "typeParameters": [],
                    "line": 82,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 62,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "paintChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<PaintedEvent>",
                    "typeParameters": [],
                    "line": 58,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parentChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ParentChangeEvent<E>>",
                    "typeParameters": [],
                    "line": 34,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 54,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectionChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SelectionEvent>",
                    "typeParameters": [],
                    "line": 78,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 70,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setHovered",
                    "args": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setPainted",
                    "args": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setParent",
                    "args": [
                        {
                            "name": "parent",
                            "type": "E"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "jsdoctags": [
                        {
                            "name": "parent",
                            "type": "E",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setSelected",
                    "args": [
                        {
                            "name": "selected",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "jsdoctags": [
                        {
                            "name": "selected",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 50,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 84,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 94,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 77,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 50,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 84,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 94,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 77,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "BaseModel",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PortModel",
            "id": "class-PortModel-c4cf8e89f103ce74a03cc959acd4a741",
            "file": "libs/ngx-diagrams/src/lib/models/port.model.ts",
            "type": "class",
            "sourceCode": "import { Observable } from 'rxjs';\nimport { createEntityState, createValueState } from '../state/state';\nimport { EntityMap, ID, isString } from '../utils';\nimport { BaseModel } from './base.model';\nimport { LinkModel } from './link.model';\nimport { NodeModel } from './node.model';\n\nexport class PortModel extends BaseModel<NodeModel> {\n  // TODO: convert all primitives to subjects\n  protected name: string;\n  protected maximumLinks: number;\n  protected linkType: string;\n\n  protected links$ = createEntityState<LinkModel>([], this.entityPipe('links'));\n  protected x$ = createValueState(0, this.entityPipe('x'));\n  protected y$ = createValueState(0, this.entityPipe('y'));\n  protected width$ = createValueState(0, this.entityPipe('y'));\n  protected height$ = createValueState(0, this.entityPipe('y'));\n  protected magnetic$ = createValueState(true, this.entityPipe('magnetic'));\n  protected canCreateLinks$ = createValueState(true, this.entityPipe('magnetic'));\n\n  constructor(\n    name: string,\n    type?: string,\n    id?: string,\n    maximumLinks?: number,\n    linkType?: string,\n    magnetic = true,\n    logPrefix = '[Port]'\n  ) {\n    super(type, id, logPrefix);\n    this.name = name;\n    this.maximumLinks = maximumLinks;\n    this.linkType = linkType;\n    this.setMagnetic(magnetic);\n  }\n\n  serialize() {\n    return {\n      ...super.serialize(),\n      name: this.getName(),\n      linkType: this.getLinkType(),\n      maximumLinks: this.getMaximumLinks(),\n      type: this.getType(),\n      magnetic: this.getMagnetic(),\n      height: this.getHeight(),\n      width: this.getWidth(),\n      canCreateLinks: this.getCanCreateLinks(),\n      ...this.getCoords()\n    };\n  }\n\n  getNode() {\n    return this.getParent();\n  }\n\n  getName() {\n    return this.name;\n  }\n\n  getCanCreateLinks(): boolean {\n    const numberOfLinks = this.getLinks().size;\n\n    if (this.maximumLinks && numberOfLinks >= this.maximumLinks) {\n      return false;\n    }\n\n    return this.canCreateLinks$.value;\n  }\n\n  getCoords() {\n    return { x: this.getX(), y: this.getY() };\n  }\n\n  selectCanCreateLinks(): Observable<boolean> {\n    return this.canCreateLinks$.value$;\n  }\n\n  setCanCreateLinks(value: boolean) {\n    this.canCreateLinks$.set(value).emit();\n  }\n\n  getMagnetic(): boolean {\n    return this.magnetic$.value;\n  }\n\n  selectMagnetic(): Observable<boolean> {\n    return this.magnetic$.value$;\n  }\n\n  setMagnetic(magnetic: boolean) {\n    this.magnetic$.set(magnetic).emit();\n  }\n\n  selectX(): Observable<number> {\n    return this.x$.value$;\n  }\n\n  selectY(): Observable<number> {\n    return this.y$.value$;\n  }\n\n  getY() {\n    return this.y$.value;\n  }\n\n  getX() {\n    return this.x$.value;\n  }\n\n  getHeight() {\n    return this.height$.value;\n  }\n\n  getWidth() {\n    return this.width$.value;\n  }\n\n  getMaximumLinks(): number {\n    return this.maximumLinks;\n  }\n\n  setMaximumLinks(maximumLinks: number) {\n    this.maximumLinks = maximumLinks;\n  }\n\n  getLinkType() {\n    return this.linkType;\n  }\n\n  setLinkType(type: string) {\n    this.linkType = type;\n  }\n\n  removeLink(linkOrId: ID | LinkModel) {\n    const linkId = isString(linkOrId) ? linkOrId : linkOrId.id;\n    this.links$.remove(linkId, false).emit();\n  }\n\n  addLink(link: LinkModel) {\n    this.links$.add(link).emit();\n  }\n\n  getLinks(): EntityMap<LinkModel> {\n    return this.links$.value;\n  }\n\n  getLinksArray(): LinkModel[] {\n    return this.links$.array();\n  }\n\n  selectLinks(): Observable<EntityMap<LinkModel>> {\n    return this.links$.value$;\n  }\n\n  updateCoords({ x, y, width, height }: { x: number; y: number; width: number; height: number }) {\n    this.x$.set(x).emit();\n    this.y$.set(y).emit();\n    this.width$.set(width).emit();\n    this.height$.set(height).emit();\n  }\n\n  canLinkToPort(port: PortModel): boolean {\n    return true;\n  }\n\n  isLocked() {\n    return super.getLocked();\n  }\n\n  createLinkModel() {\n    if (this.getCanCreateLinks()) {\n      return new LinkModel();\n    }\n  }\n\n  destroy() {\n    super.destroy();\n    this.links$.clear().emit();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "type": "string",
                        "optional": true
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "optional": true
                    },
                    {
                        "name": "maximumLinks",
                        "type": "number",
                        "optional": true
                    },
                    {
                        "name": "linkType",
                        "type": "string",
                        "optional": true
                    },
                    {
                        "name": "magnetic",
                        "type": "",
                        "defaultValue": "true"
                    },
                    {
                        "name": "logPrefix",
                        "type": "string",
                        "defaultValue": "'[Port]'"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "type",
                        "type": "string",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "maximumLinks",
                        "type": "number",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "linkType",
                        "type": "string",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "magnetic",
                        "type": "",
                        "defaultValue": "true",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logPrefix",
                        "type": "string",
                        "defaultValue": "'[Port]'",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "canCreateLinks$",
                    "defaultValue": "createValueState(true, this.entityPipe('magnetic'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "height$",
                    "defaultValue": "createValueState(0, this.entityPipe('y'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "links$",
                    "defaultValue": "createEntityState<LinkModel>([], this.entityPipe('links'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "linkType",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "magnetic$",
                    "defaultValue": "createValueState(true, this.entityPipe('magnetic'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "maximumLinks",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "width$",
                    "defaultValue": "createValueState(0, this.entityPipe('y'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "x$",
                    "defaultValue": "createValueState(0, this.entityPipe('x'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "y$",
                    "defaultValue": "createValueState(0, this.entityPipe('y'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "hovered$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('HoveredChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "painted$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('PaintedChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parent$",
                    "defaultValue": "createValueState<E>(null, this.entityPipe('ParentsChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selected$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('SelectedChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "destroyed$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "locked$",
                    "defaultValue": "createValueState(false, this.entityPipe('locked'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "destroyed$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "locked$",
                    "defaultValue": "createValueState(false, this.entityPipe('locked'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "methods": [
                {
                    "name": "addLink",
                    "args": [
                        {
                            "name": "link",
                            "type": "LinkModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "LinkModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "canLinkToPort",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 163,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createLinkModel",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 171
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 177
                },
                {
                    "name": "getCanCreateLinks",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 61
                },
                {
                    "name": "getCoords",
                    "args": [],
                    "optional": false,
                    "returnType": "{ x: any; y: any; }",
                    "typeParameters": [],
                    "line": 71
                },
                {
                    "name": "getHeight",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 111
                },
                {
                    "name": "getLinks",
                    "args": [],
                    "optional": false,
                    "returnType": "EntityMap<LinkModel>",
                    "typeParameters": [],
                    "line": 144
                },
                {
                    "name": "getLinksArray",
                    "args": [],
                    "optional": false,
                    "returnType": "LinkModel[]",
                    "typeParameters": [],
                    "line": 148
                },
                {
                    "name": "getLinkType",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 127
                },
                {
                    "name": "getMagnetic",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 83
                },
                {
                    "name": "getMaximumLinks",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 119
                },
                {
                    "name": "getName",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 57
                },
                {
                    "name": "getNode",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 53
                },
                {
                    "name": "getWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 115
                },
                {
                    "name": "getX",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 107
                },
                {
                    "name": "getY",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 103
                },
                {
                    "name": "isLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 167
                },
                {
                    "name": "removeLink",
                    "args": [
                        {
                            "name": "linkOrId",
                            "type": "ID | LinkModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "jsdoctags": [
                        {
                            "name": "linkOrId",
                            "type": "ID | LinkModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectCanCreateLinks",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 75
                },
                {
                    "name": "selectLinks",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<EntityMap<LinkModel>>",
                    "typeParameters": [],
                    "line": 152
                },
                {
                    "name": "selectMagnetic",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 87
                },
                {
                    "name": "selectX",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 95
                },
                {
                    "name": "selectY",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 99
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38
                },
                {
                    "name": "setCanCreateLinks",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setLinkType",
                    "args": [
                        {
                            "name": "type",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setMagnetic",
                    "args": [
                        {
                            "name": "magnetic",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "jsdoctags": [
                        {
                            "name": "magnetic",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setMaximumLinks",
                    "args": [
                        {
                            "name": "maximumLinks",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "jsdoctags": [
                        {
                            "name": "maximumLinks",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateCoords",
                    "args": [
                        {
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 156,
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 46,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getPainted",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 38,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getParent",
                    "args": [],
                    "optional": false,
                    "returnType": "E",
                    "typeParameters": [],
                    "line": 26,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 66,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelectedEntities",
                    "args": [],
                    "optional": false,
                    "returnType": "BaseModel[]",
                    "typeParameters": [],
                    "line": 82,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 62,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "paintChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<PaintedEvent>",
                    "typeParameters": [],
                    "line": 58,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parentChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ParentChangeEvent<E>>",
                    "typeParameters": [],
                    "line": 34,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 54,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectionChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SelectionEvent>",
                    "typeParameters": [],
                    "line": 78,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 70,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setHovered",
                    "args": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setPainted",
                    "args": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setParent",
                    "args": [
                        {
                            "name": "parent",
                            "type": "E"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "jsdoctags": [
                        {
                            "name": "parent",
                            "type": "E",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setSelected",
                    "args": [
                        {
                            "name": "selected",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "jsdoctags": [
                        {
                            "name": "selected",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 50,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 84,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 94,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 77,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 50,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 84,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 94,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 77,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "BaseModel",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SelectingAction",
            "id": "class-SelectingAction-9eea427098a28553b2f8f88475297282",
            "file": "libs/ngx-diagrams/src/lib/actions/selecting.action.ts",
            "type": "class",
            "sourceCode": "import { BaseAction } from './base.action';\nimport { DiagramModel } from '../models/diagram.model';\nimport { Coords } from '../interfaces/coords.interface';\n\nexport class SelectingAction extends BaseAction {\n  mouseX2: number;\n  mouseY2: number;\n\n  dimensions: {\n    top: number;\n    left: number;\n    width: number;\n    height: number;\n    right: number;\n    bottom: number;\n  };\n\n  constructor(mouseX: number, mouseY: number) {\n    super(mouseX, mouseY);\n    this.mouseX2 = mouseX;\n    this.mouseY2 = mouseY;\n  }\n\n  getBoxDimensions() {\n    this.dimensions = {\n      left: this.mouseX2 > this.mouseX ? this.mouseX : this.mouseX2,\n      top: this.mouseY2 > this.mouseY ? this.mouseY : this.mouseY2,\n      width: Math.abs(this.mouseX2 - this.mouseX),\n      height: Math.abs(this.mouseY2 - this.mouseY),\n      right: this.mouseX2 < this.mouseX ? this.mouseX : this.mouseX2,\n      bottom: this.mouseY2 < this.mouseY ? this.mouseY : this.mouseY2,\n    };\n    return this.dimensions;\n  }\n\n  containsElement({ x, y }: Coords, diagramModel: DiagramModel): boolean {\n    const z = diagramModel.getZoomLevel() / 100.0;\n    const dimensions = this.getBoxDimensions();\n\n    return (\n      x * z + diagramModel.getOffsetX() > dimensions.left &&\n      x * z + diagramModel.getOffsetX() < dimensions.right &&\n      y * z + diagramModel.getOffsetY() > dimensions.top &&\n      y * z + diagramModel.getOffsetY() < dimensions.bottom\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "mouseX",
                        "type": "number"
                    },
                    {
                        "name": "mouseY",
                        "type": "number"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "mouseX",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mouseY",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "dimensions",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "mouseX2",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "mouseY2",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "mouseX",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "inheritance": {
                        "file": "BaseAction"
                    }
                },
                {
                    "name": "mouseY",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "inheritance": {
                        "file": "BaseAction"
                    }
                },
                {
                    "name": "ms",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "inheritance": {
                        "file": "BaseAction"
                    }
                }
            ],
            "methods": [
                {
                    "name": "containsElement",
                    "args": [
                        {
                            "type": "Coords"
                        },
                        {
                            "name": "diagramModel",
                            "type": "DiagramModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 36,
                    "jsdoctags": [
                        {
                            "type": "Coords",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "diagramModel",
                            "type": "DiagramModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBoxDimensions",
                    "args": [],
                    "optional": false,
                    "returnType": "{ top: number; left: number; width: number; height: number; right: number; bottom: number; }",
                    "typeParameters": [],
                    "line": 24
                }
            ],
            "indexSignatures": [],
            "extends": "BaseAction",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SelectionEvent",
            "id": "class-SelectionEvent-0891b2f46b0f06f06af1483c5bb51095",
            "file": "libs/ngx-diagrams/src/lib/interfaces/event.interface.ts",
            "type": "class",
            "sourceCode": "import { BaseEntity } from '../base.entity';\nimport { ID, UID } from '../utils/tool-kit.util';\n\n// region events\nexport class BaseEvent<T extends BaseEntity> {\n  entity: T;\n  entityId: ID;\n  stopPropagation: () => any;\n  firing: boolean;\n  id: ID;\n  propogate: boolean;\n\n  constructor(entity: T, options?: any) {\n    this.id = UID();\n    this.entity = entity;\n    this.entityId = entity.id;\n    this.firing = true;\n    this.stopPropagation = () => (this.firing = false);\n    this.propogate = options ? options.propagate : null;\n  }\n}\nexport class LockEvent<T extends BaseEntity = BaseEntity> extends BaseEvent<T> {\n  locked: boolean;\n\n  constructor(entity: T, locked = false) {\n    super(entity);\n    this.locked = locked;\n  }\n}\nexport class ParentChangeEvent<\n  P extends BaseEntity = BaseEntity,\n  T extends BaseEntity = BaseEntity\n> extends BaseEvent<T> {\n  parent: P;\n\n  constructor(entity: T, parent: P) {\n    super(entity);\n    this.parent = parent;\n  }\n}\nexport class SelectionEvent<\n  T extends BaseEntity = BaseEntity\n> extends BaseEvent<T> {\n  isSelected: boolean;\n\n  constructor(entity: T, selected: boolean) {\n    super(entity);\n    this.isSelected = selected;\n  }\n}\nexport class PaintedEvent<T extends BaseEntity = BaseEntity> extends BaseEvent<\n  T\n> {\n  isPainted: boolean;\n\n  constructor(entity: T, painted = false) {\n    super(entity);\n    this.isPainted = painted;\n  }\n}\n// endregion\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "entity",
                        "type": "T"
                    },
                    {
                        "name": "selected",
                        "type": "boolean"
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "entity",
                        "type": "T",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "selected",
                        "type": "boolean",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "isSelected",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "entity",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "BaseEvent"
                    }
                },
                {
                    "name": "entityId",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "inheritance": {
                        "file": "BaseEvent"
                    }
                },
                {
                    "name": "firing",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "inheritance": {
                        "file": "BaseEvent"
                    }
                },
                {
                    "name": "id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "inheritance": {
                        "file": "BaseEvent"
                    }
                },
                {
                    "name": "propogate",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "inheritance": {
                        "file": "BaseEvent"
                    }
                },
                {
                    "name": "stopPropagation",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "inheritance": {
                        "file": "BaseEvent"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "BaseEvent",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TemplateVarContext",
            "id": "class-TemplateVarContext-d66dc8c53a1644380b31fbd6e11fa34b",
            "file": "libs/ngx-diagrams/src/lib/utils/template-var.directive.ts",
            "type": "class",
            "sourceCode": "import {\n  Directive,\n  EmbeddedViewRef,\n  Input,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\n\nclass TemplateVarContext {\n  $implicit: any;\n  templateVar: any;\n}\n\n@Directive({\n  selector: '[templateVar]',\n})\nexport class TemplateVarDirective {\n  view: EmbeddedViewRef<any>;\n\n  protected context = new TemplateVarContext();\n\n  @Input()\n  set templateVar(context: any) {\n    this.context.$implicit = this.context.templateVar = context;\n    this.updateView();\n  }\n\n  constructor(\n    protected vcRef: ViewContainerRef,\n    protected templateRef: TemplateRef<any>\n  ) {}\n\n  updateView() {\n    if (!this.view) {\n      this.vcRef.clear();\n      this.view = this.vcRef.createEmbeddedView(this.templateRef, this.context);\n    } else {\n      this.view.markForCheck();\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "$implicit",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "templateVar",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ValueState",
            "id": "class-ValueState-c5c9ec0689790bb9f304685a3503ca84",
            "file": "libs/ngx-diagrams/src/lib/state/state.ts",
            "type": "class",
            "sourceCode": "import { BehaviorSubject, MonoTypeOperatorFunction, Observable, OperatorFunction } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { BaseEntity } from '../base.entity';\nimport { ID, isArray, mapToEntries } from '../utils';\nimport { EntityMap, Entries, HashMap } from '../utils/types';\n\nexport class ValueState<T> {\n  protected readonly stream$: BehaviorSubject<T>;\n\n  readonly value$: Observable<T>;\n\n  constructor(value?: T, operator?: OperatorFunction<any, any>) {\n    this.stream$ = new BehaviorSubject(value);\n    this.value$ = operator ? this.stream$.pipe(operator) : this.stream$.asObservable();\n  }\n\n  get value(): T {\n    return this.stream$.getValue();\n  }\n\n  set(value: T): ValueState<T> {\n    this.stream$.next(value);\n    return this;\n  }\n\n  emit(): void {\n    this.stream$.next(this.value);\n  }\n\n  select(): Observable<T>;\n  select(project: (value: T) => T): Observable<T>;\n  select<R>(project: (value: T) => R): Observable<R>;\n  select<R>(project?: ((value: T) => T) | ((value: T) => R)): Observable<T | R> {\n    const mapFn = project || ((v) => v);\n    return this.value$.pipe(\n      map((value) => mapFn(value)),\n      distinctUntilChanged()\n    );\n  }\n}\n\nexport function createValueState<T>(value: T, operator?: OperatorFunction<any, any>): ValueState<T> {\n  return new ValueState<T>(value, operator);\n}\n\nexport class EntityState<T extends BaseEntity> extends ValueState<EntityMap<T>> {\n  protected stream$: BehaviorSubject<EntityMap<T>>;\n\n  value$: Observable<EntityMap<T>>;\n\n  constructor(value?: EntityMap<T>, entityPipe?: MonoTypeOperatorFunction<EntityMap<T>>) {\n    super(value, entityPipe);\n  }\n\n  destroy() {\n    this.clear();\n    this.stream$ = null;\n    this.value$ = null;\n  }\n\n  clear(destroy = true) {\n    if (destroy) {\n      this.forEach((entity) => entity.destroy());\n    }\n\n    this.value.clear();\n    return this;\n  }\n\n  get(id: ID): T {\n    return this.value.get(id);\n  }\n\n  has(id: ID): boolean {\n    return this.value.has(id);\n  }\n\n  add(entity: T): EntityState<T> {\n    this.value.set(entity.id, entity);\n    return this;\n  }\n\n  addMany(entities: T[]): EntityState<T> {\n    for (const entity of entities) {\n      this.add(entity);\n    }\n    return this;\n  }\n\n  remove(id: ID, destroy = true): EntityState<T> {\n    if (destroy) {\n      this.value.get(id)?.destroy();\n    }\n\n    this.value.delete(id);\n    return this;\n  }\n\n  array(): T[] {\n    return Array.from(this.value.values());\n  }\n\n  array$(): Observable<T[]> {\n    return this.select((value) => Array.from(value.values()));\n  }\n\n  forEach(cb: (value: T, key: string, map: EntityMap<T>) => void): void {\n    this.value.forEach(cb);\n  }\n\n  map<R = any>(cb: (value: T, index: number, array: T[]) => R): R[] {\n    return this.array().map(cb);\n  }\n}\n\nexport function createEntityState<T extends BaseEntity>(\n  value: HashMap<T> | Entries<T> = [],\n  entityPipe: MonoTypeOperatorFunction<Map<ID, T>>\n): EntityState<T> {\n  if (isArray(value)) {\n    return new EntityState(new Map(value), entityPipe);\n  } else {\n    return new EntityState(new Map(mapToEntries(value)), entityPipe);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "value",
                        "type": "T",
                        "optional": true
                    },
                    {
                        "name": "operator",
                        "type": "OperatorFunction<any | any>",
                        "optional": true
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "value",
                        "type": "T",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "operator",
                        "type": "OperatorFunction<any | any>",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "stream$",
                    "type": "BehaviorSubject<T>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        113,
                        132
                    ]
                },
                {
                    "name": "value$",
                    "type": "Observable<T>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [
                {
                    "name": "emit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "select",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [],
                    "line": 30
                },
                {
                    "name": "select",
                    "args": [
                        {
                            "name": "project",
                            "type": "function",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "T"
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [],
                    "line": 31,
                    "jsdoctags": [
                        {
                            "name": "project",
                            "type": "function",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "T"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "select",
                    "args": [
                        {
                            "name": "project",
                            "type": "function",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "T"
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<R>",
                    "typeParameters": [
                        "R"
                    ],
                    "line": 32,
                    "jsdoctags": [
                        {
                            "name": "project",
                            "type": "function",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "T"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "select",
                    "args": [
                        {
                            "name": "project",
                            "type": " | ",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T | R>",
                    "typeParameters": [
                        "R"
                    ],
                    "line": 33,
                    "jsdoctags": [
                        {
                            "name": "project",
                            "type": " | ",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "set",
                    "args": [
                        {
                            "name": "value",
                            "type": "T"
                        }
                    ],
                    "optional": false,
                    "returnType": "ValueState<T>",
                    "typeParameters": [],
                    "line": 21,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "accessors": {
                "value": {
                    "name": "value",
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "T",
                        "line": 17
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "TemplateVarDirective",
            "id": "directive-TemplateVarDirective-d66dc8c53a1644380b31fbd6e11fa34b",
            "file": "libs/ngx-diagrams/src/lib/utils/template-var.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import {\n  Directive,\n  EmbeddedViewRef,\n  Input,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\n\nclass TemplateVarContext {\n  $implicit: any;\n  templateVar: any;\n}\n\n@Directive({\n  selector: '[templateVar]',\n})\nexport class TemplateVarDirective {\n  view: EmbeddedViewRef<any>;\n\n  protected context = new TemplateVarContext();\n\n  @Input()\n  set templateVar(context: any) {\n    this.context.$implicit = this.context.templateVar = context;\n    this.updateView();\n  }\n\n  constructor(\n    protected vcRef: ViewContainerRef,\n    protected templateRef: TemplateRef<any>\n  ) {}\n\n  updateView() {\n    if (!this.view) {\n      this.vcRef.clear();\n      this.view = this.vcRef.createEmbeddedView(this.templateRef, this.context);\n    } else {\n      this.view.markForCheck();\n    }\n  }\n}\n",
            "selector": "[templateVar]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "templateVar",
                    "line": 23,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "context",
                    "defaultValue": "new TemplateVarContext()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "view",
                    "type": "EmbeddedViewRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "updateView",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "vcRef",
                        "type": "ViewContainerRef"
                    },
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>"
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "vcRef",
                        "type": "ViewContainerRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "templateVar": {
                    "name": "templateVar",
                    "setSignature": {
                        "name": "templateVar",
                        "type": "void",
                        "args": [
                            {
                                "name": "context",
                                "type": "any"
                            }
                        ],
                        "returnType": "void",
                        "line": 23,
                        "jsdoctags": [
                            {
                                "name": "context",
                                "type": "any",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        }
    ],
    "components": [
        {
            "name": "AutoArrangeExampleStoryComponent",
            "id": "component-AutoArrangeExampleStoryComponent-50974f9cb26419dcb3064068a9673116",
            "file": "libs/ngx-diagrams/stories/examples/auto-arrange/auto-arrange.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "../demo-diagram.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"action-bar\">\n  <button (click)=\"autoArrange()\">Auto Arrange</button>\n</div>\n<ngdx-diagram class=\"demo-diagram\" [model]=\"diagramModel\"></ngdx-diagram>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "diagramModel",
                    "type": "DiagramModel",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "autoArrange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {\n  DiagramEngine,\n  DiagramModel,\n  DefaultNodeModel,\n  DagreEngine,\n} from 'ngx-diagrams';\n\n@Component({\n  selector: 'app-root',\n  template: `\n    <div class=\"action-bar\">\n      <button (click)=\"autoArrange()\">Auto Arrange</button>\n    </div>\n    <ngdx-diagram class=\"demo-diagram\" [model]=\"diagramModel\"></ngdx-diagram>\n  `,\n  styleUrls: ['../demo-diagram.component.scss'],\n})\nexport class AutoArrangeExampleStoryComponent implements OnInit {\n  diagramModel: DiagramModel;\n\n  constructor(\n    private diagramEngine: DiagramEngine,\n    private dagreEngine: DagreEngine\n  ) {}\n\n  ngOnInit() {\n    const nodesDefaultDimensions = { height: 200, width: 200 };\n    this.diagramEngine.registerDefaultFactories();\n\n    this.diagramModel = this.diagramEngine.createDiagram();\n\n    const node1 = new DefaultNodeModel();\n    node1.setCoords({ x: 500, y: 300 });\n    node1.setDimensions(nodesDefaultDimensions);\n    const outport1 = node1.addOutPort({ name: 'outport1' });\n\n    const node2 = new DefaultNodeModel();\n    node2.setCoords({ x: 1000, y: 0 });\n    node2.setDimensions(nodesDefaultDimensions);\n    const inport = node2.addInPort({ name: 'inport2' });\n\n    for (let index = 0; index < 2; index++) {\n      const nodeLoop = new DefaultNodeModel();\n      nodeLoop.setCoords({\n        x: 1000 * (Math.random() * 10),\n        y: 300 + index * (Math.random() * 10) * 300,\n      });\n      nodeLoop.setDimensions(nodesDefaultDimensions);\n      const inportLoop = nodeLoop.addInPort({ name: `inport${index + 3}` });\n\n      this.diagramModel.addNode(nodeLoop);\n\n      const linkLoop = outport1.link(inportLoop);\n      this.diagramModel.addLink(linkLoop);\n    }\n\n    const link = outport1.link(inport);\n\n    this.diagramModel.addAll(node1, node2, link);\n\n    this.diagramEngine.zoomToFit();\n  }\n\n  autoArrange() {\n    this.dagreEngine.redistribute(this.diagramModel, {\n      graph: { align: 'DL', rankdir: 'LR', ranksep: 150 },\n    });\n    this.diagramEngine.zoomToFit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".demo-diagram {\n  display: flex;\n  height: 100%;\n  min-height: 100vh;\n  background-color: #3c3c3c;\n  background-image: linear-gradient(\n      0deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    ),\n    linear-gradient(\n      90deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    );\n  background-size: 50px 50px;\n}\n\n.action-bar {\n  position: relative;\n  width: 100%;\n  height: 40px;\n  z-index: 2000;\n  background-color: white;\n  display: flex;\n  align-items: center;\n  * {\n    margin: 0 10px;\n  }\n}\n",
                    "styleUrl": "../demo-diagram.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine"
                    },
                    {
                        "name": "dagreEngine",
                        "type": "DagreEngine"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dagreEngine",
                        "type": "DagreEngine",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "BasicExampleStoryComponent",
            "id": "component-BasicExampleStoryComponent-2c1d05713f488f3bbd712bc79d0d3599",
            "file": "libs/ngx-diagrams/stories/examples/basic/basic.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "../demo-diagram.component.scss"
            ],
            "styles": [],
            "template": "<ngdx-diagram    class=\"demo-diagram\"\n    [model]=\"diagramModel\"\n  ></ngdx-diagram>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "diagramModel",
                    "type": "DiagramModel",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { DiagramEngine, DiagramModel, DefaultNodeModel } from 'ngx-diagrams';\n\n@Component({\n  selector: 'app-root',\n  template: `<ngdx-diagram\n    class=\"demo-diagram\"\n    [model]=\"diagramModel\"\n  ></ngdx-diagram>`,\n  styleUrls: ['../demo-diagram.component.scss'],\n})\nexport class BasicExampleStoryComponent implements OnInit {\n  diagramModel: DiagramModel;\n\n  constructor(private diagramEngine: DiagramEngine) {}\n\n  ngOnInit() {\n    const nodesDefaultDimensions = { height: 200, width: 200 };\n    this.diagramEngine.registerDefaultFactories();\n\n    this.diagramModel = this.diagramEngine.createDiagram();\n\n    const node1 = new DefaultNodeModel();\n    node1.setCoords({ x: 500, y: 300 });\n    node1.setDimensions(nodesDefaultDimensions);\n    const outport1 = node1.addOutPort({ name: 'outport1' });\n\n    const node2 = new DefaultNodeModel();\n    node2.setCoords({ x: 1000, y: 0 });\n    node2.setDimensions(nodesDefaultDimensions);\n    const inport = node2.addInPort({ name: 'inport2' });\n\n    for (let index = 0; index < 2; index++) {\n      const nodeLoop = new DefaultNodeModel();\n      nodeLoop.setCoords({ x: 1000, y: 300 + index * 300 });\n      nodeLoop.setDimensions(nodesDefaultDimensions);\n      nodeLoop.addInPort({ name: `inport${index + 3}` });\n\n      this.diagramModel.addNode(nodeLoop);\n    }\n\n    const link = outport1.link(inport);\n    link.setLocked();\n\n    this.diagramModel.addAll(node1, node2, link);\n\n    this.diagramModel.getDiagramEngine().zoomToFit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".demo-diagram {\n  display: flex;\n  height: 100%;\n  min-height: 100vh;\n  background-color: #3c3c3c;\n  background-image: linear-gradient(\n      0deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    ),\n    linear-gradient(\n      90deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    );\n  background-size: 50px 50px;\n}\n\n.action-bar {\n  position: relative;\n  width: 100%;\n  height: 40px;\n  z-index: 2000;\n  background-color: white;\n  display: flex;\n  align-items: center;\n  * {\n    margin: 0 10px;\n  }\n}\n",
                    "styleUrl": "../demo-diagram.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "CustomLabelComponent",
            "id": "component-CustomLabelComponent-bc7023234e48054b2e73f54e0c4c98cc",
            "file": "libs/ngx-diagrams/stories/label/custom/custom-label.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "custom-label",
            "styleUrls": [
                "./custom-label.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./custom-label.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "label$",
                    "defaultValue": "createValueState<string>('', this.entityPipe('label'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "DefaultLabelModel"
                    }
                },
                {
                    "name": "coords$",
                    "defaultValue": "createValueState<Coords>({ x: 0, y: 0 }, this.entityPipe('coords'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "rotation$",
                    "defaultValue": "createValueState<number>(0, this.entityPipe('rotation'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "hovered$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('HoveredChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "painted$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('PaintedChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parent$",
                    "defaultValue": "createValueState<E>(null, this.entityPipe('ParentsChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selected$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('SelectedChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "destroyed$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "locked$",
                    "defaultValue": "createValueState(false, this.entityPipe('locked'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "getLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 17,
                    "inheritance": {
                        "file": "DefaultLabelModel"
                    }
                },
                {
                    "name": "selectLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 21,
                    "inheritance": {
                        "file": "DefaultLabelModel"
                    }
                },
                {
                    "name": "setLabel",
                    "args": [
                        {
                            "name": "label",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "jsdoctags": [
                        {
                            "name": "label",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DefaultLabelModel"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "getCoords",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "getRotation",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 25,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "selectCoords",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Coords>",
                    "typeParameters": [],
                    "line": 49,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "selectRotation",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 41,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "SerializedLabelModel",
                    "typeParameters": [],
                    "line": 16,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "setCoords",
                    "args": [
                        {
                            "name": "newCoords",
                            "type": "Partial<Coords>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "jsdoctags": [
                        {
                            "name": "newCoords",
                            "type": "Partial<Coords>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "setRotation",
                    "args": [
                        {
                            "name": "angle",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "jsdoctags": [
                        {
                            "name": "angle",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "getHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 46,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getPainted",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 38,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getParent",
                    "args": [],
                    "optional": false,
                    "returnType": "E",
                    "typeParameters": [],
                    "line": 26,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 66,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelectedEntities",
                    "args": [],
                    "optional": false,
                    "returnType": "BaseModel[]",
                    "typeParameters": [],
                    "line": 82,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 62,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "paintChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<PaintedEvent>",
                    "typeParameters": [],
                    "line": 58,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parentChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ParentChangeEvent<E>>",
                    "typeParameters": [],
                    "line": 34,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 54,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectionChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SelectionEvent>",
                    "typeParameters": [],
                    "line": 78,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 70,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setHovered",
                    "args": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setPainted",
                    "args": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setParent",
                    "args": [
                        {
                            "name": "parent",
                            "type": "E"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "jsdoctags": [
                        {
                            "name": "parent",
                            "type": "E",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setSelected",
                    "args": [
                        {
                            "name": "selected",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "jsdoctags": [
                        {
                            "name": "selected",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 50,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 84,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 94,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 77,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { DefaultLabelModel } from 'ngx-diagrams';\n\n@Component({\n  selector: 'custom-label',\n  templateUrl: './custom-label.component.html',\n  styleUrls: ['./custom-label.component.scss'],\n})\nexport class CustomLabelComponent extends DefaultLabelModel {\n  constructor() {\n    super('custom');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".default-label {\n  background-image: linear-gradient(to left, violet, indigo, blue, green, yellow, orange, red);\n  background-clip: text;\n  color: transparent;\n  font-size: 24px;\n  user-select: none;\n}\n",
                    "styleUrl": "./custom-label.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "extends": "DefaultLabelModel",
            "templateData": "<div\n  class=\"default-label\"\n  [ngStyle]=\"{\n    transform:\n      'translate(' +\n      (selectCoords() | async).x +\n      'px, ' +\n      (selectCoords() | async).y +\n      'px)' +\n      'rotate(' +\n      (selectRotation() | async) +\n      'deg)'\n  }\">\n  {{ selectLabel() | async }}\n</div>\n"
        },
        {
            "name": "CustomLabelDiagramComponent",
            "id": "component-CustomLabelDiagramComponent-b3c2e996c037c9dbaaefe85d857dfd6a",
            "file": "libs/ngx-diagrams/stories/label/custom/diagram.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "../demo-diagram.component.scss"
            ],
            "styles": [],
            "template": "<ngdx-diagram    class=\"demo-diagram\"\n    [model]=\"diagramModel\"\n  ></ngdx-diagram>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "diagramModel",
                    "type": "DiagramModel",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ComponentFactoryResolver,\n  OnInit,\n  Renderer2,\n} from '@angular/core';\nimport {\n  DiagramEngine,\n  DiagramModel,\n  DefaultNodeModel,\n  DefaultLabelModel,\n} from 'ngx-diagrams';\nimport { CustomLabelFactory } from './custom.factory';\n\n@Component({\n  selector: 'app-root',\n  template: `<ngdx-diagram\n    class=\"demo-diagram\"\n    [model]=\"diagramModel\"\n  ></ngdx-diagram>`,\n  styleUrls: ['../demo-diagram.component.scss'],\n})\nexport class CustomLabelDiagramComponent implements OnInit {\n  diagramModel: DiagramModel;\n\n  constructor(\n    private diagramEngine: DiagramEngine,\n    private resolver: ComponentFactoryResolver,\n    private renderer: Renderer2\n  ) {}\n\n  ngOnInit() {\n    const nodesDefaultDimensions = { height: 200, width: 200 };\n    this.diagramEngine.registerDefaultFactories();\n    this.diagramEngine.registerLabelFactory(\n      new CustomLabelFactory(this.resolver, this.renderer)\n    );\n\n    this.diagramModel = this.diagramEngine.createDiagram();\n\n    const node1 = new DefaultNodeModel();\n    node1.setCoords({ x: 500, y: 300 });\n    node1.setDimensions(nodesDefaultDimensions);\n    const outport1 = node1.addOutPort({ name: 'outport1' });\n\n    const node2 = new DefaultNodeModel();\n    node2.setCoords({ x: 1500, y: 300 });\n    node2.setDimensions(nodesDefaultDimensions);\n    const inport = node2.addInPort({ name: 'inport2' });\n\n    const link = outport1.link(inport);\n    const label = new DefaultLabelModel(\"I'm a custom label\", 'custom-label');\n    link.setLabel(label);\n    link.setLocked();\n\n    this.diagramModel.addAll(node1, node2, link);\n\n    this.diagramModel.getDiagramEngine().zoomToFit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".demo-diagram {\n  display: flex;\n  height: 100%;\n  min-height: 100vh;\n  background-color: #3c3c3c;\n  background-image: linear-gradient(\n      0deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    ),\n    linear-gradient(\n      90deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    );\n  background-size: 50px 50px;\n}\n",
                    "styleUrl": "../demo-diagram.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine"
                    },
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "CustomLinkComponent",
            "id": "component-CustomLinkComponent-8da361bc77a3ddc848d896e20d50c8af",
            "file": "libs/ngx-diagrams/stories/link/custom/custom-link.component.ts",
            "changeDetection": "ChangeDetectionStrategy.Default",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "custom-link",
            "styleUrls": [
                "./custom-link.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./custom-link.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_path$",
                    "defaultValue": "new BehaviorSubject('')",
                    "type": "BehaviorSubject<string>",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "hover",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "labelLayer",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'labelLayer', {read: ViewContainerRef, static: true}"
                        }
                    ]
                },
                {
                    "name": "path$",
                    "defaultValue": "this._path$.pipe(\n    this.entityPipe('path'),\n    tap(() => this.cd.detectChanges())\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "color$",
                    "defaultValue": "createValueState<string>('rgba(255, 255, 255, 0.5)', this.entityPipe('color'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "inheritance": {
                        "file": "DefaultLinkModel"
                    }
                },
                {
                    "name": "curvyness$",
                    "defaultValue": "createValueState<number>(50, this.entityPipe('curvyness'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "inheritance": {
                        "file": "DefaultLinkModel"
                    }
                },
                {
                    "name": "width$",
                    "defaultValue": "createValueState<number>(3, this.entityPipe('width'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "DefaultLinkModel"
                    }
                },
                {
                    "name": "diagramEngine",
                    "type": "DiagramEngine",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "extras",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "label$",
                    "defaultValue": "createValueState<LabelModel>(null, this.entityPipe('label'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "points",
                    "type": "PointModel[]",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "sourcePort",
                    "type": "PortModel | null",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "targetPort",
                    "type": "PortModel | null",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "hovered$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('HoveredChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "painted$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('PaintedChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parent$",
                    "defaultValue": "createValueState<E>(null, this.entityPipe('ParentsChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selected$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('SelectedChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "destroyed$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "locked$",
                    "defaultValue": "createValueState(false, this.entityPipe('locked'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "calcCenterOfPath",
                    "args": [],
                    "optional": false,
                    "returnType": "Coords",
                    "typeParameters": [],
                    "line": 57
                },
                {
                    "name": "deleteLink",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                },
                {
                    "name": "selectColor",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 30,
                    "inheritance": {
                        "file": "DefaultLinkModel"
                    }
                },
                {
                    "name": "selectWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 26,
                    "inheritance": {
                        "file": "DefaultLinkModel"
                    }
                },
                {
                    "name": "setColor",
                    "args": [
                        {
                            "name": "color",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DefaultLinkModel"
                    }
                },
                {
                    "name": "setCurvyness",
                    "args": [
                        {
                            "name": "curvyness",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "jsdoctags": [
                        {
                            "name": "curvyness",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DefaultLinkModel"
                    }
                },
                {
                    "name": "setWidth",
                    "args": [
                        {
                            "name": "width",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "jsdoctags": [
                        {
                            "name": "width",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DefaultLinkModel"
                    }
                },
                {
                    "name": "addPoint",
                    "args": [
                        {
                            "name": "pointModel",
                            "type": "P"
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "defaultValue": "1"
                        }
                    ],
                    "optional": false,
                    "returnType": "P",
                    "typeParameters": [
                        "P"
                    ],
                    "line": 222,
                    "jsdoctags": [
                        {
                            "name": "pointModel",
                            "type": "P",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "defaultValue": "1",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "object",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "object",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "generatePoint",
                    "args": [
                        {
                            "type": "Coords"
                        }
                    ],
                    "optional": false,
                    "returnType": "PointModel",
                    "typeParameters": [],
                    "line": 229,
                    "jsdoctags": [
                        {
                            "type": "Coords",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getExtras",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 55,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getFirstPoint",
                    "args": [],
                    "optional": false,
                    "returnType": "PointModel",
                    "typeParameters": [],
                    "line": 129,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "LabelModel",
                    "typeParameters": [],
                    "line": 189,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getLastPoint",
                    "args": [],
                    "optional": false,
                    "returnType": "PointModel",
                    "typeParameters": [],
                    "line": 133,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getName",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 51,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getPointForPort",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "PointModel",
                    "typeParameters": [],
                    "line": 117,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getPointIndex",
                    "args": [
                        {
                            "name": "point",
                            "type": "PointModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 94,
                    "jsdoctags": [
                        {
                            "name": "point",
                            "type": "PointModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getPointModel",
                    "args": [
                        {
                            "name": "id",
                            "type": "ID"
                        }
                    ],
                    "optional": false,
                    "returnType": "PointModel | null",
                    "typeParameters": [],
                    "line": 98,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "ID",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getPoints",
                    "args": [],
                    "optional": false,
                    "returnType": "PointModel[]",
                    "typeParameters": [],
                    "line": 169,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getPortForPoint",
                    "args": [
                        {
                            "name": "point",
                            "type": "PointModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "PortModel",
                    "typeParameters": [],
                    "line": 107,
                    "jsdoctags": [
                        {
                            "name": "point",
                            "type": "PointModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getSourcePort",
                    "args": [],
                    "optional": false,
                    "returnType": "PortModel",
                    "typeParameters": [],
                    "line": 147,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getTargetPort",
                    "args": [],
                    "optional": false,
                    "returnType": "PortModel",
                    "typeParameters": [],
                    "line": 151,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "isLastPoint",
                    "args": [
                        {
                            "name": "point",
                            "type": "PointModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 89,
                    "jsdoctags": [
                        {
                            "name": "point",
                            "type": "PointModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "point",
                    "args": [
                        {
                            "type": "Coords"
                        }
                    ],
                    "optional": false,
                    "returnType": "PointModel",
                    "typeParameters": [],
                    "line": 165,
                    "jsdoctags": [
                        {
                            "type": "Coords",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "removeMiddlePoints",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 216,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "removePoint",
                    "args": [
                        {
                            "name": "pointModel",
                            "type": "PointModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 204,
                    "jsdoctags": [
                        {
                            "name": "pointModel",
                            "type": "PointModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "removePointsAfter",
                    "args": [
                        {
                            "name": "pointModel",
                            "type": "PointModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 212,
                    "jsdoctags": [
                        {
                            "name": "pointModel",
                            "type": "PointModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "removePointsBefore",
                    "args": [
                        {
                            "name": "pointModel",
                            "type": "PointModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 208,
                    "jsdoctags": [
                        {
                            "name": "pointModel",
                            "type": "PointModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "resetLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 193,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "selectLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LabelModel | null>",
                    "typeParameters": [],
                    "line": 185,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "SerializedLinkModel",
                    "typeParameters": [],
                    "line": 33,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "setExtras",
                    "args": [
                        {
                            "name": "extras",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "extras",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "setLabel",
                    "args": [
                        {
                            "name": "label",
                            "type": "LabelModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 180,
                    "jsdoctags": [
                        {
                            "name": "label",
                            "type": "LabelModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 233,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "setName",
                    "args": [
                        {
                            "name": "name",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "setPoints",
                    "args": [
                        {
                            "name": "points",
                            "type": "PointModel[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "jsdoctags": [
                        {
                            "name": "points",
                            "type": "PointModel[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "setSourcePort",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "setTargetPort",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 46,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getPainted",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 38,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getParent",
                    "args": [],
                    "optional": false,
                    "returnType": "E",
                    "typeParameters": [],
                    "line": 26,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 66,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelectedEntities",
                    "args": [],
                    "optional": false,
                    "returnType": "BaseModel[]",
                    "typeParameters": [],
                    "line": 82,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 62,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "paintChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<PaintedEvent>",
                    "typeParameters": [],
                    "line": 58,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parentChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ParentChangeEvent<E>>",
                    "typeParameters": [],
                    "line": 34,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 54,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectionChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SelectionEvent>",
                    "typeParameters": [],
                    "line": 78,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 70,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setHovered",
                    "args": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setPainted",
                    "args": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setParent",
                    "args": [
                        {
                            "name": "parent",
                            "type": "E"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "jsdoctags": [
                        {
                            "name": "parent",
                            "type": "E",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setSelected",
                    "args": [
                        {
                            "name": "selected",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "jsdoctags": [
                        {
                            "name": "selected",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 50,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 84,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 94,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 77,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ViewChild,\n  ViewContainerRef\n} from '@angular/core';\nimport { Coords, DefaultLinkModel, generateCurvePath } from 'ngx-diagrams';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'custom-link',\n  templateUrl: './custom-link.component.html',\n  styleUrls: ['./custom-link.component.scss'],\n  changeDetection: ChangeDetectionStrategy.Default\n})\nexport class CustomLinkComponent extends DefaultLinkModel implements AfterViewInit {\n  @ViewChild('labelLayer', { read: ViewContainerRef, static: true })\n  labelLayer: ViewContainerRef;\n\n  _path$: BehaviorSubject<string> = new BehaviorSubject('');\n  path$ = this._path$.pipe(\n    this.entityPipe('path'),\n    tap(() => this.cd.detectChanges())\n  );\n\n  hover = false;\n\n  constructor(private cd: ChangeDetectorRef) {\n    super({ type: 'custom-link', logPrefix: '[CustomLink]' });\n  }\n\n  ngAfterViewInit() {\n    const firstPCoords$ = this.getFirstPoint().selectCoords();\n    const lastPCoords$ = this.getLastPoint().selectCoords();\n\n    combineLatest([firstPCoords$, lastPCoords$]).subscribe(([firstPCoords, lastPCoords]) => {\n      const points = [firstPCoords, lastPCoords];\n\n      const isHorizontal = Math.abs(firstPCoords.x - lastPCoords.x) > Math.abs(firstPCoords.y - lastPCoords.y);\n      const xOrY = isHorizontal ? 'x' : 'y';\n\n      // draw the smoothing\n      // if the points are too close, just draw a straight line\n      let isStraight = false;\n      if (Math.abs(points[0][xOrY] - points[1][xOrY]) < 150) {\n        isStraight = true;\n      }\n\n      const path = generateCurvePath(firstPCoords, lastPCoords, isStraight ? 0 : 200);\n      this._path$.next(path);\n    });\n  }\n\n  calcCenterOfPath(): Coords {\n    const firstPointCoords = this.getFirstPoint().getCoords();\n    const lastPointCoords = this.getLastPoint().getCoords();\n    return { x: (firstPointCoords.x + lastPointCoords.x) / 2, y: (firstPointCoords.y + lastPointCoords.y) / 2 };\n  }\n\n  deleteLink() {\n    this.destroy();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".custom-link {\n  #triangle {\n    path {\n      fill: currentColor;\n    }\n  }\n}\n\n.custom-link-container {\n  position: relative;\n  fill: none;\n  overflow: visible;\n  pointer-events: all;\n}\n\n.default-point {\n  color: lightgray;\n  overflow: visible;\n  pointer-events: all;\n\n  &.hovered {\n    color: rgb(0, 192, 255);\n  }\n}\n\n.delete-icon {\n  color: white;\n  cursor: pointer;\n  display: flex;\n  pointer-events: all;\n}\n",
                    "styleUrl": "./custom-link.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "DefaultLinkModel",
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<!-- Label Host -->\n<ng-template #labelLayer></ng-template>\n\n<svg class=\"custom-link-container\" [ngStyle]=\"{ color: selectColor() | async }\">\n  <g>\n    <defs>\n      <marker\n        id=\"triangle\"\n        viewBox=\"0 0 20 20\"\n        refX=\"15\"\n        refY=\"4\"\n        markerUnits=\"strokeWidth\"\n        markerWidth=\"1\"\n        markerHeight=\"1\"\n        orient=\"auto\"\n      >\n        <path\n          d=\"M 0 0 L 10 5 L 0 10 z\"\n          fill=\"currentcolor\"\n          stroke=\"currentcolor\"\n        />\n      </marker>\n    </defs>\n    <path\n      [attr.stroke-width]=\"width\"\n      [attr.stroke]=\"selectColor() | async\"\n      [attr.d]=\"path$ | async\"\n      class=\"custom-link\"\n      (mouseleave)=\"setHovered(false)\"\n      (mouseenter)=\"setHovered()\"\n      [ngClass]=\"{ hovered: selectHovered() | async }\"\n      marker-end=\"url(#triangle)\"\n    ></path>\n    <path\n      class=\"custom-link\"\n      (mouseleave)=\"setHovered(false)\"\n      (mouseenter)=\"setHovered()\"\n      [attr.stroke-width]=\"20\"\n      [attr.stroke]=\"selectColor() | async\"\n      [attr.stroke-linecap]=\"'round'\"\n      [attr.data-linkid]=\"id\"\n      [attr.stroke-opacity]=\"(selectHovered() | async) ? '0.1' : '0'\"\n      [attr.d]=\"path$ | async\"\n      marker-end=\"url(#triangle)\"\n    ></path>\n  </g>\n\n  <!-- Points -->\n  <g *ngFor=\"let point of getPoints()\" [id]=\"point.id\">\n    <circle\n      fill=\"currentColor\"\n      [attr.cx]=\"point.selectX() | async\"\n      [attr.cy]=\"point.selectY() | async\"\n      r=\"5\"\n      class=\"default-point\"\n      [ngClass]=\"{ hovered: point.selectHovered() | async }\"\n    />\n    <circle\n      [attr.data-pointid]=\"point.id\"\n      [attr.data-linkid]=\"id\"\n      (mouseleave)=\"point.setHovered(false); setHovered(false)\"\n      (mouseenter)=\"point.setHovered(); setHovered()\"\n      [attr.cx]=\"point.selectX() | async\"\n      [attr.cy]=\"point.selectY() | async\"\n      r=\"15\"\n      [attr.opacity]=\"0\"\n      [ngClass]=\"{ selected: point.selectSelected() | async }\"\n    />\n  </g>\n</svg>\n\n<div\n  (click)=\"deleteLink()\"\n  class=\"delete-icon\"\n  [ngStyle]=\"{\n    transform:\n      'translate(' +\n      calcCenterOfPath().x +\n      'px, ' +\n      (calcCenterOfPath().y - 200) +\n      'px)'\n  }\"\n>\n  <svg\n    fill=\"currentcolor\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    height=\"30px\"\n    viewBox=\"-47 0 512 512\"\n    width=\"30px\"\n  >\n    <path\n      fill=\"currentcolor\"\n      d=\"m416.875 114.441406-11.304688-33.886718c-4.304687-12.90625-16.339843-21.578126-29.941406-21.578126h-95.011718v-30.933593c0-15.460938-12.570313-28.042969-28.027344-28.042969h-87.007813c-15.453125 0-28.027343 12.582031-28.027343 28.042969v30.933593h-95.007813c-13.605469 0-25.640625 8.671876-29.945313 21.578126l-11.304687 33.886718c-2.574219 7.714844-1.2695312 16.257813 3.484375 22.855469 4.753906 6.597656 12.445312 10.539063 20.578125 10.539063h11.816406l26.007813 321.605468c1.933594 23.863282 22.183594 42.558594 46.109375 42.558594h204.863281c23.921875 0 44.175781-18.695312 46.105469-42.5625l26.007812-321.601562h6.542969c8.132812 0 15.824219-3.941407 20.578125-10.535157 4.753906-6.597656 6.058594-15.144531 3.484375-22.859375zm-249.320312-84.441406h83.0625v28.976562h-83.0625zm162.804687 437.019531c-.679687 8.402344-7.796875 14.980469-16.203125 14.980469h-204.863281c-8.40625 0-15.523438-6.578125-16.203125-14.980469l-25.816406-319.183593h288.898437zm-298.566406-349.183593 9.269531-27.789063c.210938-.640625.808594-1.070313 1.484375-1.070313h333.082031c.675782 0 1.269532.429688 1.484375 1.070313l9.269531 27.789063zm0 0\"\n    />\n    <path\n      fill=\"currentcolor\"\n      d=\"m282.515625 465.957031c.265625.015625.527344.019531.792969.019531 7.925781 0 14.550781-6.210937 14.964844-14.21875l14.085937-270.398437c.429687-8.273437-5.929687-15.332031-14.199219-15.761719-8.292968-.441406-15.328125 5.925782-15.761718 14.199219l-14.082032 270.398437c-.429687 8.273438 5.925782 15.332032 14.199219 15.761719zm0 0\"\n    />\n    <path\n      fill=\"currentcolor\"\n      d=\"m120.566406 451.792969c.4375 7.996093 7.054688 14.183593 14.964844 14.183593.273438 0 .554688-.007812.832031-.023437 8.269531-.449219 14.609375-7.519531 14.160157-15.792969l-14.753907-270.398437c-.449219-8.273438-7.519531-14.613281-15.792969-14.160157-8.269531.449219-14.609374 7.519532-14.160156 15.792969zm0 0\"\n    />\n    <path\n      fill=\"currentcolor\"\n      d=\"m209.253906 465.976562c8.285156 0 15-6.714843 15-15v-270.398437c0-8.285156-6.714844-15-15-15s-15 6.714844-15 15v270.398437c0 8.285157 6.714844 15 15 15zm0 0\"\n    />\n  </svg>\n</div>\n"
        },
        {
            "name": "CustomLinkDiagramComponent",
            "id": "component-CustomLinkDiagramComponent-3ee85126971241fbcfc59768d7ba1a81",
            "file": "libs/ngx-diagrams/stories/link/custom/diagram.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "../demo-diagram.component.scss"
            ],
            "styles": [],
            "template": "<ngdx-diagram    class=\"demo-diagram\"\n    [model]=\"diagramModel\"\n  ></ngdx-diagram>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "nodeHeight",
                    "defaultValue": "200",
                    "line": 26
                },
                {
                    "name": "nodeWidth",
                    "defaultValue": "200",
                    "line": 27
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "diagramModel",
                    "type": "DiagramModel",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ComponentFactoryResolver,\n  Input,\n  OnInit,\n  Renderer2,\n} from '@angular/core';\nimport {\n  DiagramEngine,\n  DiagramModel,\n  DefaultNodeModel,\n  DefaultLinkModel,\n} from 'ngx-diagrams';\nimport { CustomLinkFactory } from './custom.factory';\n\n@Component({\n  selector: 'app-root',\n  template: `<ngdx-diagram\n    class=\"demo-diagram\"\n    [model]=\"diagramModel\"\n  ></ngdx-diagram>`,\n  styleUrls: ['../demo-diagram.component.scss'],\n})\nexport class CustomLinkDiagramComponent implements OnInit {\n  diagramModel: DiagramModel;\n  @Input() nodeHeight = 200;\n  @Input() nodeWidth = 200;\n\n  constructor(\n    private diagramEngine: DiagramEngine,\n    private resolver: ComponentFactoryResolver,\n    private renderer: Renderer2\n  ) {}\n\n  ngOnInit() {\n    const nodesDefaultDimensions = {\n      height: this.nodeHeight,\n      width: this.nodeWidth,\n    };\n    this.diagramEngine.registerDefaultFactories();\n    this.diagramEngine.registerLinkFactory(\n      new CustomLinkFactory(this.resolver, this.renderer)\n    );\n\n    this.diagramModel = this.diagramEngine.createDiagram();\n\n    const node1 = new DefaultNodeModel();\n    node1.setCoords({ x: 500, y: 300 });\n    node1.setDimensions(nodesDefaultDimensions);\n    const outport1 = node1.addOutPort({\n      name: 'outport1',\n      linkType: 'custom-link',\n      maximumLinks: 3,\n    });\n\n    const node2 = new DefaultNodeModel();\n    node2.setCoords({ x: 1000, y: 300 });\n    node2.setDimensions(nodesDefaultDimensions);\n    const inport = node2.addInPort({ name: 'inport2' });\n\n    const link = new DefaultLinkModel({ type: 'custom-link' });\n\n    link.setSourcePort(outport1);\n    link.setTargetPort(inport);\n\n    this.diagramModel.addAll(node1, node2, link);\n\n    this.diagramModel.getDiagramEngine().zoomToFit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".demo-diagram {\n  display: flex;\n  height: 100%;\n  min-height: 100vh;\n  background-color: #3c3c3c;\n  background-image: linear-gradient(\n      0deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    ),\n    linear-gradient(\n      90deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    );\n  background-size: 50px 50px;\n}\n",
                    "styleUrl": "../demo-diagram.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine"
                    },
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "CustomNodeComponent",
            "id": "component-CustomNodeComponent-002b65712ca81b36119f8aef260fed76",
            "file": "libs/ngx-diagrams/stories/node/custom/custom.component.ts",
            "changeDetection": "ChangeDetectionStrategy.Default",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "custom-node",
            "styleUrls": [
                "./custom.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./custom.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "destroyed$",
                    "defaultValue": "new ReplaySubject(1)",
                    "type": "ReplaySubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "nodeContent",
                    "defaultValue": "'Pick me!'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "portsLayer",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'portsLayer', {read: ViewContainerRef, static: true}"
                        }
                    ]
                },
                {
                    "name": "color",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "inheritance": {
                        "file": "DefaultNodeModel"
                    }
                },
                {
                    "name": "height$",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "inheritance": {
                        "file": "DefaultNodeModel"
                    }
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "DefaultNodeModel"
                    }
                },
                {
                    "name": "width$",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "inheritance": {
                        "file": "DefaultNodeModel"
                    }
                },
                {
                    "name": "coords$",
                    "defaultValue": "createValueState<Coords>({ x: 0, y: 0 }, this.entityPipe('coords'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "diagramEngine$",
                    "defaultValue": "createValueState<DiagramEngine>(null, this.entityPipe('diagramEngine'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "dimensions$",
                    "defaultValue": "createValueState<Dimensions>({ width: 0, height: 0 }, this.entityPipe('dimensions'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "extras$",
                    "defaultValue": "createValueState<any>({}, this.entityPipe('extras'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "ports$",
                    "defaultValue": "createEntityState<P>([], this.entityPipe('ports'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "hovered$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('HoveredChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "painted$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('PaintedChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parent$",
                    "defaultValue": "createValueState<E>(null, this.entityPipe('ParentsChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selected$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('SelectedChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "destroyed$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "locked$",
                    "defaultValue": "createValueState(false, this.entityPipe('locked'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "generatePort",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31
                },
                {
                    "name": "addInPort",
                    "args": [
                        {
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29,
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DefaultNodeModel"
                    }
                },
                {
                    "name": "addOutPort",
                    "args": [
                        {
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 52,
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DefaultNodeModel"
                    }
                },
                {
                    "name": "addPort",
                    "args": [
                        {
                            "name": "port",
                            "type": "P"
                        }
                    ],
                    "optional": false,
                    "returnType": "P",
                    "typeParameters": [],
                    "line": 117,
                    "description": "<p>Assign a port to the node and set the node as its getParent</p>\n",
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "P",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 3515,
                                "end": 3522,
                                "flags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>the inserted port</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "coordsChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Coords>",
                    "typeParameters": [],
                    "line": 97,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 196,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "dimensionChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Dimensions>",
                    "typeParameters": [],
                    "line": 156,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getCoords",
                    "args": [],
                    "optional": false,
                    "returnType": "Coords",
                    "typeParameters": [],
                    "line": 48,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getDiagramEngine",
                    "args": [],
                    "optional": false,
                    "returnType": "DiagramEngine",
                    "typeParameters": [],
                    "line": 36,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getDimensions",
                    "args": [],
                    "optional": false,
                    "returnType": "Dimensions",
                    "typeParameters": [],
                    "line": 151,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getExtras",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 188,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getHeight",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 160,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getPort",
                    "args": [
                        {
                            "name": "id",
                            "type": "ID"
                        }
                    ],
                    "optional": false,
                    "returnType": "P",
                    "typeParameters": [],
                    "line": 129,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "ID",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getPorts",
                    "args": [],
                    "optional": false,
                    "returnType": "EntityMap<P>",
                    "typeParameters": [],
                    "line": 139,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getPortsArray",
                    "args": [],
                    "optional": false,
                    "returnType": "P[]",
                    "typeParameters": [],
                    "line": 143,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getSelectedEntities",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 81,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 168,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "removeAllPorts",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 201,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "removePort",
                    "args": [
                        {
                            "name": "portOrId",
                            "type": "ID | P"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 123,
                    "jsdoctags": [
                        {
                            "name": "portOrId",
                            "type": "ID | P",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "selectCoords",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Coords>",
                    "typeParameters": [],
                    "line": 101,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "selectDiagramEngine",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<DiagramEngine>",
                    "typeParameters": [],
                    "line": 40,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "selectExtras",
                    "args": [
                        {
                            "name": "selector",
                            "type": "function",
                            "optional": true,
                            "function": [
                                {
                                    "name": "extra",
                                    "type": "E"
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<E>",
                    "typeParameters": [
                        "E"
                    ],
                    "line": 192,
                    "jsdoctags": [
                        {
                            "name": "selector",
                            "type": "function",
                            "optional": true,
                            "function": [
                                {
                                    "name": "extra",
                                    "type": "E"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "selectHeight",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 180,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "selectPorts",
                    "args": [
                        {
                            "name": "selector",
                            "type": "function",
                            "optional": true,
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<P[]>",
                    "typeParameters": [],
                    "line": 133,
                    "jsdoctags": [
                        {
                            "name": "selector",
                            "type": "function",
                            "optional": true,
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "selectWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 176,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "selectX",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 105,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "selectY",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 109,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "SerializedNodeModel",
                    "typeParameters": [],
                    "line": 66,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "setCoords",
                    "args": [
                        {
                            "type": "Coords"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "jsdoctags": [
                        {
                            "type": "Coords",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "setDiagramEngine",
                    "args": [
                        {
                            "name": "diagramEngine",
                            "type": "DiagramEngine"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "jsdoctags": [
                        {
                            "name": "diagramEngine",
                            "type": "DiagramEngine",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "setDimensions",
                    "args": [
                        {
                            "name": "dimensions",
                            "type": "Partial<Dimensions>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "jsdoctags": [
                        {
                            "name": "dimensions",
                            "type": "Partial<Dimensions>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "setExtras",
                    "args": [
                        {
                            "name": "extras",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 184,
                    "jsdoctags": [
                        {
                            "name": "extras",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "setHeight",
                    "args": [
                        {
                            "name": "height",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 164,
                    "jsdoctags": [
                        {
                            "name": "height",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "setWidth",
                    "args": [
                        {
                            "name": "width",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 172,
                    "jsdoctags": [
                        {
                            "name": "width",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 46,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getPainted",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 38,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getParent",
                    "args": [],
                    "optional": false,
                    "returnType": "E",
                    "typeParameters": [],
                    "line": 26,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 66,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelectedEntities",
                    "args": [],
                    "optional": false,
                    "returnType": "BaseModel[]",
                    "typeParameters": [],
                    "line": 82,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 62,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "paintChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<PaintedEvent>",
                    "typeParameters": [],
                    "line": 58,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parentChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ParentChangeEvent<E>>",
                    "typeParameters": [],
                    "line": 34,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 54,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectionChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SelectionEvent>",
                    "typeParameters": [],
                    "line": 78,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 70,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setHovered",
                    "args": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setPainted",
                    "args": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setParent",
                    "args": [
                        {
                            "name": "parent",
                            "type": "E"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "jsdoctags": [
                        {
                            "name": "parent",
                            "type": "E",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setSelected",
                    "args": [
                        {
                            "name": "selected",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "jsdoctags": [
                        {
                            "name": "selected",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 50,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 84,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 94,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 77,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  ViewChild,\n  ViewContainerRef,\n  ChangeDetectionStrategy,\n  OnDestroy,\n} from '@angular/core';\nimport { PortModel, DefaultNodeModel } from 'ngx-diagrams';\nimport { ReplaySubject } from 'rxjs';\n\n@Component({\n  selector: 'custom-node',\n  templateUrl: './custom.component.html',\n  styleUrls: ['./custom.component.scss'],\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class CustomNodeComponent\n  extends DefaultNodeModel\n  implements OnInit, OnDestroy {\n  destroyed$: ReplaySubject<boolean> = new ReplaySubject(1);\n  @ViewChild('portsLayer', { read: ViewContainerRef, static: true })\n  portsLayer: ViewContainerRef;\n\n  nodeContent = 'Pick me!';\n\n  constructor() {\n    super({ type: 'custom-node' });\n  }\n\n  ngOnInit() {\n    this.selectPorts().subscribe((ports) => {\n      ports.forEach((port) => {\n        if (!port.getPainted()) {\n          port.setLocked(this.getLocked());\n          this.generatePort(port);\n        }\n      });\n    });\n\n    this.selectSelected().subscribe((selected) => {\n      this.nodeContent = selected ? 'Thank you 🙏' : 'Pick me!';\n    });\n  }\n\n  ngOnDestroy() {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n\n  generatePort(port: PortModel) {\n    this.getDiagramEngine().generateWidgetForPort(port, this.portsLayer);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  &.selected {\n    .custom-node {\n      &:after {\n        box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\n        border-color: #86d8b9;\n      }\n    }\n  }\n\n  .custom-node {\n    user-select: none;\n    pointer-events: all;\n    background-color: white !important;\n    border-radius: 16px;\n    transition: all 0.3s ease-in-out;\n    padding: 20px;\n    cursor: auto;\n    border: 1px solid #e1e2e6;\n\n    &:hover {\n      cursor: pointer;\n      border-color: #86d8b9;\n    }\n\n    &:after {\n      transition: all 0.3s ease-in-out;\n      content: '';\n      position: absolute;\n      top: 12px;\n      right: 4px;\n      bottom: 4px;\n      left: 12px;\n      z-index: -1;\n      margin: -9px;\n      border-radius: 16px;\n    }\n\n    &:after {\n      background: #86d8b9;\n    }\n  }\n}\n",
                    "styleUrl": "./custom.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 25
            },
            "extends": "DefaultNodeModel",
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"custom-node\">\n  <div>{{ nodeContent }}</div>\n\n  <div class=\"ports\">\n    <ng-template #portsLayer></ng-template>\n  </div>\n</div>\n"
        },
        {
            "name": "CustomNodeDiagramComponent",
            "id": "component-CustomNodeDiagramComponent-121c689dec4f52a6759b5f35f8ae7ff4",
            "file": "libs/ngx-diagrams/stories/node/custom/diagram.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "../demo-diagram.component.scss"
            ],
            "styles": [],
            "template": "<ngdx-diagram    class=\"demo-diagram\"\n    [model]=\"diagramModel\"\n  ></ngdx-diagram>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "nodeHeight",
                    "defaultValue": "200",
                    "line": 23
                },
                {
                    "name": "nodeWidth",
                    "defaultValue": "200",
                    "line": 24
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "diagramModel",
                    "type": "DiagramModel",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "e",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ComponentFactoryResolver,\n  Input,\n  OnChanges,\n  OnInit,\n  Renderer2,\n  SimpleChanges,\n} from '@angular/core';\nimport { DiagramEngine, DiagramModel, DefaultNodeModel } from 'ngx-diagrams';\nimport { CustomNodeFactory } from './custom.factory';\n\n@Component({\n  selector: 'app-root',\n  template: `<ngdx-diagram\n    class=\"demo-diagram\"\n    [model]=\"diagramModel\"\n  ></ngdx-diagram>`,\n  styleUrls: ['../demo-diagram.component.scss'],\n})\nexport class CustomNodeDiagramComponent implements OnInit, OnChanges {\n  diagramModel: DiagramModel;\n  @Input() nodeHeight = 200;\n  @Input() nodeWidth = 200;\n\n  constructor(\n    private diagramEngine: DiagramEngine,\n    private resolver: ComponentFactoryResolver,\n    private renderer: Renderer2\n  ) {}\n\n  ngOnInit() {\n    const nodesDefaultDimensions = {\n      height: this.nodeHeight,\n      width: this.nodeWidth,\n    };\n    this.diagramEngine.registerDefaultFactories();\n    this.diagramEngine.registerNodeFactory(\n      new CustomNodeFactory(this.resolver, this.renderer)\n    );\n\n    this.diagramModel = this.diagramEngine.createDiagram();\n\n    const node1 = new DefaultNodeModel({ type: 'custom-node' });\n    node1.setCoords({ x: 500, y: 300 });\n    node1.setDimensions(nodesDefaultDimensions);\n\n    this.diagramModel.addAll(node1);\n\n    this.diagramModel.getDiagramEngine().zoomToFit();\n  }\n\n  ngOnChanges(e: SimpleChanges) {\n    if (this.diagramModel) {\n      if (e.nodeHeight) {\n        Object.values(this.diagramModel.getNodes()).forEach((node) => {\n          node.setHeight(e.nodeHeight.currentValue);\n        });\n      }\n\n      if (e.nodeWidth) {\n        Object.values(this.diagramModel.getNodes()).forEach((node) => {\n          node.setWidth(e.nodeWidth.currentValue);\n        });\n      }\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".demo-diagram {\n  display: flex;\n  height: 100%;\n  min-height: 100vh;\n  background-color: #3c3c3c;\n  background-image: linear-gradient(\n      0deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    ),\n    linear-gradient(\n      90deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    );\n  background-size: 50px 50px;\n}\n",
                    "styleUrl": "../demo-diagram.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine"
                    },
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ]
        },
        {
            "name": "CustomPortComponent",
            "id": "component-CustomPortComponent-dafa931a86c542522e7a1bc76e6c89e6",
            "file": "libs/ngx-diagrams/stories/port/custom/custom.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "custom-port",
            "styleUrls": [
                "./custom.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./custom.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "in",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "inheritance": {
                        "file": "DefaultPortModel"
                    }
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "inheritance": {
                        "file": "DefaultPortModel"
                    }
                },
                {
                    "name": "links",
                    "type": "HashMap<any>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "inheritance": {
                        "file": "DefaultPortModel"
                    }
                },
                {
                    "name": "canCreateLinks$",
                    "defaultValue": "createValueState(true, this.entityPipe('magnetic'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "height$",
                    "defaultValue": "createValueState(0, this.entityPipe('y'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "links$",
                    "defaultValue": "createEntityState<LinkModel>([], this.entityPipe('links'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "linkType",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "magnetic$",
                    "defaultValue": "createValueState(true, this.entityPipe('magnetic'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "maximumLinks",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "width$",
                    "defaultValue": "createValueState(0, this.entityPipe('y'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "x$",
                    "defaultValue": "createValueState(0, this.entityPipe('x'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "y$",
                    "defaultValue": "createValueState(0, this.entityPipe('y'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "hovered$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('HoveredChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "painted$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('PaintedChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parent$",
                    "defaultValue": "createValueState<E>(null, this.entityPipe('ParentsChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selected$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('SelectedChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "destroyed$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "locked$",
                    "defaultValue": "createValueState(false, this.entityPipe('locked'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "createLinkModel",
                    "args": [],
                    "optional": false,
                    "returnType": "DefaultLinkModel",
                    "typeParameters": [],
                    "line": 14
                },
                {
                    "name": "canLinkToPort",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DefaultPortModel"
                    }
                },
                {
                    "name": "createLinkModel",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 53,
                    "inheritance": {
                        "file": "DefaultPortModel"
                    }
                },
                {
                    "name": "link",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "LinkModel",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DefaultPortModel"
                    }
                },
                {
                    "name": "addLink",
                    "args": [
                        {
                            "name": "link",
                            "type": "LinkModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "LinkModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "canLinkToPort",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 163,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "createLinkModel",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 171,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 177,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getCanCreateLinks",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 61,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getCoords",
                    "args": [],
                    "optional": false,
                    "returnType": "{ x: any; y: any; }",
                    "typeParameters": [],
                    "line": 71,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getHeight",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 111,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getLinks",
                    "args": [],
                    "optional": false,
                    "returnType": "EntityMap<LinkModel>",
                    "typeParameters": [],
                    "line": 144,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getLinksArray",
                    "args": [],
                    "optional": false,
                    "returnType": "LinkModel[]",
                    "typeParameters": [],
                    "line": 148,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getLinkType",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 127,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getMagnetic",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 83,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getMaximumLinks",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 119,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getName",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 57,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getNode",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 53,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 115,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getX",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 107,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getY",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 103,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "isLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 167,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "removeLink",
                    "args": [
                        {
                            "name": "linkOrId",
                            "type": "ID | LinkModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "jsdoctags": [
                        {
                            "name": "linkOrId",
                            "type": "ID | LinkModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "selectCanCreateLinks",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 75,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "selectLinks",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<EntityMap<LinkModel>>",
                    "typeParameters": [],
                    "line": 152,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "selectMagnetic",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 87,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "selectX",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 95,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "selectY",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 99,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "setCanCreateLinks",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "setLinkType",
                    "args": [
                        {
                            "name": "type",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "setMagnetic",
                    "args": [
                        {
                            "name": "magnetic",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "jsdoctags": [
                        {
                            "name": "magnetic",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "setMaximumLinks",
                    "args": [
                        {
                            "name": "maximumLinks",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "jsdoctags": [
                        {
                            "name": "maximumLinks",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "updateCoords",
                    "args": [
                        {
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 156,
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 46,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getPainted",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 38,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getParent",
                    "args": [],
                    "optional": false,
                    "returnType": "E",
                    "typeParameters": [],
                    "line": 26,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 66,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelectedEntities",
                    "args": [],
                    "optional": false,
                    "returnType": "BaseModel[]",
                    "typeParameters": [],
                    "line": 82,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 62,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "paintChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<PaintedEvent>",
                    "typeParameters": [],
                    "line": 58,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parentChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ParentChangeEvent<E>>",
                    "typeParameters": [],
                    "line": 34,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 54,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectionChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SelectionEvent>",
                    "typeParameters": [],
                    "line": 78,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 70,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setHovered",
                    "args": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setPainted",
                    "args": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setParent",
                    "args": [
                        {
                            "name": "parent",
                            "type": "E"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "jsdoctags": [
                        {
                            "name": "parent",
                            "type": "E",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setSelected",
                    "args": [
                        {
                            "name": "selected",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "jsdoctags": [
                        {
                            "name": "selected",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 50,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 84,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 94,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 77,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { DefaultPortModel, DefaultLinkModel } from 'ngx-diagrams';\n\n@Component({\n  selector: 'custom-port',\n  templateUrl: './custom.component.html',\n  styleUrls: ['./custom.component.scss'],\n})\nexport class CustomPortComponent extends DefaultPortModel {\n  constructor() {\n    super();\n  }\n\n  createLinkModel(): DefaultLinkModel {\n    return new DefaultLinkModel();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  position: absolute;\n\n  &.in {\n    left: 45%;\n    top: -10px;\n  }\n}\n",
                    "styleUrl": "./custom.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "extends": "DefaultPortModel",
            "templateData": "<svg\n  class=\"in\"\n  *ngIf=\"in\"\n  width=\"24\"\n  height=\"16\"\n  viewBox=\"0 0 24 16\"\n  fill=\"none\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n>\n  <path\n    d=\"M23.4092 0.839456L23.4096 0.839967C23.4709 0.93801 23.5 1.04467 23.5 1.14951C23.5 1.24656 23.4748 1.34624 23.421 1.44004L12.6823 15.1163L12.6657 15.1375L12.6514 15.1603C12.5272 15.3593 12.2828 15.5 11.9998 15.5C11.7164 15.5 11.4727 15.3596 11.3489 15.1608L11.3345 15.1377L11.3177 15.1163L0.578554 1.44007C0.470045 1.25053 0.474001 1.02677 0.590099 0.84006C0.714827 0.640412 0.959347 0.499999 1.2421 0.499999L22.7579 0.5C23.041 0.5 23.285 0.640261 23.4092 0.839456Z\"\n    fill=\"white\"\n    stroke=\"#B0B0B0\"\n  />\n</svg>\n"
        },
        {
            "name": "CustomPortDiagramComponent",
            "id": "component-CustomPortDiagramComponent-ec7f1e69d562f9ff7812b36e6a998987",
            "file": "libs/ngx-diagrams/stories/port/custom/diagram.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "../demo-diagram.component.scss"
            ],
            "styles": [],
            "template": "<ngdx-diagram    class=\"demo-diagram\"\n    [model]=\"diagramModel\"\n  ></ngdx-diagram>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "diagramModel",
                    "type": "DiagramModel",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ComponentFactoryResolver,\n  OnInit,\n  Renderer2,\n} from '@angular/core';\nimport {\n  DiagramEngine,\n  DiagramModel,\n  DefaultNodeModel,\n  DefaultPortModel,\n} from 'ngx-diagrams';\nimport { CustomPortFactory } from './custom.factory';\n\n@Component({\n  selector: 'app-root',\n  template: `<ngdx-diagram\n    class=\"demo-diagram\"\n    [model]=\"diagramModel\"\n  ></ngdx-diagram>`,\n  styleUrls: ['../demo-diagram.component.scss'],\n})\nexport class CustomPortDiagramComponent implements OnInit {\n  diagramModel: DiagramModel;\n\n  constructor(\n    private diagramEngine: DiagramEngine,\n    private resolver: ComponentFactoryResolver,\n    private renderer: Renderer2\n  ) {}\n\n  ngOnInit() {\n    const nodesDefaultDimensions = { height: 200, width: 200 };\n    this.diagramEngine.registerDefaultFactories();\n    this.diagramEngine.registerPortFactory(\n      new CustomPortFactory(this.resolver, this.renderer)\n    );\n\n    this.diagramModel = this.diagramEngine.createDiagram();\n\n    const node1 = new DefaultNodeModel();\n    node1.setCoords({ x: 500, y: 300 });\n    node1.setDimensions(nodesDefaultDimensions);\n    const port1 = new DefaultPortModel({ type: 'custom-port' });\n    node1.addPort(port1);\n\n    this.diagramModel.addAll(node1);\n\n    this.diagramModel.getDiagramEngine().zoomToFit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".demo-diagram {\n  display: flex;\n  height: 100%;\n  min-height: 100vh;\n  background-color: #3c3c3c;\n  background-image: linear-gradient(\n      0deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    ),\n    linear-gradient(\n      90deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    );\n  background-size: 50px 50px;\n}\n",
                    "styleUrl": "../demo-diagram.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine"
                    },
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "DefaultLabelComponent",
            "id": "component-DefaultLabelComponent-c0f18a1d6cec384de938dcf01b44cbdf",
            "file": "libs/ngx-diagrams/src/lib/defaults/components/default-label/default-label.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ngdx-default-label",
            "styleUrls": [
                "./default-label.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./default-label.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "label$",
                    "defaultValue": "createValueState<string>('', this.entityPipe('label'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "DefaultLabelModel"
                    }
                },
                {
                    "name": "coords$",
                    "defaultValue": "createValueState<Coords>({ x: 0, y: 0 }, this.entityPipe('coords'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "rotation$",
                    "defaultValue": "createValueState<number>(0, this.entityPipe('rotation'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "hovered$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('HoveredChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "painted$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('PaintedChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parent$",
                    "defaultValue": "createValueState<E>(null, this.entityPipe('ParentsChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selected$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('SelectedChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "destroyed$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "locked$",
                    "defaultValue": "createValueState(false, this.entityPipe('locked'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "getLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 17,
                    "inheritance": {
                        "file": "DefaultLabelModel"
                    }
                },
                {
                    "name": "selectLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 21,
                    "inheritance": {
                        "file": "DefaultLabelModel"
                    }
                },
                {
                    "name": "setLabel",
                    "args": [
                        {
                            "name": "label",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "jsdoctags": [
                        {
                            "name": "label",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DefaultLabelModel"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "getCoords",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "getRotation",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 25,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "selectCoords",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Coords>",
                    "typeParameters": [],
                    "line": 49,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "selectRotation",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 41,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "SerializedLabelModel",
                    "typeParameters": [],
                    "line": 16,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "setCoords",
                    "args": [
                        {
                            "name": "newCoords",
                            "type": "Partial<Coords>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "jsdoctags": [
                        {
                            "name": "newCoords",
                            "type": "Partial<Coords>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "setRotation",
                    "args": [
                        {
                            "name": "angle",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "jsdoctags": [
                        {
                            "name": "angle",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "getHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 46,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getPainted",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 38,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getParent",
                    "args": [],
                    "optional": false,
                    "returnType": "E",
                    "typeParameters": [],
                    "line": 26,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 66,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelectedEntities",
                    "args": [],
                    "optional": false,
                    "returnType": "BaseModel[]",
                    "typeParameters": [],
                    "line": 82,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 62,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "paintChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<PaintedEvent>",
                    "typeParameters": [],
                    "line": 58,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parentChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ParentChangeEvent<E>>",
                    "typeParameters": [],
                    "line": 34,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 54,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectionChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SelectionEvent>",
                    "typeParameters": [],
                    "line": 78,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 70,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setHovered",
                    "args": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setPainted",
                    "args": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setParent",
                    "args": [
                        {
                            "name": "parent",
                            "type": "E"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "jsdoctags": [
                        {
                            "name": "parent",
                            "type": "E",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setSelected",
                    "args": [
                        {
                            "name": "selected",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "jsdoctags": [
                        {
                            "name": "selected",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 50,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 84,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 94,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 77,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { DefaultLabelModel } from '../../models/default-label.model';\n\n@Component({\n\tselector: 'ngdx-default-label',\n\ttemplateUrl: './default-label.component.html',\n\tstyleUrls: ['./default-label.component.scss'],\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DefaultLabelComponent extends DefaultLabelModel {\n  constructor() {\n    super('ngdx-default-label');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".default-label {\n  color: white;\n  user-select: none;\n}\n",
                    "styleUrl": "./default-label.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 10
            },
            "extends": "DefaultLabelModel",
            "templateData": "<div\n  class=\"default-label\"\n  [ngStyle]=\"{\n\t\ttransform:\n\t\t\t'translate(' +\n\t\t\t(selectCoords() | async).x +\n\t\t\t'px, ' +\n\t\t\t(selectCoords() | async).y +\n\t\t\t'px)' +\n\t\t\t'rotate(' +\n\t\t\t(selectRotation() | async) +\n\t\t\t'deg)'\n\t}\">\n  {{ selectLabel() | async }}\n</div>\n"
        },
        {
            "name": "DefaultLabelStoryComponent",
            "id": "component-DefaultLabelStoryComponent-b0e39b2449a5a52d11b5ae61e50ae5b2",
            "file": "libs/ngx-diagrams/stories/label/default/default.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "../demo-diagram.component.scss"
            ],
            "styles": [],
            "template": "<ngdx-diagram    class=\"demo-diagram\"\n    [model]=\"diagramModel\"\n  ></ngdx-diagram>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "diagramModel",
                    "type": "DiagramModel",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {\n  DiagramEngine,\n  DiagramModel,\n  DefaultNodeModel,\n  DefaultLabelModel,\n} from 'ngx-diagrams';\n\n@Component({\n  selector: 'app-root',\n  template: `<ngdx-diagram\n    class=\"demo-diagram\"\n    [model]=\"diagramModel\"\n  ></ngdx-diagram>`,\n  styleUrls: ['../demo-diagram.component.scss'],\n})\nexport class DefaultLabelStoryComponent implements OnInit {\n  diagramModel: DiagramModel;\n\n  constructor(private diagramEngine: DiagramEngine) {}\n\n  ngOnInit() {\n    const nodesDefaultDimensions = { height: 200, width: 200 };\n    this.diagramEngine.registerDefaultFactories();\n\n    this.diagramModel = this.diagramEngine.createDiagram();\n\n    const node1 = new DefaultNodeModel();\n    node1.setCoords({ x: 500, y: 300 });\n    node1.setDimensions(nodesDefaultDimensions);\n    const outport1 = node1.addOutPort({ name: 'outport1' });\n\n    const node2 = new DefaultNodeModel();\n    node2.setCoords({ x: 1000, y: 300 });\n    node2.setDimensions(nodesDefaultDimensions);\n    const inport = node2.addInPort({ name: 'inport2' });\n\n    const link = outport1.link(inport);\n    const label = new DefaultLabelModel(\"I'm a label\");\n    link.setLabel(label);\n    link.setLocked();\n\n    this.diagramModel.addAll(node1, node2, link);\n\n    this.diagramModel.getDiagramEngine().zoomToFit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".demo-diagram {\n  display: flex;\n  height: 100%;\n  min-height: 100vh;\n  background-color: #3c3c3c;\n  background-image: linear-gradient(\n      0deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    ),\n    linear-gradient(\n      90deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    );\n  background-size: 50px 50px;\n}\n",
                    "styleUrl": "../demo-diagram.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "DefaultLinkComponent",
            "id": "component-DefaultLinkComponent-9d229b45b07492c14df26f91a08f651c",
            "file": "libs/ngx-diagrams/src/lib/defaults/components/default-link/default-link.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ngdx-default-link",
            "styleUrls": [
                "./default-link.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./default-link.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "labelLayer",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'labelLayer', {read: ViewContainerRef, static: true}"
                        }
                    ]
                },
                {
                    "name": "path$",
                    "defaultValue": "createValueState<string>(null, this.entityPipe('path'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "pathFinding",
                    "type": "PathFinding",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "points$",
                    "defaultValue": "createValueState<PointModel[]>([], this.entityPipe('points'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "color$",
                    "defaultValue": "createValueState<string>('rgba(255, 255, 255, 0.5)', this.entityPipe('color'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "inheritance": {
                        "file": "DefaultLinkModel"
                    }
                },
                {
                    "name": "curvyness$",
                    "defaultValue": "createValueState<number>(50, this.entityPipe('curvyness'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "inheritance": {
                        "file": "DefaultLinkModel"
                    }
                },
                {
                    "name": "width$",
                    "defaultValue": "createValueState<number>(3, this.entityPipe('width'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "DefaultLinkModel"
                    }
                },
                {
                    "name": "diagramEngine",
                    "type": "DiagramEngine",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "extras",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "label$",
                    "defaultValue": "createValueState<LabelModel>(null, this.entityPipe('label'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "points",
                    "type": "PointModel[]",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "sourcePort",
                    "type": "PortModel | null",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "targetPort",
                    "type": "PortModel | null",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "hovered$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('HoveredChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "painted$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('PaintedChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parent$",
                    "defaultValue": "createValueState<E>(null, this.entityPipe('ParentsChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selected$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('SelectedChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "destroyed$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "locked$",
                    "defaultValue": "createValueState(false, this.entityPipe('locked'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "calcCenterOfPath",
                    "args": [
                        {
                            "name": "firstPoint",
                            "type": "Coords"
                        },
                        {
                            "name": "secondPoint",
                            "type": "Coords"
                        }
                    ],
                    "optional": false,
                    "returnType": "Coords",
                    "typeParameters": [],
                    "line": 137,
                    "jsdoctags": [
                        {
                            "name": "firstPoint",
                            "type": "Coords",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "secondPoint",
                            "type": "Coords",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calcLabelIncline",
                    "args": [
                        {
                            "name": "firstPoint",
                            "type": "Coords"
                        },
                        {
                            "name": "secondPoint",
                            "type": "Coords"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 120,
                    "jsdoctags": [
                        {
                            "name": "firstPoint",
                            "type": "Coords",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "secondPoint",
                            "type": "Coords",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43
                },
                {
                    "name": "selectPath",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 141
                },
                {
                    "name": "trackByPoints",
                    "args": [
                        {
                            "name": "i",
                            "type": "number"
                        },
                        {
                            "name": "point",
                            "type": "PointModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "i",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "point",
                            "type": "PointModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectColor",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 30,
                    "inheritance": {
                        "file": "DefaultLinkModel"
                    }
                },
                {
                    "name": "selectWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 26,
                    "inheritance": {
                        "file": "DefaultLinkModel"
                    }
                },
                {
                    "name": "setColor",
                    "args": [
                        {
                            "name": "color",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DefaultLinkModel"
                    }
                },
                {
                    "name": "setCurvyness",
                    "args": [
                        {
                            "name": "curvyness",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "jsdoctags": [
                        {
                            "name": "curvyness",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DefaultLinkModel"
                    }
                },
                {
                    "name": "setWidth",
                    "args": [
                        {
                            "name": "width",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "jsdoctags": [
                        {
                            "name": "width",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DefaultLinkModel"
                    }
                },
                {
                    "name": "addPoint",
                    "args": [
                        {
                            "name": "pointModel",
                            "type": "P"
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "defaultValue": "1"
                        }
                    ],
                    "optional": false,
                    "returnType": "P",
                    "typeParameters": [
                        "P"
                    ],
                    "line": 222,
                    "jsdoctags": [
                        {
                            "name": "pointModel",
                            "type": "P",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "defaultValue": "1",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "object",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "object",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "generatePoint",
                    "args": [
                        {
                            "type": "Coords"
                        }
                    ],
                    "optional": false,
                    "returnType": "PointModel",
                    "typeParameters": [],
                    "line": 229,
                    "jsdoctags": [
                        {
                            "type": "Coords",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getExtras",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 55,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getFirstPoint",
                    "args": [],
                    "optional": false,
                    "returnType": "PointModel",
                    "typeParameters": [],
                    "line": 129,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "LabelModel",
                    "typeParameters": [],
                    "line": 189,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getLastPoint",
                    "args": [],
                    "optional": false,
                    "returnType": "PointModel",
                    "typeParameters": [],
                    "line": 133,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getName",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 51,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getPointForPort",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "PointModel",
                    "typeParameters": [],
                    "line": 117,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getPointIndex",
                    "args": [
                        {
                            "name": "point",
                            "type": "PointModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 94,
                    "jsdoctags": [
                        {
                            "name": "point",
                            "type": "PointModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getPointModel",
                    "args": [
                        {
                            "name": "id",
                            "type": "ID"
                        }
                    ],
                    "optional": false,
                    "returnType": "PointModel | null",
                    "typeParameters": [],
                    "line": 98,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "ID",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getPoints",
                    "args": [],
                    "optional": false,
                    "returnType": "PointModel[]",
                    "typeParameters": [],
                    "line": 169,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getPortForPoint",
                    "args": [
                        {
                            "name": "point",
                            "type": "PointModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "PortModel",
                    "typeParameters": [],
                    "line": 107,
                    "jsdoctags": [
                        {
                            "name": "point",
                            "type": "PointModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getSourcePort",
                    "args": [],
                    "optional": false,
                    "returnType": "PortModel",
                    "typeParameters": [],
                    "line": 147,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getTargetPort",
                    "args": [],
                    "optional": false,
                    "returnType": "PortModel",
                    "typeParameters": [],
                    "line": 151,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "isLastPoint",
                    "args": [
                        {
                            "name": "point",
                            "type": "PointModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 89,
                    "jsdoctags": [
                        {
                            "name": "point",
                            "type": "PointModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "point",
                    "args": [
                        {
                            "type": "Coords"
                        }
                    ],
                    "optional": false,
                    "returnType": "PointModel",
                    "typeParameters": [],
                    "line": 165,
                    "jsdoctags": [
                        {
                            "type": "Coords",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "removeMiddlePoints",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 216,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "removePoint",
                    "args": [
                        {
                            "name": "pointModel",
                            "type": "PointModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 204,
                    "jsdoctags": [
                        {
                            "name": "pointModel",
                            "type": "PointModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "removePointsAfter",
                    "args": [
                        {
                            "name": "pointModel",
                            "type": "PointModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 212,
                    "jsdoctags": [
                        {
                            "name": "pointModel",
                            "type": "PointModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "removePointsBefore",
                    "args": [
                        {
                            "name": "pointModel",
                            "type": "PointModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 208,
                    "jsdoctags": [
                        {
                            "name": "pointModel",
                            "type": "PointModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "resetLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 193,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "selectLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LabelModel | null>",
                    "typeParameters": [],
                    "line": 185,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "SerializedLinkModel",
                    "typeParameters": [],
                    "line": 33,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "setExtras",
                    "args": [
                        {
                            "name": "extras",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "extras",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "setLabel",
                    "args": [
                        {
                            "name": "label",
                            "type": "LabelModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 180,
                    "jsdoctags": [
                        {
                            "name": "label",
                            "type": "LabelModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 233,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "setName",
                    "args": [
                        {
                            "name": "name",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "setPoints",
                    "args": [
                        {
                            "name": "points",
                            "type": "PointModel[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "jsdoctags": [
                        {
                            "name": "points",
                            "type": "PointModel[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "setSourcePort",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "setTargetPort",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 46,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getPainted",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 38,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getParent",
                    "args": [],
                    "optional": false,
                    "returnType": "E",
                    "typeParameters": [],
                    "line": 26,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 66,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelectedEntities",
                    "args": [],
                    "optional": false,
                    "returnType": "BaseModel[]",
                    "typeParameters": [],
                    "line": 82,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 62,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "paintChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<PaintedEvent>",
                    "typeParameters": [],
                    "line": 58,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parentChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ParentChangeEvent<E>>",
                    "typeParameters": [],
                    "line": 34,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 54,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectionChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SelectionEvent>",
                    "typeParameters": [],
                    "line": 78,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 70,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setHovered",
                    "args": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setPainted",
                    "args": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setParent",
                    "args": [
                        {
                            "name": "parent",
                            "type": "E"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "jsdoctags": [
                        {
                            "name": "parent",
                            "type": "E",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setSelected",
                    "args": [
                        {
                            "name": "selected",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "jsdoctags": [
                        {
                            "name": "selected",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 50,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 84,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 94,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 77,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  OnInit,\n  ViewChild,\n  ViewContainerRef\n} from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Coords } from '../../../interfaces';\nimport { LabelModel } from '../../../models/label.model';\nimport { PointModel } from '../../../models/point.model';\nimport { PathFinding } from '../../../plugins/smart-routing.plugin';\nimport { createValueState } from '../../../state/state';\nimport { generateCurvePath, generateDynamicPath } from '../../../utils/tool-kit.util';\nimport { DefaultLinkModel } from '../../models/default-link.model';\n\n@Component({\n  selector: 'ngdx-default-link',\n  templateUrl: './default-link.component.html',\n  styleUrls: ['./default-link.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DefaultLinkComponent extends DefaultLinkModel implements AfterViewInit, OnInit {\n  @ViewChild('labelLayer', { read: ViewContainerRef, static: true })\n  labelLayer: ViewContainerRef;\n\n  path$ = createValueState<string>(null, this.entityPipe('path'));\n  points$ = createValueState<PointModel[]>([], this.entityPipe('points'));\n\n  pathFinding: PathFinding; // only set when smart routing is active\n\n  constructor(private cdRef: ChangeDetectorRef) {\n    super({ type: 'ngdx-default-link' });\n  }\n\n  trackByPoints(i: number, point: PointModel) {\n    return point.id;\n  }\n\n  ngOnInit() {\n    if (this.diagramEngine.getSmartRouting()) {\n      this.pathFinding = this.diagramEngine.getPathfinding();\n    }\n  }\n\n  ngAfterViewInit() {\n    const firstPCoords$ = this.getFirstPoint().selectCoords();\n    const lastPCoords$ = this.getLastPoint().selectCoords();\n\n    // Observe link coords and update drawing accordingly\n    combineLatest([firstPCoords$, lastPCoords$])\n      .pipe(takeUntil(this.onEntityDestroy()))\n      .subscribe(([firstPCoords, lastPCoords]) => {\n        const points = [firstPCoords, lastPCoords];\n\n        if (this.diagramEngine.getSmartRouting()) {\n          // first step: calculate a direct path between the points being linked\n          const directPathCoords = this.pathFinding.calculateDirectPath(firstPCoords, lastPCoords);\n          const routingMatrix = this.diagramEngine.getRoutingMatrix();\n\n          // now we need to extract, from the routing matrix, the very first walkable points\n          // so they can be used as origin and destination of the link to be created\n          const smartLink = this.pathFinding.calculateLinkStartEndCoords(routingMatrix, directPathCoords);\n\n          if (smartLink) {\n            const { start, end, pathToStart, pathToEnd } = smartLink;\n            // second step: calculate a path avoiding hitting other elements\n            const simplifiedPath = this.pathFinding.calculateDynamicPath(\n              routingMatrix,\n              start,\n              end,\n              pathToStart,\n              pathToEnd\n            );\n            const smartPath = generateDynamicPath(simplifiedPath);\n            this.path$.set(smartPath).emit();\n          }\n        } else {\n          // handle regular links\n          // draw the smoothing\n          // if the points are too close, just draw a straight line\n          const isHorizontal = Math.abs(firstPCoords.x - lastPCoords.x) > Math.abs(firstPCoords.y - lastPCoords.y);\n          const xOrY = isHorizontal ? 'x' : 'y';\n          let isStraight = false;\n          if (Math.abs(points[0][xOrY] - points[1][xOrY]) < 50) {\n            isStraight = true;\n          }\n\n          const path = generateCurvePath(firstPCoords, lastPCoords, isStraight ? 0 : this.curvyness);\n          this.path$.set(path).emit();\n        }\n\n        const label = this.getLabel();\n        // update label position\n        if (label) {\n          label.setCoords(this.calcCenterOfPath(firstPCoords, lastPCoords));\n\n          // TODO: check whether we want the label to rotate along with the line\n          // label.setRotation(this.calcLabelIncline(firstPCoords, lastPCoords));\n        }\n\n        // TODO: handle the multiple lines in between the points\n        // https://github.com/projectstorm/react-diagrams/blob/master/src/defaults/widgets/DefaultLinkWidget.tsx#L344-L371\n\n        this.cdRef.detectChanges();\n      });\n\n    // observe link label and draw/remove accordingly\n    this.selectLabel()\n      .pipe(filter(Boolean))\n      .subscribe((label: LabelModel) => {\n        this.diagramEngine.generateWidgetForLabel(label, this.labelLayer);\n        this.cdRef.detectChanges();\n      });\n  }\n\n  calcLabelIncline(firstPoint: Coords, secondPoint: Coords): number {\n    const dy = secondPoint.y - firstPoint.y;\n    const dx = secondPoint.x - firstPoint.x;\n\n    if (dx === 0) {\n      return 0;\n    }\n\n    let inclineAngel = (Math.atan(dy / dx) * 180) / Math.PI;\n\n    if (inclineAngel < 0) {\n      inclineAngel += 180;\n    }\n\n    return inclineAngel;\n  }\n\n  calcCenterOfPath(firstPoint: Coords, secondPoint: Coords): Coords {\n    return { x: (firstPoint.x + secondPoint.x) / 2 + 20, y: (firstPoint.y + secondPoint.y) / 2 + 20 };\n  }\n\n  selectPath(): Observable<string> {\n    return this.path$.value$;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".link-container {\n  position: relative;\n  fill: none;\n  overflow: visible;\n  pointer-events: all;\n}\n\n.default-link {\n  fill: none;\n  overflow: visible;\n\n  @keyframes dash {\n    from {\n      stroke-dashoffset: 24;\n    }\n    to {\n      stroke-dashoffset: 0;\n    }\n  }\n\n  &.hovered {\n    stroke: rgb(0, 192, 255);\n    stroke-dasharray: 10, 2;\n    animation: dash 1s linear infinite;\n  }\n}\n\n.default-point {\n  color: lightgray;\n  overflow: visible;\n  pointer-events: all;\n\n  &.hovered {\n    color: rgb(0, 192, 255);\n  }\n}\n",
                    "styleUrl": "./default-link.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "DefaultLinkModel",
            "implements": [
                "AfterViewInit",
                "OnInit"
            ],
            "templateData": "<!-- Label Host -->\n<ng-template #labelLayer></ng-template>\n\n<svg class=\"link-container\">\n  <!-- Link -->\n  <g [id]=\"id\">\n    <path\n      [attr.stroke-width]=\"width\"\n      [attr.stroke]=\"selectColor() | async\"\n      [attr.d]=\"selectPath() | async\"\n      class=\"default-link\"\n      (mouseleave)=\"setHovered(false)\"\n      (mouseenter)=\"setHovered()\"\n      [ngClass]=\"{ hovered: selectHovered() | async }\"\n    ></path>\n    <path\n      class=\"default-link\"\n      (mouseleave)=\"setHovered(false)\"\n      (mouseenter)=\"setHovered()\"\n      [attr.stroke-width]=\"20\"\n      [attr.stroke]=\"selectColor() | async\"\n      [attr.stroke-linecap]=\"'round'\"\n      [attr.data-linkid]=\"id\"\n      [attr.stroke-opacity]=\"(selectHovered() | async) ? '0.1' : '0'\"\n      [attr.d]=\"selectPath() | async\"\n    ></path>\n  </g>\n\n  <!-- Points -->\n  <g *ngFor=\"let point of getPoints(); trackBy: trackByPoints\" [id]=\"point.id\">\n    <circle\n      fill=\"currentColor\"\n      [attr.cx]=\"point.selectX() | async\"\n      [attr.cy]=\"point.selectY() | async\"\n      r=\"5\"\n      class=\"default-point\"\n      [ngClass]=\"{ hovered: point.selectHovered() | async }\"\n    />\n    <circle\n      [attr.data-pointid]=\"point.id\"\n      [attr.data-linkid]=\"id\"\n      (mouseleave)=\"point.setHovered(false); setHovered(false)\"\n      (mouseenter)=\"point.setHovered(); setHovered()\"\n      [attr.cx]=\"point.selectX() | async\"\n      [attr.cy]=\"point.selectY() | async\"\n      r=\"15\"\n      [attr.opacity]=\"0\"\n      [ngClass]=\"{ selected: point.selectSelected() | async }\"\n    />\n  </g>\n</svg>\n"
        },
        {
            "name": "DefaultLinkStoryComponent",
            "id": "component-DefaultLinkStoryComponent-1a2cab84ce4567ab5dcd0a370ec119db",
            "file": "libs/ngx-diagrams/stories/link/default/default.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "../demo-diagram.component.scss"
            ],
            "styles": [],
            "template": "<ngdx-diagram    class=\"demo-diagram\"\n    [model]=\"diagramModel\"\n  ></ngdx-diagram>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "diagramModel",
                    "type": "DiagramModel",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { DiagramEngine, DiagramModel, DefaultNodeModel } from 'ngx-diagrams';\n\n@Component({\n  selector: 'app-root',\n  template: `<ngdx-diagram\n    class=\"demo-diagram\"\n    [model]=\"diagramModel\"\n  ></ngdx-diagram>`,\n  styleUrls: ['../demo-diagram.component.scss'],\n})\nexport class DefaultLinkStoryComponent implements OnInit {\n  diagramModel: DiagramModel;\n\n  constructor(private diagramEngine: DiagramEngine) {}\n\n  ngOnInit() {\n    const nodesDefaultDimensions = { height: 200, width: 200 };\n    this.diagramEngine.registerDefaultFactories();\n\n    this.diagramModel = this.diagramEngine.createDiagram();\n\n    const node1 = new DefaultNodeModel();\n    node1.setCoords({ x: 500, y: 300 });\n    node1.setDimensions(nodesDefaultDimensions);\n    const outport1 = node1.addOutPort({ name: 'outport1' });\n\n    const node2 = new DefaultNodeModel();\n    node2.setCoords({ x: 1000, y: 0 });\n    node2.setDimensions(nodesDefaultDimensions);\n    const inport = node2.addInPort({ name: 'inport2' });\n\n    for (let index = 0; index < 2; index++) {\n      const nodeLoop = new DefaultNodeModel();\n      nodeLoop.setCoords({ x: 1000, y: 300 + index * 300 });\n      nodeLoop.setDimensions(nodesDefaultDimensions);\n      nodeLoop.addInPort({ name: `inport${index + 3}` });\n\n      this.diagramModel.addNode(nodeLoop);\n    }\n\n    const link = outport1.link(inport);\n    link.setLocked();\n\n    this.diagramModel.addAll(node1, node2, link);\n\n    this.diagramModel.getDiagramEngine().zoomToFit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".demo-diagram {\n  display: flex;\n  height: 100%;\n  min-height: 100vh;\n  background-color: #3c3c3c;\n  background-image: linear-gradient(\n      0deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    ),\n    linear-gradient(\n      90deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    );\n  background-size: 50px 50px;\n}\n",
                    "styleUrl": "../demo-diagram.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "DefaultNodeComponent",
            "id": "component-DefaultNodeComponent-48783ae7ac933b7f9da313dd86a734cc",
            "file": "libs/ngx-diagrams/stories/node/default/default.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "../demo-diagram.component.scss"
            ],
            "styles": [],
            "template": "<ngdx-diagram    class=\"demo-diagram\"\n    [model]=\"diagramModel\"\n  ></ngdx-diagram>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "diagramModel",
                    "type": "DiagramModel",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "e",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnChanges, OnInit, SimpleChanges } from '@angular/core';\nimport { DiagramEngine, DiagramModel, DefaultNodeModel } from 'ngx-diagrams';\n\n@Component({\n  selector: 'app-root',\n  template: `<ngdx-diagram\n    class=\"demo-diagram\"\n    [model]=\"diagramModel\"\n  ></ngdx-diagram>`,\n  styleUrls: ['../demo-diagram.component.scss'],\n})\nexport class DefaultNodeComponent implements OnInit, OnChanges {\n  diagramModel: DiagramModel;\n\n  constructor(private diagramEngine: DiagramEngine) {}\n\n  ngOnInit() {\n    const nodesDefaultDimensions = { height: 200, width: 200 };\n    this.diagramEngine.registerDefaultFactories();\n\n    this.diagramModel = this.diagramEngine.createDiagram();\n\n    const node1 = new DefaultNodeModel();\n    node1.setCoords({ x: 500, y: 300 });\n    node1.setDimensions(nodesDefaultDimensions);\n\n    this.diagramModel.addAll(node1);\n\n    this.diagramModel.getDiagramEngine().zoomToFit();\n  }\n\n  ngOnChanges(e: SimpleChanges) {\n    if (this.diagramModel) {\n      if (e.nodeHeight) {\n        Object.values(this.diagramModel.getNodes()).forEach((node) => {\n          node.setHeight(e.nodeHeight.currentValue);\n        });\n      }\n\n      if (e.nodeWidth) {\n        Object.values(this.diagramModel.getNodes()).forEach((node) => {\n          node.setWidth(e.nodeWidth.currentValue);\n        });\n      }\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".demo-diagram {\n  display: flex;\n  height: 100%;\n  min-height: 100vh;\n  background-color: #3c3c3c;\n  background-image: linear-gradient(\n      0deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    ),\n    linear-gradient(\n      90deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    );\n  background-size: 50px 50px;\n}\n",
                    "styleUrl": "../demo-diagram.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ]
        },
        {
            "name": "DefaultNodeComponent",
            "id": "component-DefaultNodeComponent-c69587006af63dc792fe4143d95c4de6-1",
            "file": "libs/ngx-diagrams/src/lib/defaults/components/default-node/default-node.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ngdx-default-node",
            "styleUrls": [
                "./default-node.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./default-node.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "portsLayer",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'portsLayer', {read: ViewContainerRef, static: true}"
                        }
                    ]
                },
                {
                    "name": "color",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "inheritance": {
                        "file": "DefaultNodeModel"
                    }
                },
                {
                    "name": "height$",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "inheritance": {
                        "file": "DefaultNodeModel"
                    }
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "DefaultNodeModel"
                    }
                },
                {
                    "name": "width$",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "inheritance": {
                        "file": "DefaultNodeModel"
                    }
                },
                {
                    "name": "coords$",
                    "defaultValue": "createValueState<Coords>({ x: 0, y: 0 }, this.entityPipe('coords'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "diagramEngine$",
                    "defaultValue": "createValueState<DiagramEngine>(null, this.entityPipe('diagramEngine'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "dimensions$",
                    "defaultValue": "createValueState<Dimensions>({ width: 0, height: 0 }, this.entityPipe('dimensions'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "extras$",
                    "defaultValue": "createValueState<any>({}, this.entityPipe('extras'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "ports$",
                    "defaultValue": "createEntityState<P>([], this.entityPipe('ports'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "hovered$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('HoveredChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "painted$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('PaintedChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parent$",
                    "defaultValue": "createValueState<E>(null, this.entityPipe('ParentsChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selected$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('SelectedChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "destroyed$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "locked$",
                    "defaultValue": "createValueState(false, this.entityPipe('locked'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "generatePort",
                    "args": [
                        {
                            "name": "port",
                            "type": "DefaultPortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "DefaultPortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                },
                {
                    "name": "addInPort",
                    "args": [
                        {
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29,
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DefaultNodeModel"
                    }
                },
                {
                    "name": "addOutPort",
                    "args": [
                        {
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 52,
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DefaultNodeModel"
                    }
                },
                {
                    "name": "addPort",
                    "args": [
                        {
                            "name": "port",
                            "type": "P"
                        }
                    ],
                    "optional": false,
                    "returnType": "P",
                    "typeParameters": [],
                    "line": 117,
                    "description": "<p>Assign a port to the node and set the node as its getParent</p>\n",
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "P",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 3515,
                                "end": 3522,
                                "flags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>the inserted port</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "coordsChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Coords>",
                    "typeParameters": [],
                    "line": 97,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 196,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "dimensionChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Dimensions>",
                    "typeParameters": [],
                    "line": 156,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getCoords",
                    "args": [],
                    "optional": false,
                    "returnType": "Coords",
                    "typeParameters": [],
                    "line": 48,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getDiagramEngine",
                    "args": [],
                    "optional": false,
                    "returnType": "DiagramEngine",
                    "typeParameters": [],
                    "line": 36,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getDimensions",
                    "args": [],
                    "optional": false,
                    "returnType": "Dimensions",
                    "typeParameters": [],
                    "line": 151,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getExtras",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 188,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getHeight",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 160,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getPort",
                    "args": [
                        {
                            "name": "id",
                            "type": "ID"
                        }
                    ],
                    "optional": false,
                    "returnType": "P",
                    "typeParameters": [],
                    "line": 129,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "ID",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getPorts",
                    "args": [],
                    "optional": false,
                    "returnType": "EntityMap<P>",
                    "typeParameters": [],
                    "line": 139,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getPortsArray",
                    "args": [],
                    "optional": false,
                    "returnType": "P[]",
                    "typeParameters": [],
                    "line": 143,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getSelectedEntities",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 81,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 168,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "removeAllPorts",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 201,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "removePort",
                    "args": [
                        {
                            "name": "portOrId",
                            "type": "ID | P"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 123,
                    "jsdoctags": [
                        {
                            "name": "portOrId",
                            "type": "ID | P",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "selectCoords",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Coords>",
                    "typeParameters": [],
                    "line": 101,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "selectDiagramEngine",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<DiagramEngine>",
                    "typeParameters": [],
                    "line": 40,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "selectExtras",
                    "args": [
                        {
                            "name": "selector",
                            "type": "function",
                            "optional": true,
                            "function": [
                                {
                                    "name": "extra",
                                    "type": "E"
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<E>",
                    "typeParameters": [
                        "E"
                    ],
                    "line": 192,
                    "jsdoctags": [
                        {
                            "name": "selector",
                            "type": "function",
                            "optional": true,
                            "function": [
                                {
                                    "name": "extra",
                                    "type": "E"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "selectHeight",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 180,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "selectPorts",
                    "args": [
                        {
                            "name": "selector",
                            "type": "function",
                            "optional": true,
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<P[]>",
                    "typeParameters": [],
                    "line": 133,
                    "jsdoctags": [
                        {
                            "name": "selector",
                            "type": "function",
                            "optional": true,
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "selectWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 176,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "selectX",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 105,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "selectY",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 109,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "SerializedNodeModel",
                    "typeParameters": [],
                    "line": 66,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "setCoords",
                    "args": [
                        {
                            "type": "Coords"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "jsdoctags": [
                        {
                            "type": "Coords",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "setDiagramEngine",
                    "args": [
                        {
                            "name": "diagramEngine",
                            "type": "DiagramEngine"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "jsdoctags": [
                        {
                            "name": "diagramEngine",
                            "type": "DiagramEngine",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "setDimensions",
                    "args": [
                        {
                            "name": "dimensions",
                            "type": "Partial<Dimensions>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "jsdoctags": [
                        {
                            "name": "dimensions",
                            "type": "Partial<Dimensions>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "setExtras",
                    "args": [
                        {
                            "name": "extras",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 184,
                    "jsdoctags": [
                        {
                            "name": "extras",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "setHeight",
                    "args": [
                        {
                            "name": "height",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 164,
                    "jsdoctags": [
                        {
                            "name": "height",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "setWidth",
                    "args": [
                        {
                            "name": "width",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 172,
                    "jsdoctags": [
                        {
                            "name": "width",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 46,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getPainted",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 38,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getParent",
                    "args": [],
                    "optional": false,
                    "returnType": "E",
                    "typeParameters": [],
                    "line": 26,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 66,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelectedEntities",
                    "args": [],
                    "optional": false,
                    "returnType": "BaseModel[]",
                    "typeParameters": [],
                    "line": 82,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 62,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "paintChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<PaintedEvent>",
                    "typeParameters": [],
                    "line": 58,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parentChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ParentChangeEvent<E>>",
                    "typeParameters": [],
                    "line": 34,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 54,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectionChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SelectionEvent>",
                    "typeParameters": [],
                    "line": 78,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 70,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setHovered",
                    "args": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setPainted",
                    "args": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setParent",
                    "args": [
                        {
                            "name": "parent",
                            "type": "E"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "jsdoctags": [
                        {
                            "name": "parent",
                            "type": "E",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setSelected",
                    "args": [
                        {
                            "name": "selected",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "jsdoctags": [
                        {
                            "name": "selected",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 50,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 84,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 94,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 77,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnInit, ViewChild, ViewContainerRef } from '@angular/core';\nimport { filter, switchMap } from 'rxjs/operators';\nimport { DefaultPortModel } from '../../models';\nimport { DefaultNodeModel } from '../../models/default-node.model';\n\n@Component({\n  selector: 'ngdx-default-node',\n  templateUrl: './default-node.component.html',\n  styleUrls: ['./default-node.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DefaultNodeComponent extends DefaultNodeModel implements OnInit {\n  @ViewChild('portsLayer', { read: ViewContainerRef, static: true })\n  portsLayer: ViewContainerRef;\n\n  constructor() {\n    super({ type: 'ngdx-default-node' });\n  }\n\n  ngOnInit() {\n    // when node is painted and port isn't, draw ports\n\n    this.paintChanges()\n      .pipe(\n        filter((paintedE) => paintedE.isPainted),\n        switchMap(() => this.selectPorts())\n      )\n      .subscribe((ports) => {\n        ports.forEach((port: DefaultPortModel) => {\n          if (!port.getPainted()) {\n            this.generatePort(port);\n          }\n        });\n      });\n  }\n\n  generatePort(port: DefaultPortModel) {\n    const diagramEngine = this.getDiagramEngine();\n    diagramEngine.generateWidgetForPort(port, this.portsLayer);\n\n    port.paintChanges().subscribe((paintedEvent) => {\n      if (paintedEvent.isPainted) {\n        port.updateCoords(diagramEngine.getPortCoords(port));\n      }\n    });\n  }\n\n  // https://github.com/projectstorm/react-diagrams/blob/master/src/defaults/models/DefaultNodeModel.ts\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  &.selected {\n    .default-node {\n      background-color: white !important;\n      border-color: blue;\n    }\n  }\n\n  .default-node {\n    pointer-events: all;\n    width: 100%;\n    border-radius: 10px;\n    transition: all 0.3s ease-in-out;\n\n    cursor: auto;\n    .title {\n      padding: 10px;\n      text-align: center;\n      border-bottom: 1px solid blue;\n    }\n  }\n\n  .ports {\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column;\n  }\n}\n",
                    "styleUrl": "./default-node.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 14
            },
            "extends": "DefaultNodeModel",
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "DefaultNodeComponent-1",
            "templateData": "<div\n  class=\"default-node\"\n  [ngStyle]=\"{\n    'height.px': height$ | async,\n    'width.px': width$ | async,\n    'background-color': color\n  }\"\n>\n  <div class=\"ports\">\n    <ng-template #portsLayer></ng-template>\n  </div>\n</div>\n"
        },
        {
            "name": "DefaultPortComponent",
            "id": "component-DefaultPortComponent-9817f7879dfa0a7cad0906090258f2fd",
            "file": "libs/ngx-diagrams/stories/port/default/default.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "../demo-diagram.component.scss"
            ],
            "styles": [],
            "template": "<ngdx-diagram    class=\"demo-diagram\"\n    [model]=\"diagramModel\"\n  ></ngdx-diagram>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "diagramModel",
                    "type": "DiagramModel",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { DiagramEngine, DiagramModel, DefaultNodeModel } from 'ngx-diagrams';\n\n@Component({\n  selector: 'app-root',\n  template: `<ngdx-diagram\n    class=\"demo-diagram\"\n    [model]=\"diagramModel\"\n  ></ngdx-diagram>`,\n  styleUrls: ['../demo-diagram.component.scss'],\n})\nexport class DefaultPortComponent implements OnInit {\n  diagramModel: DiagramModel;\n\n  constructor(private diagramEngine: DiagramEngine) {}\n\n  ngOnInit() {\n    const nodesDefaultDimensions = { height: 200, width: 200 };\n    this.diagramEngine.registerDefaultFactories();\n\n    this.diagramModel = this.diagramEngine.createDiagram();\n\n    const node1 = new DefaultNodeModel();\n    node1.setCoords({ x: 500, y: 300 });\n    node1.setDimensions(nodesDefaultDimensions);\n    node1.addInPort({ name: 'inport1' });\n    node1.addOutPort({ name: 'outport1' });\n\n    this.diagramModel.addAll(node1);\n\n    this.diagramModel.getDiagramEngine().zoomToFit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".demo-diagram {\n  display: flex;\n  height: 100%;\n  min-height: 100vh;\n  background-color: #3c3c3c;\n  background-image: linear-gradient(\n      0deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    ),\n    linear-gradient(\n      90deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    );\n  background-size: 50px 50px;\n}\n",
                    "styleUrl": "../demo-diagram.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "DefaultPortComponent",
            "id": "component-DefaultPortComponent-04349aadbc7bade7fd7310c464cbb60e-1",
            "file": "libs/ngx-diagrams/src/lib/defaults/components/default-port/default-port.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ngdx-default-port",
            "styleUrls": [
                "./default-port.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./default-port.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "in",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "inheritance": {
                        "file": "DefaultPortModel"
                    }
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "inheritance": {
                        "file": "DefaultPortModel"
                    }
                },
                {
                    "name": "links",
                    "type": "HashMap<any>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "inheritance": {
                        "file": "DefaultPortModel"
                    }
                },
                {
                    "name": "canCreateLinks$",
                    "defaultValue": "createValueState(true, this.entityPipe('magnetic'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "height$",
                    "defaultValue": "createValueState(0, this.entityPipe('y'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "links$",
                    "defaultValue": "createEntityState<LinkModel>([], this.entityPipe('links'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "linkType",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "magnetic$",
                    "defaultValue": "createValueState(true, this.entityPipe('magnetic'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "maximumLinks",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "width$",
                    "defaultValue": "createValueState(0, this.entityPipe('y'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "x$",
                    "defaultValue": "createValueState(0, this.entityPipe('x'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "y$",
                    "defaultValue": "createValueState(0, this.entityPipe('y'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "hovered$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('HoveredChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "painted$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('PaintedChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parent$",
                    "defaultValue": "createValueState<E>(null, this.entityPipe('ParentsChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selected$",
                    "defaultValue": "createValueState<boolean>(false, this.entityPipe('SelectedChange'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "destroyed$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "locked$",
                    "defaultValue": "createValueState(false, this.entityPipe('locked'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "canLinkToPort",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DefaultPortModel"
                    }
                },
                {
                    "name": "createLinkModel",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 53,
                    "inheritance": {
                        "file": "DefaultPortModel"
                    }
                },
                {
                    "name": "link",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "LinkModel",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DefaultPortModel"
                    }
                },
                {
                    "name": "addLink",
                    "args": [
                        {
                            "name": "link",
                            "type": "LinkModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "LinkModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "canLinkToPort",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 163,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "createLinkModel",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 171,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 177,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getCanCreateLinks",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 61,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getCoords",
                    "args": [],
                    "optional": false,
                    "returnType": "{ x: any; y: any; }",
                    "typeParameters": [],
                    "line": 71,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getHeight",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 111,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getLinks",
                    "args": [],
                    "optional": false,
                    "returnType": "EntityMap<LinkModel>",
                    "typeParameters": [],
                    "line": 144,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getLinksArray",
                    "args": [],
                    "optional": false,
                    "returnType": "LinkModel[]",
                    "typeParameters": [],
                    "line": 148,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getLinkType",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 127,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getMagnetic",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 83,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getMaximumLinks",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 119,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getName",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 57,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getNode",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 53,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 115,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getX",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 107,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getY",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 103,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "isLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 167,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "removeLink",
                    "args": [
                        {
                            "name": "linkOrId",
                            "type": "ID | LinkModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "jsdoctags": [
                        {
                            "name": "linkOrId",
                            "type": "ID | LinkModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "selectCanCreateLinks",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 75,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "selectLinks",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<EntityMap<LinkModel>>",
                    "typeParameters": [],
                    "line": 152,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "selectMagnetic",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 87,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "selectX",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 95,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "selectY",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 99,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "setCanCreateLinks",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "setLinkType",
                    "args": [
                        {
                            "name": "type",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "setMagnetic",
                    "args": [
                        {
                            "name": "magnetic",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "jsdoctags": [
                        {
                            "name": "magnetic",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "setMaximumLinks",
                    "args": [
                        {
                            "name": "maximumLinks",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "jsdoctags": [
                        {
                            "name": "maximumLinks",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "updateCoords",
                    "args": [
                        {
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 156,
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 46,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getPainted",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 38,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getParent",
                    "args": [],
                    "optional": false,
                    "returnType": "E",
                    "typeParameters": [],
                    "line": 26,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 66,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelectedEntities",
                    "args": [],
                    "optional": false,
                    "returnType": "BaseModel[]",
                    "typeParameters": [],
                    "line": 82,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 62,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "paintChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<PaintedEvent>",
                    "typeParameters": [],
                    "line": 58,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parentChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ParentChangeEvent<E>>",
                    "typeParameters": [],
                    "line": 34,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 54,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectionChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SelectionEvent>",
                    "typeParameters": [],
                    "line": 78,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 70,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setHovered",
                    "args": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setPainted",
                    "args": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setParent",
                    "args": [
                        {
                            "name": "parent",
                            "type": "E"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "jsdoctags": [
                        {
                            "name": "parent",
                            "type": "E",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setSelected",
                    "args": [
                        {
                            "name": "selected",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "jsdoctags": [
                        {
                            "name": "selected",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "HashMap<any>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 50,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 84,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 94,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 77,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { DefaultPortModel } from '../../models/default-port.model';\n\n@Component({\n\tselector: 'ngdx-default-port',\n\ttemplateUrl: './default-port.component.html',\n\tstyleUrls: ['./default-port.component.scss'],\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DefaultPortComponent extends DefaultPortModel {\n  constructor() {\n    super();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  position: relative;\n  width: 10px;\n  height: 10px;\n  border-radius: 60px;\n  border: 1px solid gray;\n  background-color: lightgray;\n  margin: 10px 0;\n\n  &:hover {\n    background-color: green;\n  }\n\n  &.out {\n    right: -195px;\n  }\n\n  &.in {\n    left: -5px;\n  }\n}\n",
                    "styleUrl": "./default-port.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 10
            },
            "extends": "DefaultPortModel",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "DefaultPortComponent-1",
            "templateData": "<div [ngClass]=\"in ? 'in' : 'out'\" draggable=\"false\"></div>\n"
        },
        {
            "name": "NgxDiagramComponent",
            "id": "component-NgxDiagramComponent-3f413422b6cabf6c23fb59b5a803eeca",
            "file": "libs/ngx-diagrams/src/lib/containers/diagram/diagram.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ngdx-diagram",
            "styleUrls": [
                "diagram.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "diagram.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "allowCanvasTranslation",
                    "defaultValue": "true",
                    "line": 41
                },
                {
                    "name": "allowCanvasZoom",
                    "defaultValue": "true",
                    "line": 40
                },
                {
                    "name": "allowLooseLinks",
                    "defaultValue": "true",
                    "line": 43
                },
                {
                    "name": "inverseZoom",
                    "defaultValue": "true",
                    "line": 42
                },
                {
                    "name": "maxZoomIn",
                    "defaultValue": "null",
                    "line": 45,
                    "type": "number"
                },
                {
                    "name": "maxZoomOut",
                    "defaultValue": "null",
                    "line": 44,
                    "type": "number"
                },
                {
                    "name": "model",
                    "line": 39,
                    "type": "DiagramModel"
                },
                {
                    "name": "portMagneticRadius",
                    "defaultValue": "30",
                    "line": 46
                },
                {
                    "name": "smartRouting",
                    "defaultValue": "false",
                    "line": 47
                }
            ],
            "outputsClass": [
                {
                    "name": "actionStartedFiring",
                    "defaultValue": "new EventEmitter<BaseAction>()",
                    "line": 49,
                    "type": "EventEmitter"
                },
                {
                    "name": "actionStillFiring",
                    "defaultValue": "new EventEmitter<BaseAction>()",
                    "line": 50,
                    "type": "EventEmitter"
                },
                {
                    "name": "actionStoppedFiring",
                    "defaultValue": "new EventEmitter<BaseAction>()",
                    "line": 51,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "action$",
                    "defaultValue": "new BehaviorSubject<BaseAction>(null)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "canvas",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'canvas', {read: ElementRef}"
                        }
                    ]
                },
                {
                    "name": "destroyed$",
                    "defaultValue": "new ReplaySubject<boolean>(1)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "links$",
                    "type": "Observable<EntityMap<LinkModel>>",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "linksLayer",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'linksLayer', {read: ViewContainerRef}"
                        }
                    ]
                },
                {
                    "name": "ngZone",
                    "type": "NgZone",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "nodes$",
                    "type": "Observable<EntityMap<NodeModel>>",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "nodesLayer",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'nodesLayer', {read: ViewContainerRef}"
                        }
                    ]
                },
                {
                    "name": "nodesRendered$",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "modifierKind": [
                        113
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "createMouseListeners",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 626,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "fireAction",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "description": "<p>fire the action registered and notify subscribers</p>\n"
                },
                {
                    "name": "getLinksLayer",
                    "args": [],
                    "optional": false,
                    "returnType": "HTMLDivElement",
                    "typeParameters": [],
                    "line": 622,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "getMouseElement",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 134,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNodesLayer",
                    "args": [],
                    "optional": false,
                    "returnType": "HTMLDivElement",
                    "typeParameters": [],
                    "line": 618,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "initLinks",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 571,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "initNodes",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 548,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "initSubs",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 605,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89
                },
                {
                    "name": "onMouseDown",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 417,
                    "decorators": [
                        {
                            "name": "OutsideZone"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMouseMove",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 298,
                    "description": "",
                    "decorators": [
                        {
                            "name": "OutsideZone"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 9489,
                                "end": 9494,
                                "flags": 0,
                                "escapedText": "event"
                            },
                            "type": "MouseEvent",
                            "tagName": {
                                "pos": 9483,
                                "end": 9488,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>MouseEvent</p>\n"
                        }
                    ]
                },
                {
                    "name": "onMouseUp",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 184,
                    "decorators": [
                        {
                            "name": "OutsideZone"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMouseWheel",
                    "args": [
                        {
                            "name": "event",
                            "type": "WheelEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 483,
                    "decorators": [
                        {
                            "name": "OutsideZone"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "WheelEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectAction",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 121
                },
                {
                    "name": "setLayerStyles",
                    "args": [
                        {
                            "name": "x",
                            "type": "number"
                        },
                        {
                            "name": "y",
                            "type": "number"
                        },
                        {
                            "name": "zoom",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 537,
                    "decorators": [
                        {
                            "name": "OutsideZone"
                        }
                    ],
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "x",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "y",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "zoom",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "shouldDrawSelectionBox",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 125
                },
                {
                    "name": "startFiringAction",
                    "args": [
                        {
                            "name": "action",
                            "type": "BaseAction"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "description": "<p>Register the new action, pre firing and notify subscribers</p>\n",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "BaseAction",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "stopFiringAction",
                    "args": [
                        {
                            "name": "shouldSkipEvent",
                            "type": "boolean",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "description": "<p>Unregister the action, post firing and notify subscribers</p>\n",
                    "jsdoctags": [
                        {
                            "name": "shouldSkipEvent",
                            "type": "boolean",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { DOCUMENT } from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  Renderer2,\n  ViewChild,\n  ViewContainerRef\n} from '@angular/core';\nimport { BehaviorSubject, combineLatest, fromEvent, merge, Observable, ReplaySubject } from 'rxjs';\nimport { filter, take, takeUntil, tap } from 'rxjs/operators';\nimport { BaseAction, InvalidLinkDestroyed, LinkCreatedAction, MoveCanvasAction, SelectingAction } from '../../actions';\nimport { LooseLinkDestroyed } from '../../actions/loose-link-destroyed.action';\nimport { MoveItemsAction } from '../../actions/move-items.action';\nimport { Coords } from '../../interfaces/coords.interface';\nimport { BaseModel } from '../../models/base.model';\nimport { DiagramModel } from '../../models/diagram.model';\nimport { LinkModel } from '../../models/link.model';\nimport { NodeModel } from '../../models/node.model';\nimport { PointModel } from '../../models/point.model';\nimport { PortModel } from '../../models/port.model';\nimport { EntityMap, OutsideZone, ZonedClass } from '../../utils';\n\n@Component({\n  selector: 'ngdx-diagram',\n  templateUrl: 'diagram.component.html',\n  styleUrls: ['diagram.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxDiagramComponent implements AfterViewInit, OnDestroy, ZonedClass {\n  @Input('model') diagramModel: DiagramModel;\n  @Input() allowCanvasZoom = true;\n  @Input() allowCanvasTranslation = true;\n  @Input() inverseZoom = true;\n  @Input() allowLooseLinks = true;\n  @Input() maxZoomOut: number = null;\n  @Input() maxZoomIn: number = null;\n  @Input() portMagneticRadius = 30;\n  @Input() smartRouting = false;\n\n  @Output() actionStartedFiring = new EventEmitter<BaseAction>();\n  @Output() actionStillFiring = new EventEmitter<BaseAction>();\n  @Output() actionStoppedFiring = new EventEmitter<BaseAction>();\n\n  @ViewChild('nodesLayer', { read: ViewContainerRef })\n  nodesLayer: ViewContainerRef;\n\n  @ViewChild('linksLayer', { read: ViewContainerRef })\n  linksLayer: ViewContainerRef;\n\n  @ViewChild('canvas', { read: ElementRef })\n  canvas: ElementRef;\n\n  protected nodes$: Observable<EntityMap<NodeModel>>;\n  protected links$: Observable<EntityMap<LinkModel>>;\n  protected action$ = new BehaviorSubject<BaseAction>(null);\n  protected nodesRendered$ = new BehaviorSubject<boolean>(false);\n  protected destroyed$ = new ReplaySubject<boolean>(1);\n\n  get host(): HTMLElement {\n    return this.elRef.nativeElement;\n  }\n\n  constructor(\n    @Inject(DOCUMENT) protected document: any,\n    public ngZone: NgZone,\n    protected renderer: Renderer2,\n    protected cdRef: ChangeDetectorRef,\n    protected elRef: ElementRef<HTMLElement>\n  ) {}\n\n  // TODO: handle destruction of container, resetting all observables to avoid memory leaks!\n  ngAfterViewInit() {\n    if (this.diagramModel) {\n      this.initNodes();\n      this.initLinks();\n      this.initSubs();\n    }\n  }\n\n  ngOnDestroy() {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n\n  /**\n   * fire the action registered and notify subscribers\n   */\n  fireAction() {\n    if (this.action$.value) {\n      this.actionStillFiring.emit(this.action$.value);\n    }\n  }\n\n  /**\n   * Unregister the action, post firing and notify subscribers\n   */\n  stopFiringAction(shouldSkipEvent?: boolean) {\n    if (!shouldSkipEvent) {\n      this.actionStoppedFiring.emit(this.action$.value);\n    }\n    this.action$.next(null);\n  }\n\n  /**\n   * Register the new action, pre firing and notify subscribers\n   */\n  startFiringAction(action: BaseAction) {\n    this.action$.next(action);\n    this.actionStartedFiring.emit(action);\n  }\n\n  selectAction() {\n    return this.action$ as BehaviorSubject<SelectingAction>;\n  }\n\n  shouldDrawSelectionBox() {\n    const action = this.action$.getValue();\n    if (action instanceof SelectingAction) {\n      action.getBoxDimensions();\n      return true;\n    }\n    return false;\n  }\n\n  getMouseElement(event: MouseEvent): { model: BaseModel; element: Element } {\n    const target = event.target as Element;\n\n    // is it a port?\n    let element = target.closest('[data-portid]');\n    if (element) {\n      // get the relevant node and return the port.\n      const nodeEl = target.closest('[data-nodeid]');\n      return {\n        model: this.diagramModel\n          .getNode(nodeEl.getAttribute('data-nodeid'))\n          .getPort(element.getAttribute('data-portid')),\n        element\n      };\n    }\n\n    // look for a point\n    element = target.closest('[data-pointid]');\n    if (element) {\n      return {\n        model: this.diagramModel\n          .getLink(element.getAttribute('data-linkid'))\n          .getPointModel(element.getAttribute('data-pointid')),\n        element\n      };\n    }\n\n    // look for a link\n    element = target.closest('[data-linkid]');\n    if (element) {\n      return {\n        model: this.diagramModel.getLink(element.getAttribute('data-linkid')),\n        element\n      };\n    }\n\n    // a node maybe\n    element = target.closest('[data-nodeid]');\n    if (element) {\n      return {\n        model: this.diagramModel.getNode(element.getAttribute('data-nodeid')),\n        element\n      };\n    }\n\n    // just the canvas\n    return null;\n  }\n\n  @OutsideZone\n  onMouseUp(event: MouseEvent) {\n    const diagramEngine = this.diagramModel.getDiagramEngine();\n    const action = this.action$.getValue();\n    // are we going to connect a link to something?\n    if (action instanceof MoveItemsAction) {\n      const element = this.getMouseElement(event);\n      action.selectionModels.forEach((model) => {\n        // only care about points connecting to things\n        if (!model || !(model.model instanceof PointModel)) {\n          return;\n        }\n\n        let el: BaseModel;\n        if (model.magnet) {\n          el = model.magnet;\n        } else if (element && element.model) {\n          el = element.model;\n        }\n\n        if (el instanceof PortModel && !diagramEngine.isModelLocked(el)) {\n          const link = model.model.getLink();\n          if (link.getTargetPort() !== null) {\n            // if this was a valid link already and we are adding a node in the middle, create 2 links from the original\n            if (link.getTargetPort() !== el && link.getSourcePort() !== el) {\n              const targetPort = link.getTargetPort();\n              const newLink = link.clone({});\n              newLink.setSourcePort(el);\n              newLink.setTargetPort(targetPort);\n              link.setTargetPort(el);\n              targetPort.removeLink(link);\n              newLink.removePointsBefore(newLink.getPoints()[link.getPointIndex(model.model)]);\n              link.removePointsAfter(model.model);\n              diagramEngine.getDiagramModel().addLink(newLink);\n              // if we are connecting to the same target or source, destroy tweener points\n            } else if (link.getTargetPort() === el) {\n              link.removePointsAfter(model.model);\n            } else if (link.getSourcePort() === el) {\n              link.removePointsBefore(model.model);\n            }\n          } else {\n            link.setTargetPort(el);\n            const targetPort = link.getTargetPort();\n            const srcPort = link.getSourcePort();\n\n            if (targetPort.id !== srcPort.id && srcPort.canLinkToPort(targetPort)) {\n              // link is valid, fire the event\n              this.startFiringAction(new LinkCreatedAction(event.clientX, event.clientY, link));\n            }\n          }\n        }\n\n        // reset current magent\n        model.magnet = undefined;\n      });\n\n      // check for / destroy any loose links in any models which have been moved\n      if (!this.allowLooseLinks) {\n        action.selectionModels.forEach((model) => {\n          // only care about points connecting to things\n          if (!model || !(model.model instanceof PointModel)) {\n            return;\n          }\n\n          const selectedPoint: PointModel = model.model;\n          const link: LinkModel = selectedPoint.getLink();\n          if (link.getSourcePort() === null || link.getTargetPort() === null) {\n            link.destroy();\n            this.startFiringAction(new LooseLinkDestroyed(event.clientX, event.clientY, link));\n          }\n        });\n      }\n\n      // destroy any invalid links\n      action.selectionModels.forEach((model) => {\n        // only care about points connecting to things\n        if (!model || !(model.model instanceof PointModel)) {\n          return;\n        }\n\n        const link: LinkModel = model.model.getLink();\n        const sourcePort: PortModel = link.getSourcePort();\n        const targetPort: PortModel = link.getTargetPort();\n\n        if (sourcePort !== null && targetPort !== null) {\n          if (!sourcePort.canLinkToPort(targetPort)) {\n            // link not allowed\n            link.destroy();\n            this.startFiringAction(new InvalidLinkDestroyed(event.clientX, event.clientY, link));\n          } else if (\n            targetPort\n              .getLinksArray()\n              .some(\n                (link) => link !== link && (link.getSourcePort() === sourcePort || link.getTargetPort() === sourcePort)\n              )\n          ) {\n            // link is a duplicate\n            link.destroy();\n          }\n        }\n      });\n\n      this.stopFiringAction();\n    } else {\n      this.stopFiringAction();\n    }\n\n    this.action$.next(null);\n  }\n\n  /**\n   * @description Mouse Move Event Handler\n   * @param event MouseEvent\n   */\n  @OutsideZone\n  onMouseMove(event: MouseEvent) {\n    const action = this.action$.getValue();\n\n    if (action === null || action === undefined) {\n      return;\n    }\n\n    if (action instanceof SelectingAction) {\n      const relative = this.diagramModel.getDiagramEngine().getRelativePoint(event.clientX, event.clientY);\n\n      this.diagramModel.getNodes().forEach((node) => {\n        if ((action as SelectingAction).containsElement(node.getCoords(), this.diagramModel)) {\n          node.setSelected();\n        } else {\n          node.setSelected(false);\n        }\n      });\n\n      this.diagramModel.getLinks().forEach((link) => {\n        let allSelected = true;\n\n        link.getPoints().forEach((point) => {\n          if ((action as SelectingAction).containsElement(point.getCoords(), this.diagramModel)) {\n            point.setSelected();\n          } else {\n            point.setSelected(false);\n            allSelected = false;\n          }\n        });\n\n        if (allSelected) {\n          link.setSelected();\n        }\n      });\n\n      action.mouseX2 = relative.x;\n      action.mouseY2 = relative.y;\n\n      this.fireAction();\n      this.action$.next(action);\n      return;\n    } else if (action instanceof MoveItemsAction) {\n      const coords: Coords = {\n        x: event.clientX - action.mouseX,\n        y: event.clientY - action.mouseY\n      };\n      const amountZoom = this.diagramModel.getZoomLevel() / 100;\n      action.selectionModels.forEach((selectionModel) => {\n        // reset all previous magnets if any\n        selectionModel.magnet = undefined;\n\n        // in this case we need to also work out the relative grid position\n        if (\n          selectionModel.model instanceof NodeModel ||\n          (selectionModel.model instanceof PointModel && !selectionModel.model.isConnectedToPort())\n        ) {\n          const newCoords = {\n            x: selectionModel.initialX + coords.x / amountZoom,\n            y: selectionModel.initialY + coords.y / amountZoom\n          };\n          const gridRelativeCoords = this.diagramModel.getGridPosition(newCoords);\n\n          // magnetic inputs handling\n          if (selectionModel.model instanceof PointModel && this.portMagneticRadius) {\n            // get all ports on canvas, check distances, if smaller then defined radius, magnetize!\n            const portsMap = this.diagramModel.getAllPorts({ filter: (p) => p.getMagnetic() });\n\n            for (const port of portsMap.values()) {\n              const portCoords = port.getCoords();\n              const distance = Math.hypot(portCoords.x - newCoords.x, portCoords.y - newCoords.y);\n              if (distance <= this.portMagneticRadius) {\n                const portCenter = this.diagramModel.getDiagramEngine().getPortCenter(port);\n                selectionModel.model.setCoords(portCenter);\n                selectionModel.magnet = port;\n                return;\n              }\n            }\n          }\n\n          selectionModel.model.setCoords(gridRelativeCoords);\n\n          if (selectionModel.model instanceof NodeModel) {\n            // update port coordinates as well\n            selectionModel.model.getPorts().forEach((port) => {\n              const portCoords = this.diagramModel.getDiagramEngine().getPortCoords(port);\n              port.updateCoords(portCoords);\n            });\n          }\n\n          if (this.diagramModel.getDiagramEngine().getSmartRouting()) {\n            setTimeout(() => {\n              this.diagramModel.getDiagramEngine().calculateRoutingMatrix();\n            }, 1);\n          }\n        } else if (selectionModel.model instanceof PointModel) {\n          // will only run here when trying to create a point on an existing link\n          // we want points that are connected to ports, to not necessarily snap to grid\n          // this stuff needs to be pixel perfect, dont touch it\n          const newCoords = this.diagramModel.getGridPosition({ x: coords.x / amountZoom, y: coords.y / amountZoom });\n          selectionModel.model.setCoords({\n            x: selectionModel.initialX + newCoords.x,\n            y: selectionModel.initialY + newCoords.y\n          });\n        }\n      });\n\n      this.fireAction();\n    } else if (action instanceof MoveCanvasAction) {\n      if (this.allowCanvasTranslation) {\n        this.diagramModel.setOffset(\n          action.initialOffsetX + (event.clientX - action.mouseX),\n          action.initialOffsetY + (event.clientY - action.mouseY)\n        );\n        this.fireAction();\n      }\n    }\n  }\n\n  @OutsideZone\n  onMouseDown(event: MouseEvent) {\n    if (event.button === 3) {\n      return;\n    }\n\n    const selectedModel = this.getMouseElement(event);\n\n    // canvas selected\n    if (selectedModel === null) {\n      // multiple selection\n      if (event.shiftKey) {\n        // initiate multiple selection selector\n        const relative = this.diagramModel.getDiagramEngine().getRelativePoint(event.clientX, event.clientY);\n        this.startFiringAction(new SelectingAction(relative.x, relative.y));\n      } else {\n        // drag canvas action\n        this.diagramModel.clearSelection();\n        this.startFiringAction(new MoveCanvasAction(event.clientX, event.clientY, this.diagramModel));\n      }\n    } else if (selectedModel.model instanceof PortModel) {\n      // its a port element, we want to drag a link\n      if (!selectedModel.model.isLocked() && selectedModel.model.getCanCreateLinks()) {\n        const relative = this.diagramModel.getDiagramEngine().getRelativeMousePoint(event);\n        const sourcePort = selectedModel.model;\n        const link = sourcePort.createLinkModel();\n\n        // if we don't have a link then we have reached the max amount, or we cannot create new ones\n        if (link) {\n          link.setSourcePort(sourcePort);\n          link.removeMiddlePoints();\n          if (link.getSourcePort() !== sourcePort) {\n            link.setSourcePort(sourcePort);\n          }\n          link.setTargetPort(null);\n\n          link.getFirstPoint().setCoords(relative);\n          link.getLastPoint().setCoords(relative);\n\n          this.diagramModel.clearSelection();\n          link.getLastPoint().setSelected();\n          this.diagramModel.addLink(link);\n\n          this.startFiringAction(\n            new MoveItemsAction(event.clientX, event.clientY, this.diagramModel.getDiagramEngine())\n          );\n        }\n      } else {\n        this.diagramModel.clearSelection();\n      }\n    } else if (selectedModel.model instanceof PointModel && selectedModel.model.isConnectedToPort()) {\n      this.diagramModel.clearSelection();\n    } else {\n      // its some other element, probably want to move it\n      if (!event.shiftKey && !selectedModel.model.getSelected()) {\n        this.diagramModel.clearSelection();\n      }\n\n      selectedModel.model.setSelected();\n\n      this.startFiringAction(new MoveItemsAction(event.clientX, event.clientY, this.diagramModel.getDiagramEngine()));\n    }\n\n    this.createMouseListeners();\n  }\n\n  @OutsideZone\n  onMouseWheel(event: WheelEvent) {\n    if (!this.allowCanvasZoom) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n    const currentZoomLevel = this.diagramModel.getZoomLevel();\n\n    const oldZoomFactor = currentZoomLevel / 100;\n    let scrollDelta = this.inverseZoom ? -event.deltaY : event.deltaY;\n\n    // check if it is pinch gesture\n    if (event.ctrlKey && scrollDelta % 1 !== 0) {\n      /* Chrome and Firefox sends wheel event with deltaY that\n\t\t\t\t\t\t have fractional part, also `ctrlKey` prop of the event is true\n\t\t\t\t\t\t though ctrl isn't pressed\n\t\t\t\t\t*/\n      scrollDelta /= 3;\n    } else {\n      scrollDelta /= 60;\n    }\n\n    if (currentZoomLevel + scrollDelta > 10) {\n      const newZoomLvl = currentZoomLevel + scrollDelta;\n      this.diagramModel.setZoomLevel(newZoomLvl);\n    }\n\n    const updatedZoomLvl = this.diagramModel.getZoomLevel();\n    const zoomFactor = updatedZoomLvl / 100;\n\n    const boundingRect = (event.currentTarget as Element).getBoundingClientRect();\n    const clientWidth = boundingRect.width;\n    const clientHeight = boundingRect.height;\n\n    // compute difference between rect before and after scroll\n    const widthDiff = clientWidth * zoomFactor - clientWidth * oldZoomFactor;\n    const heightDiff = clientHeight * zoomFactor - clientHeight * oldZoomFactor;\n\n    // compute mouse coords relative to canvas\n    const clientX = event.clientX - boundingRect.left;\n    const clientY = event.clientY - boundingRect.top;\n\n    // compute width and height increment factor\n    const xFactor = (clientX - this.diagramModel.getOffsetX()) / oldZoomFactor / clientWidth;\n    const yFactor = (clientY - this.diagramModel.getOffsetY()) / oldZoomFactor / clientHeight;\n\n    const updatedXOffset = this.diagramModel.getOffsetX() - widthDiff * xFactor;\n    const updatedYOffset = this.diagramModel.getOffsetY() - heightDiff * yFactor;\n\n    this.diagramModel.setOffset(updatedXOffset, updatedYOffset);\n  }\n\n  @OutsideZone\n  protected setLayerStyles(x: number, y: number, zoom: number): void {\n    const nodesLayer = this.getNodesLayer();\n    const linksLayer = this.getLinksLayer();\n\n    const style = 'transform';\n    const value = `translate(${x}px, ${y}px) scale(${zoom / 100.0})`;\n\n    this.renderer.setStyle(nodesLayer, style, value);\n    this.renderer.setStyle(linksLayer, style, value);\n  }\n\n  protected initNodes() {\n    this.nodes$ = this.diagramModel.selectNodes();\n\n    this.diagramModel.getDiagramEngine().setCanvas(this.canvas.nativeElement);\n    this.diagramModel.getDiagramEngine().setSmartRoutingStatus(this.smartRouting);\n\n    this.diagramModel.setMaxZoomIn(this.maxZoomIn);\n    this.diagramModel.setMaxZoomOut(this.maxZoomOut);\n\n    this.nodes$.pipe(takeUntil(this.destroyed$)).subscribe((nodes) => {\n      this.nodesRendered$.next(false);\n\n      for (const node of nodes.values()) {\n        if (!node.getPainted()) {\n          this.diagramModel.getDiagramEngine().generateWidgetForNode(node, this.nodesLayer);\n          this.cdRef.detectChanges();\n        }\n      }\n\n      this.nodesRendered$.next(true);\n    });\n  }\n\n  protected initLinks() {\n    this.links$ = this.diagramModel.selectLinks();\n\n    combineLatest([this.nodesRendered$, this.links$])\n      .pipe(\n        filter(([nodesRendered]) => !!nodesRendered),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe(([, links]) => {\n        for (const link of links.values()) {\n          if (!link.getPainted() && link.getSourcePort().getPainted()) {\n            if (link.getSourcePort() !== null) {\n              const portCenter = this.diagramModel.getDiagramEngine().getPortCenter(link.getSourcePort());\n              link.getPoints()[0].setCoords(portCenter);\n\n              const portCoords = this.diagramModel.getDiagramEngine().getPortCoords(link.getSourcePort());\n              link.getSourcePort().updateCoords(portCoords);\n            }\n\n            if (link.getTargetPort() !== null) {\n              const portCenter = this.diagramModel.getDiagramEngine().getPortCenter(link.getTargetPort());\n              link.getPoints()[link.getPoints().length - 1].setCoords(portCenter);\n\n              const portCoords = this.diagramModel.getDiagramEngine().getPortCoords(link.getTargetPort());\n              link.getTargetPort().updateCoords(portCoords);\n            }\n\n            this.diagramModel.getDiagramEngine().generateWidgetForLink(link, this.linksLayer);\n            this.cdRef.detectChanges();\n          }\n        }\n      });\n  }\n\n  protected initSubs() {\n    combineLatest([\n      this.diagramModel.selectOffsetX(),\n      this.diagramModel.selectOffsetY(),\n      this.diagramModel.selectZoomLevel()\n    ])\n      .pipe(\n        tap(([x, y, zoom]) => this.setLayerStyles(x, y, zoom)),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe();\n  }\n\n  protected getNodesLayer(): HTMLDivElement {\n    return this.host.querySelector('.ngdx-nodes-layer');\n  }\n\n  protected getLinksLayer(): HTMLDivElement {\n    return this.host.querySelector('.ngdx-links-layer');\n  }\n\n  protected createMouseListeners() {\n    const mouseUp$ = fromEvent<MouseEvent>(this.document, 'mouseup').pipe(\n      tap((e) => this.onMouseUp(e)),\n      take(1)\n    );\n\n    const mouseMove$ = fromEvent<MouseEvent>(this.document, 'mousemove').pipe(\n      tap((e) => this.onMouseMove(e)),\n      takeUntil(mouseUp$)\n    );\n\n    merge(mouseMove$, mouseUp$).subscribe();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".ngdx-diagram {\n  position: relative;\n  flex-grow: 1;\n  display: flex;\n  cursor: move;\n  overflow: hidden;\n\n  .selector {\n    position: absolute;\n    background-color: rgba(0, 192, 255, 0.2);\n    border: solid 2px rgb(0, 192, 255);\n  }\n\n  .ngdx-nodes-layer {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    transform-origin: 0 0;\n    overflow: visible !important;\n    pointer-events: none;\n    z-index: 150;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n  }\n\n  .ngdx-links-layer {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    transform-origin: 0 0;\n    overflow: visible !important;\n    pointer-events: none;\n    z-index: 100;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n  }\n}\n",
                    "styleUrl": "diagram.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "document",
                        "type": "any"
                    },
                    {
                        "name": "ngZone",
                        "type": "NgZone"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "elRef",
                        "type": "ElementRef<HTMLElement>"
                    }
                ],
                "line": 70,
                "jsdoctags": [
                    {
                        "name": "document",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ngZone",
                        "type": "NgZone",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "elRef",
                        "type": "ElementRef<HTMLElement>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit",
                "OnDestroy",
                "ZonedClass"
            ],
            "accessors": {
                "host": {
                    "name": "host",
                    "getSignature": {
                        "name": "host",
                        "type": "",
                        "returnType": "HTMLElement",
                        "line": 68
                    }
                }
            },
            "templateData": "<div class=\"ngdx-diagram\" #canvas (mousedown)=\"onMouseDown($event)\" (wheel)=\"onMouseWheel($event)\">\n\t<!-- Nodes Layer -->\n\t<div class=\"ngdx-nodes-layer\">\n\t\t<ng-template #nodesLayer></ng-template>\n\t</div>\n\n\t<!-- Links Layer -->\n\t<div class=\"ngdx-links-layer\">\n\t\t<ng-template #linksLayer></ng-template>\n\t</div>\n\n\t<!-- Selection Box -->\n\t<div\n\t\t*ngIf=\"shouldDrawSelectionBox() && selectAction() | async as action\"\n\t\tclass=\"selector\"\n\t\t[ngStyle]=\"{\n\t\t\ttop: action.dimensions.top + 'px',\n\t\t\tleft: action.dimensions.left + 'px',\n\t\t\twidth: action.dimensions.width + 'px',\n\t\t\theight: action.dimensions.height + 'px'\n\t\t}\"></div>\n</div>\n"
        },
        {
            "name": "PerformanceExampleStoryComponent",
            "id": "component-PerformanceExampleStoryComponent-d8f10b04025790aaea44c6a4bf9b9cdc",
            "file": "libs/ngx-diagrams/stories/examples/performance/performance.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "../demo-diagram.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"action-bar\">\n\t<button (click)=\"resetDiagram()\" *ngIf=\"isResseted === false\">Reset</button\n\t><button (click)=\"createDiagram()\" *ngIf=\"isResseted\">Recreate</button>Rendered {{ numberOfNodes }} nodes and links in\n\t{{ initialRenderTimer }} ms\n</div>\n<ngdx-diagram class=\"demo-diagram\" [model]=\"diagramModel\"></ngdx-diagram>\n\t",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "serialized",
                    "defaultValue": "new EventEmitter()",
                    "line": 23,
                    "type": "EventEmitter<SerializedDiagramModel>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "diagramModel",
                    "type": "DiagramModel",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "initialRenderTimer",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "isCreated",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "isResseted",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "numberOfNodes",
                    "defaultValue": "200",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "clearGraph",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75
                },
                {
                    "name": "createDiagram",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36
                },
                {
                    "name": "createNodes",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                },
                {
                    "name": "recreateDiagram",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45
                },
                {
                    "name": "resetDiagram",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { DiagramEngine, DiagramModel, DefaultNodeModel, SerializedDiagramModel } from 'ngx-diagrams';\n\n@Component({\n\tselector: 'app-root',\n\ttemplate: `\n\t\t<div class=\"action-bar\">\n\t\t\t<button (click)=\"resetDiagram()\" *ngIf=\"isResseted === false\">Reset</button\n\t\t\t><button (click)=\"createDiagram()\" *ngIf=\"isResseted\">Recreate</button>Rendered {{ numberOfNodes }} nodes and links in\n\t\t\t{{ initialRenderTimer }} ms\n\t\t</div>\n\t\t<ngdx-diagram class=\"demo-diagram\" [model]=\"diagramModel\"></ngdx-diagram>\n\t`,\n\tstyleUrls: ['../demo-diagram.component.scss'],\n})\nexport class PerformanceExampleStoryComponent implements OnInit {\n\tdiagramModel: DiagramModel;\n\tinitialRenderTimer: number;\n\tisResseted = false;\n\tisCreated = true;\n\tnumberOfNodes = 200;\n\n\t@Output() serialized: EventEmitter<SerializedDiagramModel> = new EventEmitter();\n\n\tconstructor(private diagramEngine: DiagramEngine) {}\n\n\tngOnInit() {\n\t\tthis.diagramEngine.registerDefaultFactories();\n\t\tthis.diagramModel = this.diagramEngine.createDiagram();\n\n\t\tthis.createNodes();\n\n\t\tthis.diagramEngine.zoomToFit();\n\t}\n\n\tcreateDiagram() {\n\t\tthis.createNodes();\n\t}\n\n\tresetDiagram() {\n\t\tthis.diagramModel.reset();\n\t\tthis.isResseted = true;\n\t}\n\n\trecreateDiagram() {\n\t\tthis.createNodes();\n\t}\n\n\tcreateNodes() {\n\t\tthis.isResseted = false;\n\t\tconst startTime = performance.now();\n\t\tconst nodesDefaultDimensions = { height: 200, width: 200 };\n\n\t\tfor (let index = 0; index < this.numberOfNodes; index++) {\n\t\t\tconst nodeLoop = new DefaultNodeModel({ id: index.toString() });\n\t\t\tconst row = index % 10;\n\t\t\tconst col = Math.floor(index / 10);\n\t\t\tnodeLoop.setCoords({ x: 1000 * row, y: 300 * col });\n\t\t\tnodeLoop.setDimensions(nodesDefaultDimensions);\n\t\t\tnodeLoop.addInPort({ name: `inport${index}`, id: `inport${index}` });\n\t\t\tconst outport = nodeLoop.addOutPort({ name: `outport${index}`, id: `outport${index}` });\n\n\t\t\tif (index > 0) {\n\t\t\t\tconst link = outport.link(this.diagramModel.getNode(`${index - 1}`).getPort(`inport${index - 1}`));\n\t\t\t\tthis.diagramModel.addLink(link);\n\t\t\t}\n\n\t\t\tthis.diagramModel.addNode(nodeLoop);\n\t\t}\n\n\t\tconst endTime = performance.now();\n\t\tthis.initialRenderTimer = endTime - startTime;\n\t}\n\n\tclearGraph() {\n\t\tthis.diagramModel.reset();\n\t}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".demo-diagram {\n  display: flex;\n  height: 100%;\n  min-height: 100vh;\n  background-color: #3c3c3c;\n  background-image: linear-gradient(\n      0deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    ),\n    linear-gradient(\n      90deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    );\n  background-size: 50px 50px;\n}\n\n.action-bar {\n  position: relative;\n  width: 100%;\n  height: 40px;\n  z-index: 2000;\n  background-color: white;\n  display: flex;\n  align-items: center;\n  * {\n    margin: 0 10px;\n  }\n}\n",
                    "styleUrl": "../demo-diagram.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "SerializationExampleStoryComponent",
            "id": "component-SerializationExampleStoryComponent-921b233ef670cfea5cf2cf4d397faa29",
            "file": "libs/ngx-diagrams/stories/examples/serialization/serialization.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "../demo-diagram.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"action-bar\">\n  <button (click)=\"serialize()\">Serialize Diagram Model</button>\n  <button (click)=\"clearGraph()\">Clear Graph</button>\n</div>\n<ngdx-diagram class=\"demo-diagram\" [model]=\"diagramModel\"></ngdx-diagram>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "serialized",
                    "defaultValue": "new EventEmitter()",
                    "line": 23,
                    "type": "EventEmitter<SerializedDiagramModel>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "diagramModel",
                    "type": "DiagramModel",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "clearGraph",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport {\n  DiagramEngine,\n  DiagramModel,\n  DefaultNodeModel,\n  SerializedDiagramModel,\n} from 'ngx-diagrams';\n\n@Component({\n  selector: 'app-root',\n  template: `\n    <div class=\"action-bar\">\n      <button (click)=\"serialize()\">Serialize Diagram Model</button>\n      <button (click)=\"clearGraph()\">Clear Graph</button>\n    </div>\n    <ngdx-diagram class=\"demo-diagram\" [model]=\"diagramModel\"></ngdx-diagram>\n  `,\n  styleUrls: ['../demo-diagram.component.scss'],\n})\nexport class SerializationExampleStoryComponent implements OnInit {\n  diagramModel: DiagramModel;\n\n  @Output() serialized: EventEmitter<\n    SerializedDiagramModel\n  > = new EventEmitter();\n\n  constructor(private diagramEngine: DiagramEngine) {}\n\n  ngOnInit() {\n    const nodesDefaultDimensions = { height: 200, width: 200 };\n    this.diagramEngine.registerDefaultFactories();\n\n    this.diagramModel = this.diagramEngine.createDiagram();\n\n    const node1 = new DefaultNodeModel();\n    node1.setCoords({ x: 500, y: 300 });\n    node1.setDimensions(nodesDefaultDimensions);\n    const outport1 = node1.addOutPort({ name: 'outport1' });\n\n    const node2 = new DefaultNodeModel();\n    node2.setCoords({ x: 1000, y: 0 });\n    node2.setDimensions(nodesDefaultDimensions);\n    const inport = node2.addInPort({ name: 'inport2' });\n\n    for (let index = 0; index < 2; index++) {\n      const nodeLoop = new DefaultNodeModel();\n      nodeLoop.setCoords({ x: 1000, y: 300 + index * 300 });\n      nodeLoop.setDimensions(nodesDefaultDimensions);\n      nodeLoop.addInPort({ name: `inport${index + 3}` });\n\n      this.diagramModel.addNode(nodeLoop);\n    }\n\n    const link = outport1.link(inport);\n    link.setLocked();\n\n    this.diagramModel.addAll(node1, node2, link);\n\n    this.diagramModel.getDiagramEngine().zoomToFit();\n  }\n\n  serialize() {\n    const serializedModel = this.diagramModel.serialize();\n    this.serialized.emit(serializedModel);\n  }\n\n  clearGraph() {\n    this.diagramModel.reset();\n  }\n\n  // deserialize() {\n  // \tconst JSONModel = {\n  // \t\tid: 'ab04adcc-ebce-41a1-9c8f-de914cb3186c',\n  // \t\tlocked: false,\n  // \t\tnodes: [\n  // \t\t\t{\n  // \t\t\t\tid: 'e50e8d29-b90c-4907-8f7a-a82f8fbc7051',\n  // \t\t\t\tlocked: false,\n  // \t\t\t\ttype: 'default',\n  // \t\t\t\tnodeType: 'default',\n  // \t\t\t\textras: {},\n  // \t\t\t\twidth: 200,\n  // \t\t\t\theight: 200,\n  // \t\t\t\tx: 1000,\n  // \t\t\t\ty: 300,\n  // \t\t\t\tports: [\n  // \t\t\t\t\t{\n  // \t\t\t\t\t\tid: '57ba33ad-b539-4491-9358-056db9cfb474',\n  // \t\t\t\t\t\tlocked: false,\n  // \t\t\t\t\t\ttype: 'default',\n  // \t\t\t\t\t\tname: 'inport3',\n  // \t\t\t\t\t\tlinkType: 'default',\n  // \t\t\t\t\t\tmaximumLinks: null,\n  // \t\t\t\t\t\tmagnetic: true,\n  // \t\t\t\t\t\theight: 12,\n  // \t\t\t\t\t\twidth: 12,\n  // \t\t\t\t\t\tcanCreateLinks: false,\n  // \t\t\t\t\t\tx: 995,\n  // \t\t\t\t\t\ty: 310,\n  // \t\t\t\t\t},\n  // \t\t\t\t],\n  // \t\t\t},\n  // \t\t\t{\n  // \t\t\t\tid: 'a0cb9388-ffb4-470a-a020-0a3256c0dd1c',\n  // \t\t\t\tlocked: false,\n  // \t\t\t\ttype: 'default',\n  // \t\t\t\tnodeType: 'default',\n  // \t\t\t\textras: {},\n  // \t\t\t\twidth: 200,\n  // \t\t\t\theight: 200,\n  // \t\t\t\tx: 1000,\n  // \t\t\t\ty: 600,\n  // \t\t\t\tports: [\n  // \t\t\t\t\t{\n  // \t\t\t\t\t\tid: 'd0866699-9922-47ab-812a-36d3bde6b513',\n  // \t\t\t\t\t\tlocked: false,\n  // \t\t\t\t\t\ttype: 'default',\n  // \t\t\t\t\t\tname: 'inport4',\n  // \t\t\t\t\t\tlinkType: 'default',\n  // \t\t\t\t\t\tmaximumLinks: null,\n  // \t\t\t\t\t\tmagnetic: true,\n  // \t\t\t\t\t\theight: 12,\n  // \t\t\t\t\t\twidth: 12,\n  // \t\t\t\t\t\tcanCreateLinks: false,\n  // \t\t\t\t\t\tx: 995,\n  // \t\t\t\t\t\ty: 610,\n  // \t\t\t\t\t},\n  // \t\t\t\t],\n  // \t\t\t},\n  // \t\t\t{\n  // \t\t\t\tid: 'de1eac05-4782-4bf2-8620-241562501db4',\n  // \t\t\t\tlocked: false,\n  // \t\t\t\ttype: 'default',\n  // \t\t\t\tnodeType: 'default',\n  // \t\t\t\textras: {},\n  // \t\t\t\twidth: 200,\n  // \t\t\t\theight: 200,\n  // \t\t\t\tx: 500,\n  // \t\t\t\ty: 300,\n  // \t\t\t\tports: [\n  // \t\t\t\t\t{\n  // \t\t\t\t\t\tid: '74bcbcfe-e5ca-4f49-8a00-9eb15916cd3c',\n  // \t\t\t\t\t\tlocked: false,\n  // \t\t\t\t\t\ttype: 'default',\n  // \t\t\t\t\t\tname: 'outport1',\n  // \t\t\t\t\t\tlinkType: 'default',\n  // \t\t\t\t\t\tmaximumLinks: null,\n  // \t\t\t\t\t\tmagnetic: false,\n  // \t\t\t\t\t\theight: 12,\n  // \t\t\t\t\t\twidth: 12,\n  // \t\t\t\t\t\tcanCreateLinks: true,\n  // \t\t\t\t\t\tx: 695,\n  // \t\t\t\t\t\ty: 310,\n  // \t\t\t\t\t},\n  // \t\t\t\t],\n  // \t\t\t},\n  // \t\t\t{\n  // \t\t\t\tid: '86d44ae3-bcc8-4d1a-b0ea-2fc295aa2da2',\n  // \t\t\t\tlocked: false,\n  // \t\t\t\ttype: 'default',\n  // \t\t\t\tnodeType: 'default',\n  // \t\t\t\textras: {},\n  // \t\t\t\twidth: 200,\n  // \t\t\t\theight: 200,\n  // \t\t\t\tx: 1000,\n  // \t\t\t\ty: 0,\n  // \t\t\t\tports: [\n  // \t\t\t\t\t{\n  // \t\t\t\t\t\tid: '6f2857d4-5fd2-4b0a-878b-730dec5afcdf',\n  // \t\t\t\t\t\tlocked: false,\n  // \t\t\t\t\t\ttype: 'default',\n  // \t\t\t\t\t\tname: 'inport2',\n  // \t\t\t\t\t\tlinkType: 'default',\n  // \t\t\t\t\t\tmaximumLinks: null,\n  // \t\t\t\t\t\tmagnetic: true,\n  // \t\t\t\t\t\theight: 12,\n  // \t\t\t\t\t\twidth: 12,\n  // \t\t\t\t\t\tcanCreateLinks: false,\n  // \t\t\t\t\t\tx: 995,\n  // \t\t\t\t\t\ty: 10,\n  // \t\t\t\t\t},\n  // \t\t\t\t],\n  // \t\t\t},\n  // \t\t],\n  // \t\tlinks: [\n  // \t\t\t{\n  // \t\t\t\tid: '635cb9cd-09bd-4693-b746-760b8fbf51ae',\n  // \t\t\t\tlocked: true,\n  // \t\t\t\ttype: 'default',\n  // \t\t\t\tsourcePort: '74bcbcfe-e5ca-4f49-8a00-9eb15916cd3c',\n  // \t\t\t\ttargetPort: '6f2857d4-5fd2-4b0a-878b-730dec5afcdf',\n  // \t\t\t\textras: {},\n  // \t\t\t\tpoints: [\n  // \t\t\t\t\t{ id: 'b085cdea-f1f1-4f26-8989-585a310004f9', locked: true, type: 'default', coords: { x: 701, y: 316 } },\n  // \t\t\t\t\t{ id: 'edccec32-2290-4290-a7b3-66e3598c07f5', locked: true, type: 'default', coords: { x: 1001, y: 16 } },\n  // \t\t\t\t],\n  // \t\t\t},\n  // \t\t],\n  // \t};\n\n  // \tthis.diagramModel.deserialize(JSONModel);\n  // }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".demo-diagram {\n  display: flex;\n  height: 100%;\n  min-height: 100vh;\n  background-color: #3c3c3c;\n  background-image: linear-gradient(\n      0deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    ),\n    linear-gradient(\n      90deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    );\n  background-size: 50px 50px;\n}\n\n.action-bar {\n  position: relative;\n  width: 100%;\n  height: 40px;\n  z-index: 2000;\n  background-color: white;\n  display: flex;\n  align-items: center;\n  * {\n    margin: 0 10px;\n  }\n}\n",
                    "styleUrl": "../demo-diagram.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine"
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "SmartRoutingExampleStoryComponent",
            "id": "component-SmartRoutingExampleStoryComponent-6b131d1e06597880bae8c41f3d9d0fc4",
            "file": "libs/ngx-diagrams/stories/examples/smart-routing/smart-routing.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "../demo-diagram.component.scss"
            ],
            "styles": [],
            "template": "<ngdx-diagram\n  class=\"demo-diagram\"\n  [model]=\"diagramModel\"\n  [smartRouting]=\"true\"\n></ngdx-diagram>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "diagramModel",
                    "type": "DiagramModel",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { DiagramEngine, DiagramModel, DefaultNodeModel } from 'ngx-diagrams';\n\n@Component({\n  selector: 'app-root',\n  template: `\n    <ngdx-diagram\n      class=\"demo-diagram\"\n      [model]=\"diagramModel\"\n      [smartRouting]=\"true\"\n    ></ngdx-diagram>\n  `,\n  styleUrls: ['../demo-diagram.component.scss'],\n})\nexport class SmartRoutingExampleStoryComponent implements OnInit {\n  diagramModel: DiagramModel;\n\n  constructor(private diagramEngine: DiagramEngine) {}\n\n  ngOnInit() {\n    const nodesDefaultDimensions = { height: 200, width: 200 };\n    this.diagramEngine.registerDefaultFactories();\n\n    this.diagramModel = this.diagramEngine.createDiagram();\n\n    const node1 = new DefaultNodeModel();\n    node1.setCoords({ x: 500, y: 300 });\n    node1.setDimensions(nodesDefaultDimensions);\n    const outport1 = node1.addOutPort({ name: 'outport1' });\n\n    for (let index = 0; index < 5; index++) {\n      const nodeLoop = new DefaultNodeModel();\n      nodeLoop.setCoords({ x: 1500, y: index * 300 });\n      nodeLoop.setDimensions(nodesDefaultDimensions);\n      const inportLoop = nodeLoop.addInPort({ name: `inport${index + 3}` });\n\n      this.diagramModel.addNode(nodeLoop);\n\n      const linkLoop = outport1.link(inportLoop);\n      this.diagramModel.addLink(linkLoop);\n    }\n\n    const blockingNode = new DefaultNodeModel();\n    blockingNode.setCoords({ x: 1000, y: 300 });\n    blockingNode.setDimensions(nodesDefaultDimensions);\n\n    this.diagramModel.addAll(node1, blockingNode);\n\n    this.diagramEngine.zoomToFit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".demo-diagram {\n  display: flex;\n  height: 100%;\n  min-height: 100vh;\n  background-color: #3c3c3c;\n  background-image: linear-gradient(\n      0deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    ),\n    linear-gradient(\n      90deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    );\n  background-size: 50px 50px;\n}\n\n.action-bar {\n  position: relative;\n  width: 100%;\n  height: 40px;\n  z-index: 2000;\n  background-color: white;\n  display: flex;\n  align-items: center;\n  * {\n    margin: 0 10px;\n  }\n}\n",
                    "styleUrl": "../demo-diagram.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        }
    ],
    "modules": [
        {
            "name": "DefaultLabelModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DefaultLabelComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DefaultLabelComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DefaultLinkModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DefaultLinkComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DefaultLinkComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DefaultNodeModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DefaultNodeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DefaultPortModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DefaultPortComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgxDiagramsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NgxDiagramComponent"
                        },
                        {
                            "name": "TemplateVarDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NgxDiagramComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "__DEV__",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "type": "",
                "defaultValue": "true"
            },
            {
                "name": "__LOG__",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "type": "LOG_LEVEL",
                "defaultValue": "LOG_LEVEL.ERROR"
            },
            {
                "name": "AutoArrange",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-diagrams/stories/examples/examples.stories.ts",
                "type": "",
                "defaultValue": "AutoArrangeDiagramTemplate.bind({})"
            },
            {
                "name": "AutoArrangeDiagramTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-diagrams/stories/examples/examples.template.ts",
                "type": "Story<AutoArrangeExampleStoryComponent>",
                "defaultValue": "(\n  args: any\n) => ({\n  component: AutoArrangeExampleStoryComponent,\n  props: args,\n})"
            },
            {
                "name": "Basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-diagrams/stories/examples/examples.stories.ts",
                "type": "",
                "defaultValue": "BasicDiagramTemplate.bind({})"
            },
            {
                "name": "BasicDiagramTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-diagrams/stories/examples/examples.template.ts",
                "type": "Story<BasicExampleStoryComponent>",
                "defaultValue": "(\n  args: any\n) => ({\n  component: BasicExampleStoryComponent,\n  props: args,\n})"
            },
            {
                "name": "Custom",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-diagrams/stories/link/link.stories.ts",
                "type": "",
                "defaultValue": "CustomLinkTemplate.bind({})"
            },
            {
                "name": "Custom",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-diagrams/stories/label/label.stories.ts",
                "type": "",
                "defaultValue": "CustomLinkTemplate.bind({})"
            },
            {
                "name": "Custom",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-diagrams/stories/port/port.stories.ts",
                "type": "",
                "defaultValue": "CustomNodeTemplate.bind({})"
            },
            {
                "name": "Custom",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-diagrams/stories/node/node.stories.ts",
                "type": "",
                "defaultValue": "CustomNodeTemplate.bind({})"
            },
            {
                "name": "CustomLinkTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-diagrams/stories/link/link.template.ts",
                "type": "Story<CustomLinkDiagramComponent>",
                "defaultValue": "(\n  args: any\n) => ({\n  component: CustomLinkDiagramComponent,\n  props: args,\n})"
            },
            {
                "name": "CustomLinkTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-diagrams/stories/label/label.template.ts",
                "type": "Story<CustomLabelDiagramComponent>",
                "defaultValue": "(\n  args: any\n) => ({\n  component: CustomLabelDiagramComponent,\n  props: args,\n})"
            },
            {
                "name": "CustomNodeTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-diagrams/stories/port/port.template.ts",
                "type": "Story<CustomPortDiagramComponent>",
                "defaultValue": "(\n  args: any\n) => ({\n  component: CustomPortDiagramComponent,\n  props: args,\n})"
            },
            {
                "name": "CustomNodeTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-diagrams/stories/node/node.template.ts",
                "type": "Story<CustomNodeDiagramComponent>",
                "defaultValue": "(\n  args: any\n) => ({\n  component: CustomNodeDiagramComponent,\n  props: args,\n})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-diagrams/stories/link/link.stories.ts",
                "type": "",
                "defaultValue": "DefaultLinkTemplate.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-diagrams/stories/label/label.stories.ts",
                "type": "",
                "defaultValue": "DefaultLinkTemplate.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-diagrams/stories/port/port.stories.ts",
                "type": "",
                "defaultValue": "DefaultNodeTemplate.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-diagrams/stories/node/node.stories.ts",
                "type": "",
                "defaultValue": "DefaultNodeTemplate.bind({})"
            },
            {
                "name": "DefaultLinkTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-diagrams/stories/link/link.template.ts",
                "type": "Story<DefaultLinkStoryComponent>",
                "defaultValue": "(\n  args: any\n) => ({\n  component: DefaultLinkStoryComponent,\n  props: args,\n})"
            },
            {
                "name": "DefaultLinkTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-diagrams/stories/label/label.template.ts",
                "type": "Story<DefaultLabelStoryComponent>",
                "defaultValue": "(\n  args: any\n) => ({\n  component: DefaultLabelStoryComponent,\n  props: args,\n})"
            },
            {
                "name": "DefaultNodeTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-diagrams/stories/port/port.template.ts",
                "type": "Story<DefaultPortComponent>",
                "defaultValue": "(\n  args: any\n) => ({\n  component: DefaultPortComponent,\n  props: args,\n})"
            },
            {
                "name": "DefaultNodeTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-diagrams/stories/node/node.template.ts",
                "type": "Story<DefaultNodeComponent>",
                "defaultValue": "(\n  args: any\n) => ({\n  component: DefaultNodeComponent,\n  props: args,\n})"
            },
            {
                "name": "PerformanceDiagramTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-diagrams/stories/examples/examples.template.ts",
                "type": "Story<PerformanceExampleStoryComponent>",
                "defaultValue": "(args: any) => ({\n\tcomponent: PerformanceExampleStoryComponent,\n\tprops: args,\n})"
            },
            {
                "name": "ROUTING_SCALING_FACTOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-diagrams/src/lib/plugins/smart-routing.plugin.ts",
                "type": "number",
                "defaultValue": "10"
            },
            {
                "name": "Serialization",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-diagrams/stories/examples/examples.stories.ts",
                "type": "",
                "defaultValue": "SerializationDiagramTemplate.bind({})"
            },
            {
                "name": "SerializationDiagramTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-diagrams/stories/examples/examples.template.ts",
                "type": "Story<SerializationExampleStoryComponent>",
                "defaultValue": "(\n  args: any\n) => ({\n  component: SerializationExampleStoryComponent,\n  props: { ...args, serialized: action('serialized') },\n})"
            },
            {
                "name": "SmartRouting",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-diagrams/stories/examples/examples.stories.ts",
                "type": "",
                "defaultValue": "SmartRoutingDiagramTemplate.bind({})"
            },
            {
                "name": "SmartRoutingDiagramTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-diagrams/stories/examples/examples.template.ts",
                "type": "Story<SmartRoutingExampleStoryComponent>",
                "defaultValue": "(\n  args: any\n) => ({\n  component: SmartRoutingExampleStoryComponent,\n  props: args,\n})"
            }
        ],
        "functions": [
            {
                "name": "arrayToMap",
                "file": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "arr"
                    }
                ],
                "returnType": "HashMap<T>",
                "jsdoctags": [
                    {
                        "name": "arr",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "coerceArray",
                "file": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "value"
                    }
                ],
                "returnType": "T[]",
                "jsdoctags": [
                    {
                        "name": "value",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "createEntityState",
                "file": "libs/ngx-diagrams/src/lib/state/state.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "value"
                    },
                    {
                        "name": "entityPipe"
                    }
                ],
                "returnType": "EntityState<T>",
                "jsdoctags": [
                    {
                        "name": "value",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "entityPipe",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "createValueState",
                "file": "libs/ngx-diagrams/src/lib/state/state.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "value"
                    },
                    {
                        "name": "operator",
                        "optional": true
                    }
                ],
                "returnType": "ValueState<T>",
                "jsdoctags": [
                    {
                        "name": "value",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "operator",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "enableDiagramProdMode",
                "file": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [],
                "returnType": "void"
            },
            {
                "name": "entityProperty",
                "file": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "<p>rxjs entity properties operator</p>\n",
                "args": [
                    {
                        "name": "destroyedNotifier"
                    },
                    {
                        "name": "replayBy",
                        "type": "number"
                    },
                    {
                        "name": "logMessage",
                        "type": "string"
                    }
                ],
                "returnType": "MonoTypeOperatorFunction<T>",
                "jsdoctags": [
                    {
                        "name": "destroyedNotifier",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "replayBy",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logMessage",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "generateCurvePath",
                "file": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "firstPoint"
                    },
                    {
                        "name": "lastPoint"
                    },
                    {
                        "name": "curvy",
                        "type": "number"
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "firstPoint",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "lastPoint",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "curvy",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "generateDynamicPath",
                "file": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "pathCoords"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "pathCoords",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "generateLinePath",
                "file": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "firstPoint",
                        "type": "any"
                    },
                    {
                        "name": "lastPoint",
                        "type": "any"
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "firstPoint",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "lastPoint",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isArray",
                "file": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "val",
                        "type": "any"
                    }
                ],
                "returnType": "T[]",
                "jsdoctags": [
                    {
                        "name": "val",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isDev",
                "file": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [],
                "returnType": "boolean"
            },
            {
                "name": "isEmptyArray",
                "file": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "arr"
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": "arr",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isFunction",
                "file": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "val",
                        "type": "any"
                    }
                ],
                "returnType": "function",
                "jsdoctags": [
                    {
                        "name": "val",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isNil",
                "file": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "v",
                        "type": "any"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "v",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isString",
                "file": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "val",
                        "type": "any"
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "val",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "log",
                "file": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "message"
                    },
                    {
                        "name": "level"
                    },
                    {
                        "name": "args",
                        "dotDotDotToken": true
                    }
                ],
                "returnType": "void",
                "jsdoctags": [
                    {
                        "name": "message",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "level",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "args",
                        "dotDotDotToken": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "mapToArray",
                "file": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "map"
                    }
                ],
                "returnType": "T[]",
                "jsdoctags": [
                    {
                        "name": "map",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "mapToEntries",
                "file": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "map"
                    }
                ],
                "returnType": "Entries<T>",
                "jsdoctags": [
                    {
                        "name": "map",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "OutsideZone",
                "file": "libs/ngx-diagrams/src/lib/utils/decorators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "targetClass"
                    },
                    {
                        "name": "functionName"
                    },
                    {
                        "name": "descriptor",
                        "type": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "targetClass",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "functionName",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "descriptor",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "setLogLevel",
                "file": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "level"
                    }
                ],
                "returnType": "void",
                "jsdoctags": [
                    {
                        "name": "level",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "UID",
                "file": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "<p>Generates a unique ID</p>\n",
                "args": [],
                "returnType": "ID"
            },
            {
                "name": "unique",
                "file": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "arr"
                    }
                ],
                "returnType": "T[]",
                "jsdoctags": [
                    {
                        "name": "arr",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "withLog",
                "file": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "<p>rxjs log operator</p>\n",
                "args": [
                    {
                        "name": "message"
                    },
                    {
                        "name": "level"
                    },
                    {
                        "name": "args",
                        "type": "any",
                        "dotDotDotToken": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "message",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "level",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "args",
                        "type": "any",
                        "dotDotDotToken": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "BaseEntityType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"node\" | \"link\" | \"port\" | \"point\"",
                "file": "libs/ngx-diagrams/src/lib/base.entity.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "EntityMap",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Map<ID | T>",
                "file": "libs/ngx-diagrams/src/lib/utils/types.ts",
                "description": "",
                "kind": 161
            },
            {
                "name": "Entries",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "libs/ngx-diagrams/src/lib/utils/types.ts",
                "description": "",
                "kind": 172
            },
            {
                "name": "ID",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "string",
                "file": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "description": "",
                "kind": 137
            }
        ],
        "enumerations": [
            {
                "name": "LOG_LEVEL",
                "childs": [
                    {
                        "name": "LOG"
                    },
                    {
                        "name": "ERROR"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts"
            }
        ],
        "groupedVariables": {
            "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts": [
                {
                    "name": "__DEV__",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                    "type": "",
                    "defaultValue": "true"
                },
                {
                    "name": "__LOG__",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                    "type": "LOG_LEVEL",
                    "defaultValue": "LOG_LEVEL.ERROR"
                }
            ],
            "libs/ngx-diagrams/stories/examples/examples.stories.ts": [
                {
                    "name": "AutoArrange",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-diagrams/stories/examples/examples.stories.ts",
                    "type": "",
                    "defaultValue": "AutoArrangeDiagramTemplate.bind({})"
                },
                {
                    "name": "Basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-diagrams/stories/examples/examples.stories.ts",
                    "type": "",
                    "defaultValue": "BasicDiagramTemplate.bind({})"
                },
                {
                    "name": "Serialization",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-diagrams/stories/examples/examples.stories.ts",
                    "type": "",
                    "defaultValue": "SerializationDiagramTemplate.bind({})"
                },
                {
                    "name": "SmartRouting",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-diagrams/stories/examples/examples.stories.ts",
                    "type": "",
                    "defaultValue": "SmartRoutingDiagramTemplate.bind({})"
                }
            ],
            "libs/ngx-diagrams/stories/examples/examples.template.ts": [
                {
                    "name": "AutoArrangeDiagramTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-diagrams/stories/examples/examples.template.ts",
                    "type": "Story<AutoArrangeExampleStoryComponent>",
                    "defaultValue": "(\n  args: any\n) => ({\n  component: AutoArrangeExampleStoryComponent,\n  props: args,\n})"
                },
                {
                    "name": "BasicDiagramTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-diagrams/stories/examples/examples.template.ts",
                    "type": "Story<BasicExampleStoryComponent>",
                    "defaultValue": "(\n  args: any\n) => ({\n  component: BasicExampleStoryComponent,\n  props: args,\n})"
                },
                {
                    "name": "PerformanceDiagramTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-diagrams/stories/examples/examples.template.ts",
                    "type": "Story<PerformanceExampleStoryComponent>",
                    "defaultValue": "(args: any) => ({\n\tcomponent: PerformanceExampleStoryComponent,\n\tprops: args,\n})"
                },
                {
                    "name": "SerializationDiagramTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-diagrams/stories/examples/examples.template.ts",
                    "type": "Story<SerializationExampleStoryComponent>",
                    "defaultValue": "(\n  args: any\n) => ({\n  component: SerializationExampleStoryComponent,\n  props: { ...args, serialized: action('serialized') },\n})"
                },
                {
                    "name": "SmartRoutingDiagramTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-diagrams/stories/examples/examples.template.ts",
                    "type": "Story<SmartRoutingExampleStoryComponent>",
                    "defaultValue": "(\n  args: any\n) => ({\n  component: SmartRoutingExampleStoryComponent,\n  props: args,\n})"
                }
            ],
            "libs/ngx-diagrams/stories/link/link.stories.ts": [
                {
                    "name": "Custom",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-diagrams/stories/link/link.stories.ts",
                    "type": "",
                    "defaultValue": "CustomLinkTemplate.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-diagrams/stories/link/link.stories.ts",
                    "type": "",
                    "defaultValue": "DefaultLinkTemplate.bind({})"
                }
            ],
            "libs/ngx-diagrams/stories/label/label.stories.ts": [
                {
                    "name": "Custom",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-diagrams/stories/label/label.stories.ts",
                    "type": "",
                    "defaultValue": "CustomLinkTemplate.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-diagrams/stories/label/label.stories.ts",
                    "type": "",
                    "defaultValue": "DefaultLinkTemplate.bind({})"
                }
            ],
            "libs/ngx-diagrams/stories/port/port.stories.ts": [
                {
                    "name": "Custom",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-diagrams/stories/port/port.stories.ts",
                    "type": "",
                    "defaultValue": "CustomNodeTemplate.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-diagrams/stories/port/port.stories.ts",
                    "type": "",
                    "defaultValue": "DefaultNodeTemplate.bind({})"
                }
            ],
            "libs/ngx-diagrams/stories/node/node.stories.ts": [
                {
                    "name": "Custom",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-diagrams/stories/node/node.stories.ts",
                    "type": "",
                    "defaultValue": "CustomNodeTemplate.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-diagrams/stories/node/node.stories.ts",
                    "type": "",
                    "defaultValue": "DefaultNodeTemplate.bind({})"
                }
            ],
            "libs/ngx-diagrams/stories/link/link.template.ts": [
                {
                    "name": "CustomLinkTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-diagrams/stories/link/link.template.ts",
                    "type": "Story<CustomLinkDiagramComponent>",
                    "defaultValue": "(\n  args: any\n) => ({\n  component: CustomLinkDiagramComponent,\n  props: args,\n})"
                },
                {
                    "name": "DefaultLinkTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-diagrams/stories/link/link.template.ts",
                    "type": "Story<DefaultLinkStoryComponent>",
                    "defaultValue": "(\n  args: any\n) => ({\n  component: DefaultLinkStoryComponent,\n  props: args,\n})"
                }
            ],
            "libs/ngx-diagrams/stories/label/label.template.ts": [
                {
                    "name": "CustomLinkTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-diagrams/stories/label/label.template.ts",
                    "type": "Story<CustomLabelDiagramComponent>",
                    "defaultValue": "(\n  args: any\n) => ({\n  component: CustomLabelDiagramComponent,\n  props: args,\n})"
                },
                {
                    "name": "DefaultLinkTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-diagrams/stories/label/label.template.ts",
                    "type": "Story<DefaultLabelStoryComponent>",
                    "defaultValue": "(\n  args: any\n) => ({\n  component: DefaultLabelStoryComponent,\n  props: args,\n})"
                }
            ],
            "libs/ngx-diagrams/stories/port/port.template.ts": [
                {
                    "name": "CustomNodeTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-diagrams/stories/port/port.template.ts",
                    "type": "Story<CustomPortDiagramComponent>",
                    "defaultValue": "(\n  args: any\n) => ({\n  component: CustomPortDiagramComponent,\n  props: args,\n})"
                },
                {
                    "name": "DefaultNodeTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-diagrams/stories/port/port.template.ts",
                    "type": "Story<DefaultPortComponent>",
                    "defaultValue": "(\n  args: any\n) => ({\n  component: DefaultPortComponent,\n  props: args,\n})"
                }
            ],
            "libs/ngx-diagrams/stories/node/node.template.ts": [
                {
                    "name": "CustomNodeTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-diagrams/stories/node/node.template.ts",
                    "type": "Story<CustomNodeDiagramComponent>",
                    "defaultValue": "(\n  args: any\n) => ({\n  component: CustomNodeDiagramComponent,\n  props: args,\n})"
                },
                {
                    "name": "DefaultNodeTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-diagrams/stories/node/node.template.ts",
                    "type": "Story<DefaultNodeComponent>",
                    "defaultValue": "(\n  args: any\n) => ({\n  component: DefaultNodeComponent,\n  props: args,\n})"
                }
            ],
            "libs/ngx-diagrams/src/lib/plugins/smart-routing.plugin.ts": [
                {
                    "name": "ROUTING_SCALING_FACTOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-diagrams/src/lib/plugins/smart-routing.plugin.ts",
                    "type": "number",
                    "defaultValue": "10"
                }
            ]
        },
        "groupedFunctions": {
            "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts": [
                {
                    "name": "arrayToMap",
                    "file": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "arr"
                        }
                    ],
                    "returnType": "HashMap<T>",
                    "jsdoctags": [
                        {
                            "name": "arr",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "coerceArray",
                    "file": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "value"
                        }
                    ],
                    "returnType": "T[]",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "enableDiagramProdMode",
                    "file": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [],
                    "returnType": "void"
                },
                {
                    "name": "entityProperty",
                    "file": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "<p>rxjs entity properties operator</p>\n",
                    "args": [
                        {
                            "name": "destroyedNotifier"
                        },
                        {
                            "name": "replayBy",
                            "type": "number"
                        },
                        {
                            "name": "logMessage",
                            "type": "string"
                        }
                    ],
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "jsdoctags": [
                        {
                            "name": "destroyedNotifier",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "replayBy",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "logMessage",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateCurvePath",
                    "file": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "firstPoint"
                        },
                        {
                            "name": "lastPoint"
                        },
                        {
                            "name": "curvy",
                            "type": "number"
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "firstPoint",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lastPoint",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "curvy",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateDynamicPath",
                    "file": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "pathCoords"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "pathCoords",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateLinePath",
                    "file": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "firstPoint",
                            "type": "any"
                        },
                        {
                            "name": "lastPoint",
                            "type": "any"
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "firstPoint",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lastPoint",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isArray",
                    "file": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "val",
                            "type": "any"
                        }
                    ],
                    "returnType": "T[]",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isDev",
                    "file": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [],
                    "returnType": "boolean"
                },
                {
                    "name": "isEmptyArray",
                    "file": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "arr"
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": "arr",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isFunction",
                    "file": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "val",
                            "type": "any"
                        }
                    ],
                    "returnType": "function",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isNil",
                    "file": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "v",
                            "type": "any"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "v",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isString",
                    "file": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "val",
                            "type": "any"
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "log",
                    "file": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "message"
                        },
                        {
                            "name": "level"
                        },
                        {
                            "name": "args",
                            "dotDotDotToken": true
                        }
                    ],
                    "returnType": "void",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "level",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mapToArray",
                    "file": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "map"
                        }
                    ],
                    "returnType": "T[]",
                    "jsdoctags": [
                        {
                            "name": "map",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mapToEntries",
                    "file": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "map"
                        }
                    ],
                    "returnType": "Entries<T>",
                    "jsdoctags": [
                        {
                            "name": "map",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setLogLevel",
                    "file": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "level"
                        }
                    ],
                    "returnType": "void",
                    "jsdoctags": [
                        {
                            "name": "level",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "UID",
                    "file": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "<p>Generates a unique ID</p>\n",
                    "args": [],
                    "returnType": "ID"
                },
                {
                    "name": "unique",
                    "file": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "arr"
                        }
                    ],
                    "returnType": "T[]",
                    "jsdoctags": [
                        {
                            "name": "arr",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "withLog",
                    "file": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "<p>rxjs log operator</p>\n",
                    "args": [
                        {
                            "name": "message"
                        },
                        {
                            "name": "level"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "level",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "libs/ngx-diagrams/src/lib/state/state.ts": [
                {
                    "name": "createEntityState",
                    "file": "libs/ngx-diagrams/src/lib/state/state.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "value"
                        },
                        {
                            "name": "entityPipe"
                        }
                    ],
                    "returnType": "EntityState<T>",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "entityPipe",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createValueState",
                    "file": "libs/ngx-diagrams/src/lib/state/state.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "value"
                        },
                        {
                            "name": "operator",
                            "optional": true
                        }
                    ],
                    "returnType": "ValueState<T>",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "operator",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "libs/ngx-diagrams/src/lib/utils/decorators.ts": [
                {
                    "name": "OutsideZone",
                    "file": "libs/ngx-diagrams/src/lib/utils/decorators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "targetClass"
                        },
                        {
                            "name": "functionName"
                        },
                        {
                            "name": "descriptor",
                            "type": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "targetClass",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "functionName",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "descriptor",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts": [
                {
                    "name": "LOG_LEVEL",
                    "childs": [
                        {
                            "name": "LOG"
                        },
                        {
                            "name": "ERROR"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "libs/ngx-diagrams/src/lib/base.entity.ts": [
                {
                    "name": "BaseEntityType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"node\" | \"link\" | \"port\" | \"point\"",
                    "file": "libs/ngx-diagrams/src/lib/base.entity.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "libs/ngx-diagrams/src/lib/utils/types.ts": [
                {
                    "name": "EntityMap",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Map<ID | T>",
                    "file": "libs/ngx-diagrams/src/lib/utils/types.ts",
                    "description": "",
                    "kind": 161
                },
                {
                    "name": "Entries",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "libs/ngx-diagrams/src/lib/utils/types.ts",
                    "description": "",
                    "kind": 172
                }
            ],
            "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts": [
                {
                    "name": "ID",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "string",
                    "file": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                    "description": "",
                    "kind": 137
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 3,
        "status": "low",
        "files": [
            {
                "filePath": "libs/ngx-diagrams/src/lib/actions/base.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BaseAction",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/actions/invalid-link-destroyed.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "InvalidLinkDestroyed",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/actions/links-created.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LinkCreatedAction",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/actions/loose-link-destroyed.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LooseLinkDestroyed",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/actions/move-canvas.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MoveCanvasAction",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/actions/move-items.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MoveItemsAction",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/actions/selecting.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SelectingAction",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/base.entity.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BaseEntity",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/containers/diagram/diagram.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgxDiagramComponent",
                "coveragePercent": 7,
                "coverageCount": "3/42",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/defaults/components/default-label/default-label.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DefaultLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/52",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/defaults/components/default-link/default-link.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DefaultLinkComponent",
                "coveragePercent": 0,
                "coverageCount": "0/95",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/defaults/components/default-node/default-node.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DefaultNodeComponent",
                "coveragePercent": 1,
                "coverageCount": "1/83",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/defaults/components/default-port/default-port.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DefaultPortComponent",
                "coveragePercent": 0,
                "coverageCount": "0/84",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/defaults/factories/default-label.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DefaultLabelFactory",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/defaults/factories/default-link.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DefaultLinkFactory",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/defaults/factories/default-node.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DefaultNodeFactory",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/defaults/factories/default-port.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DefaultPortFactory",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/defaults/models/default-label.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DefaultLabelModel",
                "coveragePercent": 0,
                "coverageCount": "0/118",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/defaults/models/default-link.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DefaultLinkModel",
                "coveragePercent": 0,
                "coverageCount": "0/151",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/defaults/models/default-node.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DefaultNodeModel",
                "coveragePercent": 0,
                "coverageCount": "1/146",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/defaults/models/default-port.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DefaultPortModel",
                "coveragePercent": 0,
                "coverageCount": "0/150",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/defaults/models/default-port.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DefaultPortModelConfig",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/factories/base.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AbstractFactory",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/factories/label.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AbstractLabelFactory",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/factories/link.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AbstractLinkFactory",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/factories/node.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AbstractNodeFactory",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/factories/port.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AbstractPortFactory",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/interfaces/coords.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Coords",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/interfaces/dimensions.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Dimensions",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/interfaces/event.interface.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BaseEvent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/interfaces/event.interface.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LockEvent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/interfaces/event.interface.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PaintedEvent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/interfaces/event.interface.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ParentChangeEvent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/interfaces/event.interface.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SelectionEvent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/interfaces/select-options.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SelectOptions",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/interfaces/serialization.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SerializedBaseModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/interfaces/serialization.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SerializedDiagramModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/interfaces/serialization.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SerializedLabelModel",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/interfaces/serialization.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SerializedLinkModel",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/interfaces/serialization.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SerializedNodeModel",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/interfaces/serialization.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SerializedPointModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/interfaces/serialization.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SerializedPortModel",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/models/base.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BaseModel",
                "coveragePercent": 0,
                "coverageCount": "0/38",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/models/diagram.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DiagramModel",
                "coveragePercent": 9,
                "coverageCount": "6/62",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/models/label.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LabelModel",
                "coveragePercent": 0,
                "coverageCount": "0/63",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/models/link.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LinkModel",
                "coveragePercent": 0,
                "coverageCount": "0/92",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/models/move-selection.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SelectionModel",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/models/node.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "NodeModel",
                "coveragePercent": 1,
                "coverageCount": "1/89",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/models/point.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PointModel",
                "coveragePercent": 0,
                "coverageCount": "0/63",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/models/port.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PortModel",
                "coveragePercent": 0,
                "coverageCount": "0/93",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/plugins/dagre-engine.plugin.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DagreEngine",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/plugins/dagre-engine.plugin.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DagreEngineOptions",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/plugins/smart-routing.plugin.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PathFinding",
                "coveragePercent": 50,
                "coverageCount": "3/6",
                "status": "medium"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/plugins/smart-routing.plugin.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ROUTING_SCALING_FACTOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/services/engine.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DiagramEngine",
                "coveragePercent": 14,
                "coverageCount": "9/61",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/state/state.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EntityState",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/state/state.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ValueState",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/state/state.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "createEntityState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/state/state.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "createValueState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/utils/decorators.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ZonedClass",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/utils/decorators.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "OutsideZone",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/utils/template-var.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "TemplateVarDirective",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/utils/template-var.directive.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TemplateVarContext",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "arrayToMap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "coerceArray",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "enableDiagramProdMode",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "entityProperty",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "generateCurvePath",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "generateDynamicPath",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "generateLinePath",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "isArray",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "isDev",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "isEmptyArray",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "isFunction",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "isNil",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "isString",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "log",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "mapToArray",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "mapToEntries",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "setLogLevel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "UID",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "unique",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "withLog",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "__DEV__",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "__LOG__",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/src/lib/utils/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "HashMap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/stories/examples/auto-arrange/auto-arrange.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AutoArrangeExampleStoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/stories/examples/basic/basic.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BasicExampleStoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/stories/examples/examples.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AutoArrange",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/stories/examples/examples.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/stories/examples/examples.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Serialization",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/stories/examples/examples.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SmartRouting",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/stories/examples/examples.template.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AutoArrangeDiagramTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/stories/examples/examples.template.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BasicDiagramTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/stories/examples/examples.template.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PerformanceDiagramTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/stories/examples/examples.template.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SerializationDiagramTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/stories/examples/examples.template.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SmartRoutingDiagramTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/stories/examples/performance/performance.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PerformanceExampleStoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/stories/examples/serialization/serialization.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SerializationExampleStoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/stories/examples/smart-routing/smart-routing.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SmartRoutingExampleStoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/stories/label/custom/custom-label.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/52",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/stories/label/custom/custom.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CustomLabelFactory",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/stories/label/custom/diagram.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomLabelDiagramComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/stories/label/default/default.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DefaultLabelStoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/stories/label/label.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Custom",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/stories/label/label.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/stories/label/label.template.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CustomLinkTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/stories/label/label.template.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultLinkTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/stories/link/custom/custom-link.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomLinkComponent",
                "coveragePercent": 0,
                "coverageCount": "0/92",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/stories/link/custom/custom.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CustomLinkFactory",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/stories/link/custom/diagram.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomLinkDiagramComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/stories/link/default/default.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DefaultLinkStoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/stories/link/link.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Custom",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/stories/link/link.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/stories/link/link.template.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CustomLinkTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/stories/link/link.template.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultLinkTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/stories/node/custom/custom.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomNodeComponent",
                "coveragePercent": 1,
                "coverageCount": "1/86",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/stories/node/custom/custom.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CustomNodeFactory",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/stories/node/custom/diagram.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomNodeDiagramComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/stories/node/default/default.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DefaultNodeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/stories/node/node.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Custom",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/stories/node/node.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/stories/node/node.template.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CustomNodeTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/stories/node/node.template.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultNodeTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/stories/port/custom/custom.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomPortComponent",
                "coveragePercent": 0,
                "coverageCount": "0/85",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/stories/port/custom/custom.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CustomPortFactory",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/stories/port/custom/diagram.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomPortDiagramComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/stories/port/default/default.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DefaultPortComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/stories/port/port.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Custom",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/stories/port/port.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/stories/port/port.template.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CustomNodeTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-diagrams/stories/port/port.template.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultNodeTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}