{
    "pipes": [],
    "interfaces": [
        {
            "name": "DagreEngineOptions",
            "id": "interface-DagreEngineOptions-712ddff38d4188468f10d88bf4962a78",
            "file": "libs/angular/src/lib/plugins/dagre-engine.plugin.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { DiagramModel, PointModel } from '@ngx-diagrams/core';\nimport * as dagre from 'dagre';\nimport { EdgeConfig, GraphLabel, NodeConfig } from 'dagre';\n\nexport interface DagreEngineOptions {\n  graph?: GraphLabel;\n  layout?: GraphLabel & NodeConfig & EdgeConfig;\n  /**\n   * Will also layout links\n   */\n  includeLinks?: boolean;\n}\n\n@Injectable()\nexport class DagreEngine {\n  g: dagre.graphlib.Graph;\n\n  instantiate() {\n    try {\n      this.g = new dagre.graphlib.Graph({ multigraph: true });\n    } catch (error) {\n      console.warn(\"`dagre` packages isn't installed, please install it before using the DagreEngine plugin\");\n    }\n  }\n\n  redistribute(model: DiagramModel, options: DagreEngineOptions = {}): void {\n    this.instantiate();\n\n    this.g.setGraph(options.graph || {});\n\n    this.g.setDefaultEdgeLabel(() => {\n      return {};\n    });\n\n    const processedlinks: { [id: string]: boolean } = {};\n\n    // set nodes\n    model.getNodes().forEach((node) => {\n      this.g.setNode(node.id, {\n        width: node.getWidth(),\n        height: node.getHeight()\n      });\n    });\n\n    model.getLinks().forEach((link) => {\n      // set edges\n      if (link.getSourcePort() && link.getTargetPort()) {\n        processedlinks[link.id] = true;\n        this.g.setEdge({\n          v: link.getSourcePort().getNode().id,\n          w: link.getTargetPort().getNode().id,\n          name: link.id\n        });\n      }\n    });\n\n    // layout the graph\n    dagre.layout(this.g, options.layout);\n\n    this.g.nodes().forEach((v) => {\n      const { x, y } = this.g.node(v);\n      model.getNode(v).setCoords({ x, y });\n    });\n\n    // also include links?\n    if (options.includeLinks) {\n      this.g.edges().forEach((e) => {\n        const edge = this.g.edge(e);\n        const link = model.getLink(e.name);\n\n        const points = [link.getFirstPoint()];\n        for (let i = 1; i < edge.points.length - 2; i++) {\n          points.push(new PointModel(link, { x: edge.points[i].x, y: edge.points[i].y }));\n        }\n        link.setPoints(points.concat(link.getLastPoint()));\n      });\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "graph",
                    "type": "GraphLabel",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "includeLinks",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Will also layout links</p>\n",
                    "line": 12
                },
                {
                    "name": "layout",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "DefaultPortModelConfig",
            "id": "interface-DefaultPortModelConfig-b1842f0b2c824ba1ce6f68c153e8b57b",
            "file": "libs/angular/src/lib/defaults/models/default-port.model.ts",
            "type": "interface",
            "sourceCode": "import { PortModel, HashMap, LinkModel } from '@ngx-diagrams/core';\nimport { DefaultLinkModel } from './default-link.model';\n\nexport interface DefaultPortModelConfig {\n  id?: string;\n  isInput?: boolean;\n  name?: string;\n  type?: string;\n  label?: string;\n  linkType?: string;\n  maximumLinks?: number;\n}\n\nexport class DefaultPortModel extends PortModel {\n  in: boolean;\n  label: string;\n  links: HashMap<DefaultLinkModel>;\n\n  constructor({\n    isInput = true,\n    name = 'port',\n    type = 'default',\n    id = null,\n    label = null,\n    linkType = 'default',\n    maximumLinks = null\n  }: DefaultPortModelConfig = {}) {\n    super(name, type, id, null, linkType);\n    this.in = isInput;\n    this.label = label || name;\n\n    if (this.in) {\n      this.setCanCreateLinks(false);\n    } else {\n      this.setMaximumLinks(maximumLinks);\n      this.setMagnetic(false);\n    }\n  }\n\n  link(port: PortModel): LinkModel {\n    if (super.getCanCreateLinks()) {\n      const link = new DefaultLinkModel({ type: this.getLinkType() });\n      link.setSourcePort(this);\n      link.setTargetPort(port);\n      return link;\n    }\n\n    return null;\n  }\n\n  createLinkModel() {\n    if (super.getCanCreateLinks()) {\n      return new DefaultLinkModel({ type: this.getLinkType() });\n    }\n  }\n\n  canLinkToPort(port: PortModel): boolean {\n    if (port instanceof DefaultPortModel) {\n      return this.in !== port.in;\n    }\n    return true;\n  }\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "isInput",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "linkType",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "maximumLinks",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ZonedClass",
            "id": "interface-ZonedClass-95a8ba087560debc8f9321814c92650b",
            "file": "libs/angular/src/lib/utils/decorators.ts",
            "type": "interface",
            "sourceCode": "import { NgZone } from '@angular/core';\n\nexport interface ZonedClass {\n  ngZone: NgZone;\n}\n\nexport function OutsideZone<T extends ZonedClass>(targetClass: T, functionName: string, descriptor) {\n  const source = descriptor.value;\n  descriptor.value = function (...data) {\n    if (!this.ngZone) {\n      throw new Error(\"Class with 'OutsideZone' decorator should have 'ngZone' class property with 'NgZone' class.\");\n    }\n    return this.ngZone.runOutsideAngular(() => source.call(this, ...data));\n  };\n  return descriptor;\n}\n",
            "properties": [
                {
                    "name": "ngZone",
                    "type": "NgZone",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "DagreEngine",
            "id": "injectable-DagreEngine-712ddff38d4188468f10d88bf4962a78",
            "file": "libs/angular/src/lib/plugins/dagre-engine.plugin.ts",
            "properties": [
                {
                    "name": "g",
                    "type": "dagre.graphlib.Graph",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methods": [
                {
                    "name": "instantiate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                },
                {
                    "name": "redistribute",
                    "args": [
                        {
                            "name": "model",
                            "type": "DiagramModel"
                        },
                        {
                            "name": "options",
                            "type": "DagreEngineOptions",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "DiagramModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "DagreEngineOptions",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { DiagramModel, PointModel } from '@ngx-diagrams/core';\nimport * as dagre from 'dagre';\nimport { EdgeConfig, GraphLabel, NodeConfig } from 'dagre';\n\nexport interface DagreEngineOptions {\n  graph?: GraphLabel;\n  layout?: GraphLabel & NodeConfig & EdgeConfig;\n  /**\n   * Will also layout links\n   */\n  includeLinks?: boolean;\n}\n\n@Injectable()\nexport class DagreEngine {\n  g: dagre.graphlib.Graph;\n\n  instantiate() {\n    try {\n      this.g = new dagre.graphlib.Graph({ multigraph: true });\n    } catch (error) {\n      console.warn(\"`dagre` packages isn't installed, please install it before using the DagreEngine plugin\");\n    }\n  }\n\n  redistribute(model: DiagramModel, options: DagreEngineOptions = {}): void {\n    this.instantiate();\n\n    this.g.setGraph(options.graph || {});\n\n    this.g.setDefaultEdgeLabel(() => {\n      return {};\n    });\n\n    const processedlinks: { [id: string]: boolean } = {};\n\n    // set nodes\n    model.getNodes().forEach((node) => {\n      this.g.setNode(node.id, {\n        width: node.getWidth(),\n        height: node.getHeight()\n      });\n    });\n\n    model.getLinks().forEach((link) => {\n      // set edges\n      if (link.getSourcePort() && link.getTargetPort()) {\n        processedlinks[link.id] = true;\n        this.g.setEdge({\n          v: link.getSourcePort().getNode().id,\n          w: link.getTargetPort().getNode().id,\n          name: link.id\n        });\n      }\n    });\n\n    // layout the graph\n    dagre.layout(this.g, options.layout);\n\n    this.g.nodes().forEach((v) => {\n      const { x, y } = this.g.node(v);\n      model.getNode(v).setCoords({ x, y });\n    });\n\n    // also include links?\n    if (options.includeLinks) {\n      this.g.edges().forEach((e) => {\n        const edge = this.g.edge(e);\n        const link = model.getLink(e.name);\n\n        const points = [link.getFirstPoint()];\n        for (let i = 1; i < edge.points.length - 2; i++) {\n          points.push(new PointModel(link, { x: edge.points[i].x, y: edge.points[i].y }));\n        }\n        link.setPoints(points.concat(link.getLastPoint()));\n      });\n    }\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "DiagramEngine",
            "id": "injectable-DiagramEngine-855283f98fa47814153e3ccae202fc21",
            "file": "libs/angular/src/lib/services/engine.service.ts",
            "properties": [
                {
                    "name": "_renderer",
                    "type": "Renderer2",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "canvasMatrix",
                    "defaultValue": "[]",
                    "type": "number[][]",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "hAdjustmentFactor",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "markMatrixPoint",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 261
                },
                {
                    "name": "pathFinding",
                    "type": "PathFinding",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "routingMatrix",
                    "defaultValue": "[]",
                    "type": "number[][]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "smartRouting",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "vAdjustmentFactor",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methods": [
                {
                    "name": "calculateCanvasMatrix",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42
                },
                {
                    "name": "calculateMatrixDimensions",
                    "args": [],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 65,
                    "description": "<p>Despite being a long method, we simply iterate over all three collections (nodes, ports and points)\nto find the highest X and Y dimensions, so we can build the matrix large enough to contain all elements.</p>\n"
                },
                {
                    "name": "calculateRoutingMatrix",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 203
                },
                {
                    "name": "getCanvasMatrix",
                    "args": [],
                    "optional": false,
                    "returnType": "[][]",
                    "typeParameters": [],
                    "line": 161,
                    "description": "<p>A representation of the canvas in the following format:</p>\n<p>+-----------------+\n| 0 0 0 0 0 0 0 0 |\n| 0 0 0 0 0 0 0 0 |\n| 0 0 0 0 0 0 0 0 |\n| 0 0 0 0 0 0 0 0 |\n| 0 0 0 0 0 0 0 0 |\n+-----------------+</p>\n<p>In which all walkable points are marked by zeros.\nIt uses @link{#ROUTING_SCALING_FACTOR} to reduce the matrix dimensions and improve performance.</p>\n"
                },
                {
                    "name": "getPathfinding",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38
                },
                {
                    "name": "getRoutingMatrix",
                    "args": [],
                    "optional": false,
                    "returnType": "[][]",
                    "typeParameters": [],
                    "line": 195,
                    "description": "<p>A representation of the canvas in the following format:</p>\n<p>+-----------------+\n| 0 0 1 1 0 0 0 0 |\n| 0 0 1 1 0 0 1 1 |\n| 0 0 0 0 0 0 1 1 |\n| 1 1 0 0 0 0 0 0 |\n| 1 1 0 0 0 0 0 0 |\n+-----------------+</p>\n<p>In which all points blocked by a node (and its ports) are\nmarked as 1; points were there is nothing (ie, free) receive 0.</p>\n"
                },
                {
                    "name": "getSmartRouting",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 215
                },
                {
                    "name": "markNodes",
                    "args": [
                        {
                            "name": "matrix",
                            "type": "number[][]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 222,
                    "description": "<p>Updates (by reference) where nodes will be drawn on the matrix passed in.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "matrix",
                            "type": "number[][]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "markPorts",
                    "args": [
                        {
                            "name": "matrix",
                            "type": "number[][]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 240,
                    "description": "<p>Updates (by reference) where ports will be drawn on the matrix passed in.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "matrix",
                            "type": "number[][]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSmartRoutingStatus",
                    "args": [
                        {
                            "name": "status",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "translateRoutingX",
                    "args": [
                        {
                            "name": "x",
                            "type": "number"
                        },
                        {
                            "name": "reverse",
                            "type": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 174,
                    "description": "<p>The routing matrix does not have negative indexes, but elements could be negatively positioned.\nWe use the functions below to translate back and forth between these coordinates, relying on the\ncalculated values of hAdjustmentFactor and vAdjustmentFactor.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "x",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reverse",
                            "type": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "translateRoutingY",
                    "args": [
                        {
                            "name": "y",
                            "type": "number"
                        },
                        {
                            "name": "reverse",
                            "type": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 177,
                    "jsdoctags": [
                        {
                            "name": "y",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reverse",
                            "type": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { ComponentFactoryResolver, Injectable, Renderer2, RendererFactory2 } from '@angular/core';\nimport { DiagramEngineCore } from '@ngx-diagrams/core';\nimport { NgxDiagramsModule } from '../ngx-diagrams.module';\nimport { PathFinding, ROUTING_SCALING_FACTOR } from '../plugins/smart-routing.plugin';\n\n@Injectable({ providedIn: NgxDiagramsModule })\nexport class DiagramEngine extends DiagramEngineCore {\n  protected _renderer: Renderer2;\n\n  // smart routing related properties\n  smartRouting: boolean;\n  pathFinding: PathFinding;\n\n  // calculated only when smart routing is active\n  canvasMatrix: number[][] = [];\n  routingMatrix: number[][] = [];\n\n  // used when at least one element has negative coordinates\n  hAdjustmentFactor = 0;\n  vAdjustmentFactor = 0;\n\n  constructor(protected resolver: ComponentFactoryResolver, protected rendererFactory: RendererFactory2) {\n    super();\n    this._renderer = this.rendererFactory.createRenderer(null, null);\n  }\n\n  // SMART ROUTING\n  setSmartRoutingStatus(status: boolean) {\n    if (status && !this.pathFinding) {\n      this.pathFinding = new PathFinding(this);\n    } else {\n      this.pathFinding = null;\n    }\n\n    this.smartRouting = status;\n  }\n\n  getPathfinding() {\n    return this.pathFinding;\n  }\n\n  calculateCanvasMatrix() {\n    const {\n      width: canvasWidth,\n      hAdjustmentFactor,\n      height: canvasHeight,\n      vAdjustmentFactor\n    } = this.calculateMatrixDimensions();\n\n    this.hAdjustmentFactor = hAdjustmentFactor;\n    this.vAdjustmentFactor = vAdjustmentFactor;\n\n    const matrixWidth = Math.ceil(canvasWidth / ROUTING_SCALING_FACTOR);\n    const matrixHeight = Math.ceil(canvasHeight / ROUTING_SCALING_FACTOR);\n\n    this.canvasMatrix = Array.from({ length: matrixHeight }, (_, i) => i + 1).map(() => {\n      return new Array(matrixWidth).fill(0);\n    });\n  }\n\n  /**\n   * Despite being a long method, we simply iterate over all three collections (nodes, ports and points)\n   * to find the highest X and Y dimensions, so we can build the matrix large enough to contain all elements.\n   */\n  calculateMatrixDimensions(): {\n    width: number;\n    hAdjustmentFactor: number;\n    height: number;\n    vAdjustmentFactor: number;\n  } {\n    const allNodesCoords = this.diagramModel.getNodesArray().map((item) => ({\n      x: item.getCoords().x,\n      width: item.getWidth(),\n      y: item.getCoords().y,\n      height: item.getHeight()\n    }));\n\n    const allLinks = this.diagramModel.getLinksArray();\n\n    const allPortsCoords = allLinks\n      .flatMap((link) => [link.getSourcePort(), link.getTargetPort()])\n      .filter((port) => port !== null)\n      .map((item) => ({\n        x: item.getX(),\n        width: item.getWidth(),\n        y: item.getY(),\n        height: item.getHeight()\n      }));\n\n    const allPointsCoords = allLinks\n      .flatMap((link) => link.getPoints())\n      .map((item) => ({\n        // points don't have width/height, so let's just use 0\n        x: item.getCoords().x,\n        width: 0,\n        y: item.getCoords().y,\n        height: 0\n      }));\n\n    const canvas = this.canvas$.value as HTMLDivElement;\n\n    const allElements = allNodesCoords.concat(allPortsCoords, allPointsCoords);\n\n    const minX =\n      Math.floor(\n        Math.min(\n          allElements.reduce((a, b) => {\n            return a.x <= b.x ? a : b;\n          }).x,\n          0\n        ) / ROUTING_SCALING_FACTOR\n      ) * ROUTING_SCALING_FACTOR;\n\n    const maxXElement = allElements.reduce((a, b) => {\n      return a.x + a.width >= b.x + b.width ? a : b;\n    });\n\n    const maxX = Math.max(maxXElement.x + maxXElement.width, canvas.offsetWidth);\n\n    const minY =\n      Math.floor(\n        Math.min(\n          allElements.reduce((a, b) => {\n            return a.y <= b.y ? a : b;\n          }).y,\n          0\n        ) / ROUTING_SCALING_FACTOR\n      ) * ROUTING_SCALING_FACTOR;\n\n    const maxYElement = allElements.reduce((a, b) => {\n      return a.y + a.height >= b.y + b.height ? a : b;\n    });\n\n    const maxY = Math.max(maxYElement.y + maxYElement.height, canvas.offsetWidth);\n\n    const width = Math.ceil(Math.abs(minX) + maxX);\n    const height = Math.ceil(Math.abs(minY) + maxY);\n\n    return {\n      width,\n      hAdjustmentFactor: Math.abs(minX) / ROUTING_SCALING_FACTOR + 1,\n      height,\n      vAdjustmentFactor: Math.abs(minY) / ROUTING_SCALING_FACTOR + 1\n    };\n  }\n\n  /**\n   * A representation of the canvas in the following format:\n   *\n   * +-----------------+\n   * | 0 0 0 0 0 0 0 0 |\n   * | 0 0 0 0 0 0 0 0 |\n   * | 0 0 0 0 0 0 0 0 |\n   * | 0 0 0 0 0 0 0 0 |\n   * | 0 0 0 0 0 0 0 0 |\n   * +-----------------+\n   *\n   * In which all walkable points are marked by zeros.\n   * It uses @link{#ROUTING_SCALING_FACTOR} to reduce the matrix dimensions and improve performance.\n   */\n  getCanvasMatrix(): number[][] {\n    if (this.canvasMatrix.length === 0) {\n      this.calculateCanvasMatrix();\n    }\n\n    return this.canvasMatrix;\n  }\n\n  /**\n   * The routing matrix does not have negative indexes, but elements could be negatively positioned.\n   * We use the functions below to translate back and forth between these coordinates, relying on the\n   * calculated values of hAdjustmentFactor and vAdjustmentFactor.\n   */\n  translateRoutingX(x: number, reverse = false) {\n    return x + this.hAdjustmentFactor * (reverse ? -1 : 1);\n  }\n  translateRoutingY(y: number, reverse = false) {\n    return y + this.vAdjustmentFactor * (reverse ? -1 : 1);\n  }\n\n  /**\n   * A representation of the canvas in the following format:\n   *\n   * +-----------------+\n   * | 0 0 1 1 0 0 0 0 |\n   * | 0 0 1 1 0 0 1 1 |\n   * | 0 0 0 0 0 0 1 1 |\n   * | 1 1 0 0 0 0 0 0 |\n   * | 1 1 0 0 0 0 0 0 |\n   * +-----------------+\n   *\n   * In which all points blocked by a node (and its ports) are\n   * marked as 1; points were there is nothing (ie, free) receive 0.\n   */\n  getRoutingMatrix(): number[][] {\n    if (this.routingMatrix.length === 0) {\n      this.calculateRoutingMatrix();\n    }\n\n    return this.routingMatrix;\n  }\n\n  calculateRoutingMatrix(): void {\n    const matrix = this.getCanvasMatrix().map((item) => item.slice(0));\n\n    // nodes need to be marked as blocked points\n    this.markNodes(matrix);\n\n    // same thing for ports\n    this.markPorts(matrix);\n\n    this.routingMatrix = matrix;\n  }\n\n  getSmartRouting() {\n    return !!this.smartRouting;\n  }\n\n  /**\n   * Updates (by reference) where nodes will be drawn on the matrix passed in.\n   */\n  markNodes(matrix: number[][]): void {\n    this.diagramModel.getNodes().forEach((node) => {\n      const startX = Math.floor(node.getCoords().x / ROUTING_SCALING_FACTOR);\n      const endX = Math.ceil((node.getCoords().x + node.getWidth()) / ROUTING_SCALING_FACTOR);\n      const startY = Math.floor(node.getCoords().y / ROUTING_SCALING_FACTOR);\n      const endY = Math.ceil((node.getCoords().y + node.getHeight()) / ROUTING_SCALING_FACTOR);\n\n      for (let x = startX - 1; x <= endX + 1; x++) {\n        for (let y = startY - 1; y < endY + 1; y++) {\n          this.markMatrixPoint(matrix, this.translateRoutingX(x), this.translateRoutingY(y));\n        }\n      }\n    });\n  }\n\n  /**\n   * Updates (by reference) where ports will be drawn on the matrix passed in.\n   */\n  markPorts(matrix: number[][]): void {\n    const allElements = this.diagramModel\n      .getLinksArray()\n      .flatMap((link) => [link.getSourcePort(), link.getTargetPort()]);\n\n    allElements\n      .filter((port) => port !== null)\n      .forEach((port) => {\n        const startX = Math.floor(port.getX() / ROUTING_SCALING_FACTOR);\n        const endX = Math.ceil((port.getX() + port.getWidth()) / ROUTING_SCALING_FACTOR);\n        const startY = Math.floor(port.getY() / ROUTING_SCALING_FACTOR);\n        const endY = Math.ceil((port.getY() + port.getHeight()) / ROUTING_SCALING_FACTOR);\n\n        for (let x = startX - 1; x <= endX + 1; x++) {\n          for (let y = startY - 1; y < endY + 1; y++) {\n            this.markMatrixPoint(matrix, this.translateRoutingX(x), this.translateRoutingY(y));\n          }\n        }\n      });\n  }\n\n  markMatrixPoint = (matrix: number[][], x: number, y: number) => {\n    if (matrix[y] !== undefined && matrix[y][x] !== undefined) {\n      matrix[y][x] = 1;\n    }\n  };\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver"
                    },
                    {
                        "name": "rendererFactory",
                        "type": "RendererFactory2"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "rendererFactory",
                        "type": "RendererFactory2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "DiagramEngineCore",
            "type": "injectable"
        },
        {
            "name": "FactoriesService",
            "id": "injectable-FactoriesService-b38f2979fb64e6366b8e9387cf5c6952",
            "file": "libs/angular/src/lib/services/factories.service.ts",
            "properties": [
                {
                    "name": "labelFactories",
                    "defaultValue": "new Map<string, AbstractLabelFactory>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "linkFactories",
                    "defaultValue": "new Map<string, AbstractLinkFactory>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "nodeFactories",
                    "defaultValue": "new Map<string, AbstractNodeFactory>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "portFactories",
                    "defaultValue": "new Map<string, AbstractPortFactory>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        113
                    ]
                }
            ],
            "methods": [
                {
                    "name": "generateWidgetForLabel",
                    "args": [
                        {
                            "name": "label",
                            "type": "LabelModel"
                        },
                        {
                            "name": "labelHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef | null",
                    "typeParameters": [],
                    "line": 33,
                    "jsdoctags": [
                        {
                            "name": "label",
                            "type": "LabelModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "labelHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateWidgetForLink",
                    "args": [
                        {
                            "name": "link",
                            "type": "LinkModel"
                        },
                        {
                            "name": "linksHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef | null",
                    "typeParameters": [],
                    "line": 117,
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "LinkModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "linksHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateWidgetForNode",
                    "args": [
                        {
                            "name": "node",
                            "type": "NodeModel"
                        },
                        {
                            "name": "nodesHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef | null",
                    "typeParameters": [],
                    "line": 61,
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "NodeModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nodesHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateWidgetForPort",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        },
                        {
                            "name": "portsHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef | null",
                    "typeParameters": [],
                    "line": 89,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "portsHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFactoryForLabel",
                    "args": [
                        {
                            "name": "label",
                            "type": "LabelModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "AbstractLabelFactory | null",
                    "typeParameters": [],
                    "line": 29,
                    "jsdoctags": [
                        {
                            "name": "label",
                            "type": "LabelModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFactoryForLink",
                    "args": [
                        {
                            "name": "link",
                            "type": "LinkModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "AbstractLinkFactory | null",
                    "typeParameters": [],
                    "line": 113,
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "LinkModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFactoryForNode",
                    "args": [
                        {
                            "name": "node",
                            "type": "NodeModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "AbstractNodeFactory | null",
                    "typeParameters": [],
                    "line": 57,
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "NodeModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFactoryForPort",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "AbstractPortFactory | null",
                    "typeParameters": [],
                    "line": 85,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLabelFactories",
                    "args": [],
                    "optional": false,
                    "returnType": "EntityMap<AbstractLabelFactory>",
                    "typeParameters": [],
                    "line": 18
                },
                {
                    "name": "getLabelFactory",
                    "args": [
                        {
                            "name": "type",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "AbstractLabelFactory",
                    "typeParameters": [],
                    "line": 22,
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLinkFactories",
                    "args": [],
                    "optional": false,
                    "returnType": "EntityMap<AbstractLinkFactory>",
                    "typeParameters": [],
                    "line": 98
                },
                {
                    "name": "getLinkFactory",
                    "args": [
                        {
                            "name": "type",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "AbstractLinkFactory",
                    "typeParameters": [],
                    "line": 106,
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNodeFactories",
                    "args": [],
                    "optional": false,
                    "returnType": "EntityMap<AbstractNodeFactory>",
                    "typeParameters": [],
                    "line": 46
                },
                {
                    "name": "getNodeFactory",
                    "args": [
                        {
                            "name": "type",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "AbstractNodeFactory",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPortFactories",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 74
                },
                {
                    "name": "getPortFactory",
                    "args": [
                        {
                            "name": "type",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "AbstractPortFactory",
                    "typeParameters": [],
                    "line": 78,
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerLabelFactory",
                    "args": [
                        {
                            "name": "labelFactory",
                            "type": "AbstractLabelFactory"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "jsdoctags": [
                        {
                            "name": "labelFactory",
                            "type": "AbstractLabelFactory",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerLinkFactory",
                    "args": [
                        {
                            "name": "factory",
                            "type": "AbstractLinkFactory"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "jsdoctags": [
                        {
                            "name": "factory",
                            "type": "AbstractLinkFactory",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerNodeFactory",
                    "args": [
                        {
                            "name": "nodeFactory",
                            "type": "AbstractNodeFactory"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "nodeFactory",
                            "type": "AbstractNodeFactory",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerPortFactory",
                    "args": [
                        {
                            "name": "factory",
                            "type": "AbstractPortFactory"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "jsdoctags": [
                        {
                            "name": "factory",
                            "type": "AbstractPortFactory",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { ComponentRef, Injectable, ViewContainerRef } from '@angular/core';\nimport { EntityMap, LabelModel, NodeModel, PortModel, LinkModel } from '@ngx-diagrams/core';\nimport { AbstractNodeFactory, AbstractLabelFactory, AbstractLinkFactory, AbstractPortFactory } from '../factories';\nimport { NgxDiagramsModule } from '../ngx-diagrams.module';\n\n@Injectable({ providedIn: NgxDiagramsModule })\nexport class FactoriesService {\n  protected nodeFactories = new Map<string, AbstractNodeFactory>();\n  protected labelFactories = new Map<string, AbstractLabelFactory>();\n  protected linkFactories = new Map<string, AbstractLinkFactory>();\n  protected portFactories = new Map<string, AbstractPortFactory>();\n\n  // LABELS\n  registerLabelFactory(labelFactory: AbstractLabelFactory) {\n    this.labelFactories.set(labelFactory.type, labelFactory);\n  }\n\n  getLabelFactories(): EntityMap<AbstractLabelFactory> {\n    return this.labelFactories;\n  }\n\n  getLabelFactory(type: string): AbstractLabelFactory {\n    if (this.labelFactories.has(type)) {\n      return this.labelFactories.get(type);\n    }\n    throw new Error(`cannot find factory for node of type: [${type}]`);\n  }\n\n  getFactoryForLabel(label: LabelModel): AbstractLabelFactory | null {\n    return this.getLabelFactory(label.getType());\n  }\n\n  generateWidgetForLabel(label: LabelModel, labelHost: ViewContainerRef): ComponentRef<LabelModel> | null {\n    const labelFactory = this.getFactoryForLabel(label);\n    if (!labelFactory) {\n      throw new Error(`Cannot find widget factory for node: ${label.getType()}`);\n    }\n    return labelFactory.generateWidget(label, labelHost);\n  }\n\n  // NODES\n  registerNodeFactory(nodeFactory: AbstractNodeFactory) {\n    this.nodeFactories.set(nodeFactory.type, nodeFactory);\n  }\n\n  getNodeFactories(): EntityMap<AbstractNodeFactory> {\n    return this.nodeFactories;\n  }\n\n  getNodeFactory(type: string): AbstractNodeFactory {\n    if (this.nodeFactories.has(type)) {\n      return this.nodeFactories.get(type);\n    }\n    throw new Error(`cannot find factory for node of type: [${type}]`);\n  }\n\n  getFactoryForNode(node: NodeModel): AbstractNodeFactory | null {\n    return this.getNodeFactory(node.getType());\n  }\n\n  generateWidgetForNode(node: NodeModel, nodesHost: ViewContainerRef): ComponentRef<NodeModel> | null {\n    const nodeFactory = this.getFactoryForNode(node);\n    if (!nodeFactory) {\n      throw new Error(`Cannot find widget factory for node: ${node.getType()}`);\n    }\n    return nodeFactory.generateWidget(node, nodesHost);\n  }\n\n  // PORTS\n  registerPortFactory(factory: AbstractPortFactory) {\n    this.portFactories.set(factory.type, factory);\n  }\n\n  getPortFactories() {\n    return this.portFactories;\n  }\n\n  getPortFactory(type: string): AbstractPortFactory {\n    if (this.portFactories.has(type)) {\n      return this.portFactories.get(type);\n    }\n    throw new Error(`cannot find factory for port of type: [${type}]`);\n  }\n\n  getFactoryForPort(port: PortModel): AbstractPortFactory | null {\n    return this.getPortFactory(port.getType());\n  }\n\n  generateWidgetForPort(port: PortModel, portsHost: ViewContainerRef): ComponentRef<PortModel> | null {\n    const portFactory = this.getFactoryForPort(port);\n    if (!portFactory) {\n      throw new Error(`Cannot find widget factory for port: ${port.getType()}`);\n    }\n    return portFactory.generateWidget(port, portsHost);\n  }\n\n  // LINKS\n  getLinkFactories(): EntityMap<AbstractLinkFactory> {\n    return this.linkFactories;\n  }\n\n  registerLinkFactory(factory: AbstractLinkFactory) {\n    this.linkFactories.set(factory.type, factory);\n  }\n\n  getLinkFactory(type: string): AbstractLinkFactory {\n    if (this.linkFactories.has(type)) {\n      return this.linkFactories.get(type);\n    }\n    throw new Error(`cannot find factory for link of type: [${type}]`);\n  }\n\n  getFactoryForLink(link: LinkModel): AbstractLinkFactory | null {\n    return this.getLinkFactory(link.getType());\n  }\n\n  generateWidgetForLink(link: LinkModel, linksHost: ViewContainerRef): ComponentRef<LinkModel> | null {\n    const linkFactory = this.getFactoryForLink(link);\n    if (!linkFactory) {\n      throw new Error(`Cannot find link factory for link: ${link.getType()}`);\n    }\n    return linkFactory.generateWidget(link, linksHost);\n  }\n}\n",
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AbstractLabelFactory",
            "id": "class-AbstractLabelFactory-64154c394d9145556be6b2d83428c117",
            "file": "libs/angular/src/lib/factories/label.factory.ts",
            "type": "class",
            "sourceCode": "import { ViewContainerRef, ComponentRef } from '@angular/core';\nimport { LabelModel, AbstractFactory } from '@ngx-diagrams/core';\n\nexport abstract class AbstractLabelFactory<T extends LabelModel = LabelModel> extends AbstractFactory<T> {\n  abstract generateWidget(label: LabelModel, labelsHost: ViewContainerRef): ComponentRef<T>;\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "name": "label",
                            "type": "LabelModel"
                        },
                        {
                            "name": "labelsHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<T>",
                    "typeParameters": [],
                    "line": 5,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "label",
                            "type": "LabelModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "labelsHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": "AbstractFactory",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AbstractLinkFactory",
            "id": "class-AbstractLinkFactory-3713fd1b4de721803fa8651e76c4e437",
            "file": "libs/angular/src/lib/factories/link.factory.ts",
            "type": "class",
            "sourceCode": "import { ViewContainerRef, ComponentRef } from '@angular/core';\nimport { LinkModel, AbstractFactory } from '@ngx-diagrams/core';\n\nexport abstract class AbstractLinkFactory<T extends LinkModel = LinkModel> extends AbstractFactory<T> {\n  abstract generateWidget(link: LinkModel, linksHost: ViewContainerRef): ComponentRef<T>;\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "name": "link",
                            "type": "LinkModel"
                        },
                        {
                            "name": "linksHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<T>",
                    "typeParameters": [],
                    "line": 5,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "LinkModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "linksHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": "AbstractFactory",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AbstractNodeFactory",
            "id": "class-AbstractNodeFactory-ebfe491c00ac081e14237f0edc984afb",
            "file": "libs/angular/src/lib/factories/node.factory.ts",
            "type": "class",
            "sourceCode": "import { ViewContainerRef, ComponentRef } from '@angular/core';\nimport { NodeModel, AbstractFactory } from '@ngx-diagrams/core';\n\nexport abstract class AbstractNodeFactory<T extends NodeModel = NodeModel> extends AbstractFactory<T> {\n  abstract generateWidget(node: NodeModel, nodeHost: ViewContainerRef): ComponentRef<T>;\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "name": "node",
                            "type": "NodeModel"
                        },
                        {
                            "name": "nodeHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<T>",
                    "typeParameters": [],
                    "line": 5,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "NodeModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nodeHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": "AbstractFactory",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AbstractPortFactory",
            "id": "class-AbstractPortFactory-8c1036fee0cb827e5a6a3ca735be5832",
            "file": "libs/angular/src/lib/factories/port.factory.ts",
            "type": "class",
            "sourceCode": "import { ViewContainerRef, ComponentRef } from '@angular/core';\nimport { PortModel, AbstractFactory } from '@ngx-diagrams/core';\n\nexport abstract class AbstractPortFactory<T extends PortModel = PortModel> extends AbstractFactory<T> {\n  abstract generateWidget(port: PortModel, portHost: ViewContainerRef): ComponentRef<T>;\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        },
                        {
                            "name": "portHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<T>",
                    "typeParameters": [],
                    "line": 5,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "portHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": "AbstractFactory",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CustomLabelFactory",
            "id": "class-CustomLabelFactory-2f826698810ea3813f2e78f99631a9c6",
            "file": "libs/angular/stories/label/custom/custom.factory.ts",
            "type": "class",
            "sourceCode": "import {\n  ViewContainerRef,\n  ComponentRef,\n  ComponentFactoryResolver,\n  ComponentFactory,\n  Renderer2,\n} from '@angular/core';\nimport { AbstractLabelFactory, DefaultLabelModel } from 'ngx-diagrams';\nimport { CustomLabelComponent } from './custom-label.component';\n\nexport class CustomLabelFactory extends AbstractLabelFactory<\n  DefaultLabelModel\n> {\n  constructor(\n    private resolver: ComponentFactoryResolver,\n    private renderer: Renderer2\n  ) {\n    super('custom-label');\n  }\n\n  generateWidget(\n    label: CustomLabelComponent,\n    labelHost: ViewContainerRef\n  ): ComponentRef<CustomLabelComponent> {\n    const componentRef = labelHost.createComponent(this.getRecipe());\n\n    // attach coordinates and default positional behaviour to the generated component host\n    const rootNode = componentRef.location.nativeElement;\n\n    // default style for link\n    this.renderer.setStyle(rootNode, 'position', 'absolute');\n\n    // data attributes\n    this.renderer.setAttribute(rootNode, 'data-labelid', label.id);\n\n    // on destroy make sure to destroy the componentRef\n    label.onEntityDestroy().subscribe(() => {\n      componentRef.destroy();\n    });\n\n    // assign all passed properties to node initialization.\n    Object.entries(label).forEach(([key, value]) => {\n      componentRef.instance[key] = value;\n    });\n\n    return componentRef;\n  }\n\n  getRecipe(): ComponentFactory<CustomLabelComponent> {\n    return this.resolver.resolveComponentFactory(CustomLabelComponent);\n  }\n\n  getNewInstance() {\n    return new DefaultLabelModel();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "name": "label",
                            "type": "CustomLabelComponent"
                        },
                        {
                            "name": "labelHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<CustomLabelComponent>",
                    "typeParameters": [],
                    "line": 21,
                    "jsdoctags": [
                        {
                            "name": "label",
                            "type": "CustomLabelComponent",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "labelHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNewInstance",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 53
                },
                {
                    "name": "getRecipe",
                    "args": [],
                    "optional": false,
                    "returnType": "ComponentFactory<CustomLabelComponent>",
                    "typeParameters": [],
                    "line": 49
                },
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "name": "label",
                            "type": "LabelModel"
                        },
                        {
                            "name": "labelsHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<T>",
                    "typeParameters": [],
                    "line": 5,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "label",
                            "type": "LabelModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "labelsHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractLabelFactory"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "AbstractLabelFactory",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CustomLinkFactory",
            "id": "class-CustomLinkFactory-b82d353d878df477111c6cd67f6b2a18",
            "file": "libs/angular/stories/link/custom/custom.factory.ts",
            "type": "class",
            "sourceCode": "import {\n  ViewContainerRef,\n  ComponentRef,\n  ComponentFactoryResolver,\n  ComponentFactory,\n  Renderer2,\n} from '@angular/core';\nimport {\n  AbstractLinkFactory,\n  DefaultLinkModel,\n  DiagramEngine,\n} from 'ngx-diagrams';\nimport { CustomLinkComponent } from './custom-link.component';\n\nexport class CustomLinkFactory extends AbstractLinkFactory<DefaultLinkModel> {\n  constructor(\n    private resolver: ComponentFactoryResolver,\n    private renderer: Renderer2\n  ) {\n    super('custom-link');\n  }\n\n  generateWidget(\n    diagramEngine: DiagramEngine,\n    link: DefaultLinkModel,\n    linksHost: ViewContainerRef\n  ): ComponentRef<CustomLinkComponent> {\n    const componentRef = linksHost.createComponent(this.getRecipe());\n    link.setWidth(1);\n    link.setColor('pink');\n    // attach coordinates and default positional behaviour to the generated component host\n    const rootNode = componentRef.location.nativeElement;\n\n    // default style for link\n    this.renderer.setStyle(rootNode, 'position', 'absolute');\n\n    // data attributes\n    this.renderer.setAttribute(rootNode, 'data-linkid', link.id);\n\n    // on destroy make sure to destroy the componentRef\n    link.onEntityDestroy().subscribe(() => {\n      componentRef.destroy();\n    });\n\n    // assign all passed properties to node initialization.\n    Object.entries(link).forEach(([key, value]) => {\n      componentRef.instance[key] = value;\n    });\n\n    componentRef.instance.diagramEngine = diagramEngine;\n    componentRef.instance.setPainted(true);\n    return componentRef;\n  }\n\n  getRecipe(): ComponentFactory<CustomLinkComponent> {\n    return this.resolver.resolveComponentFactory(CustomLinkComponent);\n  }\n\n  getNewInstance() {\n    return new DefaultLinkModel({ type: 'custom-link' });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "name": "diagramEngine",
                            "type": "DiagramEngine"
                        },
                        {
                            "name": "link",
                            "type": "DefaultLinkModel"
                        },
                        {
                            "name": "linksHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<CustomLinkComponent>",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "diagramEngine",
                            "type": "DiagramEngine",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "link",
                            "type": "DefaultLinkModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "linksHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNewInstance",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 59
                },
                {
                    "name": "getRecipe",
                    "args": [],
                    "optional": false,
                    "returnType": "ComponentFactory<CustomLinkComponent>",
                    "typeParameters": [],
                    "line": 55
                },
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "name": "link",
                            "type": "LinkModel"
                        },
                        {
                            "name": "linksHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<T>",
                    "typeParameters": [],
                    "line": 5,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "LinkModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "linksHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractLinkFactory"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "AbstractLinkFactory",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CustomNodeFactory",
            "id": "class-CustomNodeFactory-d6b13b8289a83ba43b79deb34e7a4d44",
            "file": "libs/angular/stories/node/custom/custom.factory.ts",
            "type": "class",
            "sourceCode": "import {\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  ComponentRef,\n  ComponentFactory,\n  Renderer2,\n} from '@angular/core';\nimport {\n  AbstractNodeFactory,\n  DefaultNodeModel,\n  DiagramEngine,\n} from 'ngx-diagrams';\nimport { CustomNodeComponent } from './custom.component';\n\nexport class CustomNodeFactory extends AbstractNodeFactory<DefaultNodeModel> {\n  constructor(\n    private resolver: ComponentFactoryResolver,\n    private renderer: Renderer2\n  ) {\n    super('custom-node');\n  }\n\n  generateWidget(\n    diagramEngine: DiagramEngine,\n    node: DefaultNodeModel,\n    nodesHost: ViewContainerRef\n  ): ComponentRef<CustomNodeComponent> {\n    const componentRef = nodesHost.createComponent(this.getRecipe());\n\n    // attach coordinates and default positional behaviour to the generated component host\n    const rootNode = componentRef.location.nativeElement;\n\n    // default style for node\n    this.renderer.setStyle(rootNode, 'position', 'absolute');\n    this.renderer.setStyle(rootNode, 'display', 'block');\n\n    // data attributes\n    this.renderer.setAttribute(rootNode, 'data-nodeid', node.id);\n\n    // subscribe to node coordinates\n    node.selectCoords().subscribe(({ x, y }) => {\n      this.renderer.setStyle(rootNode, 'left', `${x}px`);\n      this.renderer.setStyle(rootNode, 'top', `${y}px`);\n    });\n\n    node.selectionChanges().subscribe((e) => {\n      e.isSelected\n        ? this.renderer.addClass(rootNode, 'selected')\n        : this.renderer.removeClass(rootNode, 'selected');\n    });\n\n    node.onEntityDestroy().subscribe((e) => {\n      componentRef.destroy();\n    });\n\n    // assign all passed properties to node initialization.\n    Object.entries(node).forEach(([key, value]) => {\n      componentRef.instance[key] = value;\n    });\n\n    componentRef.instance.setDiagramEngine(diagramEngine);\n\n    return componentRef;\n  }\n\n  getRecipe(): ComponentFactory<CustomNodeComponent> {\n    return this.resolver.resolveComponentFactory(CustomNodeComponent);\n  }\n\n  getNewInstance(initialConfig?: any): DefaultNodeModel {\n    return new DefaultNodeModel(...initialConfig);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "name": "diagramEngine",
                            "type": "DiagramEngine"
                        },
                        {
                            "name": "node",
                            "type": "DefaultNodeModel"
                        },
                        {
                            "name": "nodesHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<CustomNodeComponent>",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "diagramEngine",
                            "type": "DiagramEngine",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "node",
                            "type": "DefaultNodeModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nodesHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNewInstance",
                    "args": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "DefaultNodeModel",
                    "typeParameters": [],
                    "line": 70,
                    "jsdoctags": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRecipe",
                    "args": [],
                    "optional": false,
                    "returnType": "ComponentFactory<CustomNodeComponent>",
                    "typeParameters": [],
                    "line": 66
                },
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "name": "node",
                            "type": "NodeModel"
                        },
                        {
                            "name": "nodeHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<T>",
                    "typeParameters": [],
                    "line": 5,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "NodeModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nodeHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractNodeFactory"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "AbstractNodeFactory",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CustomPortFactory",
            "id": "class-CustomPortFactory-2a54d5185a68486bf444f625892abc4b",
            "file": "libs/angular/stories/port/custom/custom.factory.ts",
            "type": "class",
            "sourceCode": "import {\n  ViewContainerRef,\n  ComponentRef,\n  ComponentFactory,\n  ComponentFactoryResolver,\n  Renderer2,\n} from '@angular/core';\nimport { AbstractPortFactory, DefaultPortModel } from 'ngx-diagrams';\nimport { Observable } from 'rxjs';\nimport { map, takeUntil } from 'rxjs/operators';\nimport { CustomPortComponent } from './custom.component';\n\nexport class CustomPortFactory extends AbstractPortFactory<\n  CustomPortComponent\n> {\n  constructor(\n    private resolver: ComponentFactoryResolver,\n    private renderer: Renderer2\n  ) {\n    super('custom-port');\n  }\n\n  generateWidget(\n    port: DefaultPortModel,\n    portsHost: ViewContainerRef\n  ): ComponentRef<CustomPortComponent> {\n    const componentRef = portsHost.createComponent(this.getRecipe());\n\n    // attach coordinates and default positional behaviour to the generated component host\n    const rootNode = componentRef.location.nativeElement as HTMLElement;\n\n    // data attributes\n    this.renderer.setAttribute(rootNode, 'data-portid', port.id);\n    this.renderer.setAttribute(rootNode, 'data-name', port.getName());\n\n    port.in\n      ? this.renderer.addClass(rootNode, 'in')\n      : this.renderer.addClass(rootNode, 'out');\n\n    // assign all passed properties to node initialization.\n    Object.entries(port).forEach(([key, value]) => {\n      componentRef.instance[key] = value;\n    });\n\n    // this method will add classes to all ports that have links\n    this.isConnected(port).subscribe((connected) => {\n      connected\n        ? this.renderer.addClass(rootNode, 'connected')\n        : this.renderer.removeClass(rootNode, 'connected');\n    });\n\n    port.onEntityDestroy().subscribe((e) => {\n      componentRef.destroy();\n    });\n\n    return componentRef;\n  }\n\n  getRecipe(): ComponentFactory<CustomPortComponent> {\n    return this.resolver.resolveComponentFactory(CustomPortComponent);\n  }\n\n  getNewInstance(initialConfig?: any): DefaultPortModel {\n    return new DefaultPortModel({\n      isInput: true,\n      name: 'unknown',\n      ...initialConfig,\n    });\n  }\n\n  isConnected(port: DefaultPortModel): Observable<boolean> {\n    return port.selectLinks().pipe(\n      takeUntil(port.onEntityDestroy()),\n      map((links) => Object.keys(links).length > 0)\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "name": "port",
                            "type": "DefaultPortModel"
                        },
                        {
                            "name": "portsHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<CustomPortComponent>",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "DefaultPortModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "portsHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNewInstance",
                    "args": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "DefaultPortModel",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRecipe",
                    "args": [],
                    "optional": false,
                    "returnType": "ComponentFactory<CustomPortComponent>",
                    "typeParameters": [],
                    "line": 59
                },
                {
                    "name": "isConnected",
                    "args": [
                        {
                            "name": "port",
                            "type": "DefaultPortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 71,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "DefaultPortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        },
                        {
                            "name": "portHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<T>",
                    "typeParameters": [],
                    "line": 5,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "portHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractPortFactory"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "AbstractPortFactory",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DefaultLabelFactory",
            "id": "class-DefaultLabelFactory-9e74e40695f6ee917e799a20cb12f914",
            "file": "libs/angular/src/lib/defaults/factories/default-label.factory.ts",
            "type": "class",
            "sourceCode": "import { ViewContainerRef, ComponentRef, ComponentFactoryResolver, ComponentFactory, Renderer2 } from '@angular/core';\nimport { AbstractLabelFactory } from '../../factories/label.factory';\nimport { DefaultLabelComponent } from '../components/default-label/default-label.component';\nimport { DefaultLabelModel } from '../models/default-label.model';\n\nexport class DefaultLabelFactory extends AbstractLabelFactory<DefaultLabelModel> {\n  constructor(protected resolver: ComponentFactoryResolver, protected renderer: Renderer2) {\n    super('default');\n  }\n\n  generateWidget(label: DefaultLabelComponent, labelHost: ViewContainerRef): ComponentRef<DefaultLabelComponent> {\n    const componentRef = labelHost.createComponent(this.getRecipe());\n\n    // attach coordinates and default positional behaviour to the generated component host\n    const rootNode = componentRef.location.nativeElement;\n\n    // default style for link\n    this.renderer.setStyle(rootNode, 'position', 'absolute');\n\n    // data attributes\n    this.renderer.setAttribute(rootNode, 'data-labelid', label.id);\n\n    // on destroy make sure to destroy the componentRef\n    label.onEntityDestroy().subscribe(() => {\n      componentRef.destroy();\n    });\n\n    // assign all passed properties to node initialization.\n    Object.entries(label).forEach(([key, value]) => {\n      componentRef.instance[key] = value;\n    });\n\n    componentRef.instance.setPainted(true);\n    return componentRef;\n  }\n\n  getRecipe(): ComponentFactory<DefaultLabelComponent> {\n    return this.resolver.resolveComponentFactory(DefaultLabelComponent);\n  }\n\n  getNewInstance() {\n    return new DefaultLabelModel();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "name": "label",
                            "type": "DefaultLabelComponent"
                        },
                        {
                            "name": "labelHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<DefaultLabelComponent>",
                    "typeParameters": [],
                    "line": 11,
                    "jsdoctags": [
                        {
                            "name": "label",
                            "type": "DefaultLabelComponent",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "labelHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNewInstance",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 41
                },
                {
                    "name": "getRecipe",
                    "args": [],
                    "optional": false,
                    "returnType": "ComponentFactory<DefaultLabelComponent>",
                    "typeParameters": [],
                    "line": 37
                },
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "name": "label",
                            "type": "LabelModel"
                        },
                        {
                            "name": "labelsHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<T>",
                    "typeParameters": [],
                    "line": 5,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "label",
                            "type": "LabelModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "labelsHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractLabelFactory"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "AbstractLabelFactory",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DefaultLabelModel",
            "id": "class-DefaultLabelModel-250caa56270b2316e4b85f6f1f7c4f48",
            "file": "libs/angular/src/lib/defaults/models/default-label.model.ts",
            "type": "class",
            "sourceCode": "import { LabelModel, createValueState } from '@ngx-diagrams/core';\nimport { Observable } from 'rxjs';\n\nexport class DefaultLabelModel extends LabelModel {\n  protected label$ = createValueState<string>('', this.entityPipe('label'));\n\n  constructor(label = 'NO LABEL', type = 'default', id?: string, logPrefix = '[DefaultLabel]') {\n    super(type, id, logPrefix);\n    this.setLabel(label);\n  }\n\n  setLabel(label: string) {\n    this.label$.set(label).emit();\n  }\n\n  getLabel(): string {\n    return this.label$.value;\n  }\n\n  selectLabel(): Observable<string> {\n    return this.label$.value$;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "label",
                        "type": "string",
                        "defaultValue": "'NO LABEL'"
                    },
                    {
                        "name": "type",
                        "type": "string",
                        "defaultValue": "'default'"
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "optional": true
                    },
                    {
                        "name": "logPrefix",
                        "type": "string",
                        "defaultValue": "'[DefaultLabel]'"
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "label",
                        "type": "string",
                        "defaultValue": "'NO LABEL'",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "type",
                        "type": "string",
                        "defaultValue": "'default'",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logPrefix",
                        "type": "string",
                        "defaultValue": "'[DefaultLabel]'",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "label$",
                    "defaultValue": "createValueState<string>('', this.entityPipe('label'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        113
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 16
                },
                {
                    "name": "selectLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 20
                },
                {
                    "name": "setLabel",
                    "args": [
                        {
                            "name": "label",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "jsdoctags": [
                        {
                            "name": "label",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": "LabelModel",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DefaultLinkFactory",
            "id": "class-DefaultLinkFactory-e9653a81edff11281b1e7e94c32b986e",
            "file": "libs/angular/src/lib/defaults/factories/default-link.factory.ts",
            "type": "class",
            "sourceCode": "import { AbstractLinkFactory } from '../../factories/link.factory';\nimport { DefaultLinkComponent } from '../components/default-link/default-link.component';\nimport { DefaultLinkModel } from '../models/default-link.model';\nimport { ViewContainerRef, ComponentRef, ComponentFactoryResolver, ComponentFactory, Renderer2 } from '@angular/core';\n\nexport class DefaultLinkFactory extends AbstractLinkFactory<DefaultLinkModel> {\n  constructor(protected resolver: ComponentFactoryResolver, protected renderer: Renderer2) {\n    super('default');\n  }\n\n  generateWidget(link: DefaultLinkModel, linksHost: ViewContainerRef): ComponentRef<DefaultLinkComponent> {\n    const componentRef = linksHost.createComponent(this.getRecipe());\n\n    // attach coordinates and default positional behaviour to the generated component host\n    const rootNode = componentRef.location.nativeElement;\n\n    // default style for link\n    this.renderer.setStyle(rootNode, 'position', 'absolute');\n    this.renderer.addClass(rootNode, 'label');\n\n    // data attributes\n    this.renderer.setAttribute(rootNode, 'data-linkid', link.id);\n\n    // on destroy make sure to destroy the componentRef\n    link.onEntityDestroy().subscribe(() => {\n      componentRef.destroy();\n    });\n\n    // assign all passed properties to link initialization.\n    Object.entries(link).forEach(([key, value]) => {\n      componentRef.instance[key] = value;\n    });\n\n    componentRef.instance.setPainted(true);\n    return componentRef;\n  }\n\n  getRecipe(): ComponentFactory<DefaultLinkComponent> {\n    return this.resolver.resolveComponentFactory(DefaultLinkComponent);\n  }\n\n  getNewInstance() {\n    return new DefaultLinkModel();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "name": "link",
                            "type": "DefaultLinkModel"
                        },
                        {
                            "name": "linksHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<DefaultLinkComponent>",
                    "typeParameters": [],
                    "line": 11,
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "DefaultLinkModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "linksHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNewInstance",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42
                },
                {
                    "name": "getRecipe",
                    "args": [],
                    "optional": false,
                    "returnType": "ComponentFactory<DefaultLinkComponent>",
                    "typeParameters": [],
                    "line": 38
                },
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "name": "link",
                            "type": "LinkModel"
                        },
                        {
                            "name": "linksHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<T>",
                    "typeParameters": [],
                    "line": 5,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "LinkModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "linksHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractLinkFactory"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "AbstractLinkFactory",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DefaultLinkModel",
            "id": "class-DefaultLinkModel-b23f6d8b17a9f77349e9006b48f5f999",
            "file": "libs/angular/src/lib/defaults/models/default-link.model.ts",
            "type": "class",
            "sourceCode": "import { LinkModel, createValueState } from '@ngx-diagrams/core';\nimport { Observable } from 'rxjs';\n\nexport class DefaultLinkModel extends LinkModel {\n  width$ = createValueState<number>(3, this.entityPipe('width'));\n  color$ = createValueState<string>('rgba(255, 255, 255, 0.5)', this.entityPipe('color'));\n  curvyness$ = createValueState<number>(50, this.entityPipe('curvyness'));\n\n  constructor({\n    type = 'default',\n    id,\n    logPrefix = '[DefaultLink]'\n  }: { type?: string; id?: string; logPrefix?: string } = {}) {\n    super(type, id, logPrefix);\n  }\n\n  setWidth(width: number) {\n    this.width$.set(width).emit();\n  }\n\n  setColor(color: string) {\n    this.color$.set(color).emit();\n  }\n\n  selectWidth(): Observable<number> {\n    return this.width$.value$;\n  }\n\n  selectColor(): Observable<string> {\n    return this.color$.value$;\n  }\n\n  setCurvyness(curvyness: number) {\n    this.curvyness$.set(curvyness).emit();\n  }\n\n  get color() {\n    return this.color$.value;\n  }\n\n  get width() {\n    return this.width$.value;\n  }\n\n  get curvyness() {\n    return this.curvyness$.value;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "type": "literal type",
                        "defaultValue": "{}"
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "type": "literal type",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "color$",
                    "defaultValue": "createValueState<string>('rgba(255, 255, 255, 0.5)', this.entityPipe('color'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "curvyness$",
                    "defaultValue": "createValueState<number>(50, this.entityPipe('curvyness'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "width$",
                    "defaultValue": "createValueState<number>(3, this.entityPipe('width'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [
                {
                    "name": "selectColor",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 29
                },
                {
                    "name": "selectWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "setColor",
                    "args": [
                        {
                            "name": "color",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setCurvyness",
                    "args": [
                        {
                            "name": "curvyness",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "jsdoctags": [
                        {
                            "name": "curvyness",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setWidth",
                    "args": [
                        {
                            "name": "width",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "jsdoctags": [
                        {
                            "name": "width",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": "LinkModel",
            "accessors": {
                "color": {
                    "name": "color",
                    "getSignature": {
                        "name": "color",
                        "type": "",
                        "returnType": "",
                        "line": 37
                    }
                },
                "width": {
                    "name": "width",
                    "getSignature": {
                        "name": "width",
                        "type": "",
                        "returnType": "",
                        "line": 41
                    }
                },
                "curvyness": {
                    "name": "curvyness",
                    "getSignature": {
                        "name": "curvyness",
                        "type": "",
                        "returnType": "",
                        "line": 45
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DefaultNodeFactory",
            "id": "class-DefaultNodeFactory-38df08f9dec7c6e08aa7355afe1c9116",
            "file": "libs/angular/src/lib/defaults/factories/default-node.factory.ts",
            "type": "class",
            "sourceCode": "import { DefaultNodeComponent } from '../components/default-node/default-node.component';\nimport { AbstractNodeFactory } from '../../factories/node.factory';\nimport { ComponentFactoryResolver, ViewContainerRef, ComponentRef, ComponentFactory, Renderer2 } from '@angular/core';\nimport { DefaultNodeModel } from '../models/default-node.model';\n\nexport class DefaultNodeFactory extends AbstractNodeFactory<DefaultNodeModel> {\n  constructor(protected resolver: ComponentFactoryResolver, protected renderer: Renderer2) {\n    super('default');\n  }\n\n  generateWidget(node: DefaultNodeModel, nodesHost: ViewContainerRef): ComponentRef<DefaultNodeComponent> {\n    const componentRef = nodesHost.createComponent(this.getRecipe());\n\n    // attach coordinates and default positional behaviour to the generated component host\n    const rootNode = componentRef.location.nativeElement;\n\n    // default style for node\n    this.renderer.setStyle(rootNode, 'position', 'absolute');\n    this.renderer.setStyle(rootNode, 'display', 'block');\n\n    // data attributes\n    this.renderer.setAttribute(rootNode, 'data-nodeid', node.id);\n\n    // subscribe to node coordinates\n    node.selectCoords().subscribe(({ x, y }) => {\n      this.renderer.setStyle(rootNode, 'left', `${x}px`);\n      this.renderer.setStyle(rootNode, 'top', `${y}px`);\n    });\n\n    node.selectionChanges().subscribe((e) => {\n      e.isSelected ? this.renderer.addClass(rootNode, 'selected') : this.renderer.removeClass(rootNode, 'selected');\n    });\n\n    node.onEntityDestroy().subscribe(() => {\n      componentRef.destroy();\n    });\n\n    // assign all passed properties to node initialization.\n    Object.entries(node).forEach(([key, value]) => {\n      componentRef.instance[key] = value;\n    });\n\n    componentRef.instance.setPainted(true);\n    return componentRef;\n  }\n\n  getRecipe(): ComponentFactory<DefaultNodeComponent> {\n    return this.resolver.resolveComponentFactory(DefaultNodeComponent);\n  }\n\n  getNewInstance(initialConfig?: any): DefaultNodeModel {\n    return new DefaultNodeModel(initialConfig);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "name": "node",
                            "type": "DefaultNodeModel"
                        },
                        {
                            "name": "nodesHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<DefaultNodeComponent>",
                    "typeParameters": [],
                    "line": 11,
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "DefaultNodeModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nodesHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNewInstance",
                    "args": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "DefaultNodeModel",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRecipe",
                    "args": [],
                    "optional": false,
                    "returnType": "ComponentFactory<DefaultNodeComponent>",
                    "typeParameters": [],
                    "line": 47
                },
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "name": "node",
                            "type": "NodeModel"
                        },
                        {
                            "name": "nodeHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<T>",
                    "typeParameters": [],
                    "line": 5,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "NodeModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nodeHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractNodeFactory"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "AbstractNodeFactory",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DefaultNodeModel",
            "id": "class-DefaultNodeModel-25899f6b5993b7675792e0852a3969b4",
            "file": "libs/angular/src/lib/defaults/models/default-node.model.ts",
            "type": "class",
            "sourceCode": "import { NodeModel } from '@ngx-diagrams/core';\nimport { Observable } from 'rxjs';\nimport { DefaultPortModel } from './default-port.model';\n\nexport class DefaultNodeModel extends NodeModel {\n  name: string;\n  color: string;\n  height$: Observable<number>;\n  width$: Observable<number>;\n\n  constructor({\n    name = 'Untitled',\n    type = 'default',\n    color = 'rgb(0, 192, 255)',\n    id\n  }: {\n    name?: string;\n    type?: string;\n    id?: string;\n    color?: string;\n  } = {}) {\n    super(type, id);\n    this.name = name;\n    this.color = color;\n    this.height$ = this.selectHeight();\n    this.width$ = this.selectWidth();\n  }\n\n  addInPort({\n    name,\n    type = 'default',\n    id,\n    linkType = 'default'\n  }: {\n    name: string;\n    type?: string;\n    id?: string;\n    linkType?: string;\n  }) {\n    const port = new DefaultPortModel({\n      isInput: true,\n      name,\n      type,\n      id,\n      label: null,\n      linkType\n    });\n    this.addPort(port);\n    return port;\n  }\n\n  addOutPort({\n    name,\n    type = 'default',\n    id,\n    linkType = 'default',\n    maximumLinks = null\n  }: {\n    name: string;\n    type?: string;\n    id?: string;\n    linkType?: string;\n    maximumLinks?: number;\n  }) {\n    const port = new DefaultPortModel({\n      isInput: false,\n      name,\n      type,\n      id,\n      label: null,\n      linkType,\n      maximumLinks\n    });\n    this.addPort(port);\n    return port;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "type": "literal type",
                        "defaultValue": "{}"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "type": "literal type",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "color",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "height$",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "width$",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [
                {
                    "name": "addInPort",
                    "args": [
                        {
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29,
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addOutPort",
                    "args": [
                        {
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 52,
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": "NodeModel",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DefaultPortFactory",
            "id": "class-DefaultPortFactory-b85ca2d213d7d95151ce190bb26fd3ea",
            "file": "libs/angular/src/lib/defaults/factories/default-port.factory.ts",
            "type": "class",
            "sourceCode": "import { AbstractPortFactory } from '../../factories/port.factory';\nimport { DefaultPortModel } from '../models/default-port.model';\nimport { ViewContainerRef, ComponentRef, ComponentFactory, ComponentFactoryResolver, Renderer2 } from '@angular/core';\nimport { DefaultPortComponent } from '../components/default-port/default-port.component';\n\nexport class DefaultPortFactory extends AbstractPortFactory<DefaultPortModel> {\n  constructor(protected resolver: ComponentFactoryResolver, protected renderer: Renderer2) {\n    super('default');\n  }\n\n  generateWidget(port: DefaultPortModel, portsHost: ViewContainerRef): ComponentRef<DefaultPortComponent> {\n    const componentRef = portsHost.createComponent(this.getRecipe());\n\n    // attach coordinates and default positional behaviour to the generated component host\n    const rootNode = componentRef.location.nativeElement as HTMLElement;\n\n    // data attributes\n    this.renderer.setAttribute(rootNode, 'data-portid', port.id);\n    this.renderer.setAttribute(rootNode, 'data-name', port.getName());\n\n    port.in ? this.renderer.addClass(rootNode, 'in') : this.renderer.addClass(rootNode, 'out');\n\n    // assign all passed properties to node initialization.\n    Object.entries(port).forEach(([key, value]) => {\n      componentRef.instance[key] = value;\n    });\n\n    port.onEntityDestroy().subscribe(() => {\n      componentRef.destroy();\n    });\n\n    componentRef.instance.setPainted(true);\n    return componentRef;\n  }\n\n  getRecipe(): ComponentFactory<DefaultPortComponent> {\n    return this.resolver.resolveComponentFactory(DefaultPortComponent);\n  }\n\n  getNewInstance(initialConfig?: any): DefaultPortModel {\n    return new DefaultPortModel({\n      isInput: true,\n      name: 'unknown',\n      ...initialConfig\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "name": "port",
                            "type": "DefaultPortModel"
                        },
                        {
                            "name": "portsHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<DefaultPortComponent>",
                    "typeParameters": [],
                    "line": 11,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "DefaultPortModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "portsHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNewInstance",
                    "args": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "DefaultPortModel",
                    "typeParameters": [],
                    "line": 40,
                    "jsdoctags": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRecipe",
                    "args": [],
                    "optional": false,
                    "returnType": "ComponentFactory<DefaultPortComponent>",
                    "typeParameters": [],
                    "line": 36
                },
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        },
                        {
                            "name": "portHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<T>",
                    "typeParameters": [],
                    "line": 5,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "portHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractPortFactory"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "AbstractPortFactory",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DefaultPortModel",
            "id": "class-DefaultPortModel-b1842f0b2c824ba1ce6f68c153e8b57b",
            "file": "libs/angular/src/lib/defaults/models/default-port.model.ts",
            "type": "class",
            "sourceCode": "import { PortModel, HashMap, LinkModel } from '@ngx-diagrams/core';\nimport { DefaultLinkModel } from './default-link.model';\n\nexport interface DefaultPortModelConfig {\n  id?: string;\n  isInput?: boolean;\n  name?: string;\n  type?: string;\n  label?: string;\n  linkType?: string;\n  maximumLinks?: number;\n}\n\nexport class DefaultPortModel extends PortModel {\n  in: boolean;\n  label: string;\n  links: HashMap<DefaultLinkModel>;\n\n  constructor({\n    isInput = true,\n    name = 'port',\n    type = 'default',\n    id = null,\n    label = null,\n    linkType = 'default',\n    maximumLinks = null\n  }: DefaultPortModelConfig = {}) {\n    super(name, type, id, null, linkType);\n    this.in = isInput;\n    this.label = label || name;\n\n    if (this.in) {\n      this.setCanCreateLinks(false);\n    } else {\n      this.setMaximumLinks(maximumLinks);\n      this.setMagnetic(false);\n    }\n  }\n\n  link(port: PortModel): LinkModel {\n    if (super.getCanCreateLinks()) {\n      const link = new DefaultLinkModel({ type: this.getLinkType() });\n      link.setSourcePort(this);\n      link.setTargetPort(port);\n      return link;\n    }\n\n    return null;\n  }\n\n  createLinkModel() {\n    if (super.getCanCreateLinks()) {\n      return new DefaultLinkModel({ type: this.getLinkType() });\n    }\n  }\n\n  canLinkToPort(port: PortModel): boolean {\n    if (port instanceof DefaultPortModel) {\n      return this.in !== port.in;\n    }\n    return true;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "type": "DefaultPortModelConfig",
                        "defaultValue": "{}"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "type": "DefaultPortModelConfig",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "in",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "links",
                    "type": "HashMap<DefaultLinkModel>",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methods": [
                {
                    "name": "canLinkToPort",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 57,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createLinkModel",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 51
                },
                {
                    "name": "link",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "LinkModel",
                    "typeParameters": [],
                    "line": 40,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": "PortModel",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PathFinding",
            "id": "class-PathFinding-2437a5de865646440efb7e0b15ff6525",
            "file": "libs/angular/src/lib/plugins/smart-routing.plugin.ts",
            "type": "class",
            "sourceCode": "import { DiagramEngine } from '../services/engine.service';\nimport * as PF from 'pathfinding';\n\nexport const ROUTING_SCALING_FACTOR = 10;\n\nexport class PathFinding {\n  private pathFinderInstance:\n    | PF.JPFNeverMoveDiagonally\n    | PF.JPFAlwaysMoveDiagonally\n    | PF.JPFMoveDiagonallyIfNoObstacles\n    | PF.JPFMoveDiagonallyIfAtMostOneObstacle;\n\n  constructor(private diagramEngine: DiagramEngine, heuristic = PF.Heuristic.manhattan) {\n    this.pathFinderInstance = new PF.AStarFinder({\n      heuristic,\n      diagonalMovement: PF.DiagonalMovement.Always,\n      weight: 0\n    });\n  }\n\n  /**\n   * Taking as argument a fully unblocked walking matrix, this method\n   * finds a direct path from point A to B.\n   */\n  calculateDirectPath(\n    from: {\n      x: number;\n      y: number;\n    },\n    to: {\n      x: number;\n      y: number;\n    }\n  ): number[][] {\n    const matrix = this.diagramEngine.getCanvasMatrix();\n    const grid = new PF.Grid(matrix);\n\n    const fromX = this.diagramEngine.translateRoutingX(Math.floor(from.x / ROUTING_SCALING_FACTOR));\n    const toX = this.diagramEngine.translateRoutingX(Math.floor(to.x / ROUTING_SCALING_FACTOR));\n    const fromY = this.diagramEngine.translateRoutingX(Math.floor(from.y / ROUTING_SCALING_FACTOR));\n    const toY = this.diagramEngine.translateRoutingX(Math.floor(to.y / ROUTING_SCALING_FACTOR));\n\n    const path = this.pathFinderInstance.findPath(fromX, fromY, toX, toY, grid);\n    return path;\n  }\n\n  /**\n   * Using @link{#calculateDirectPath}'s result as input, we here\n   * determine the first walkable point found in the matrix that includes\n   * blocked paths.\n   */\n  calculateLinkStartEndCoords(\n    matrix: number[][],\n    path: number[][]\n  ): {\n    start: {\n      x: number;\n      y: number;\n    };\n    end: {\n      x: number;\n      y: number;\n    };\n    pathToStart: number[][];\n    pathToEnd: number[][];\n  } {\n    const startIndex = path.findIndex((point) => matrix[point[1]][point[0]] === 0);\n    const endIndex =\n      path.length -\n      1 -\n      path\n        .slice()\n        .reverse()\n        .findIndex((point) => matrix[point[1]][point[0]] === 0);\n\n    // are we trying to create a path exclusively through blocked areas?\n    // if so, let's fallback to the linear routing\n    if (startIndex === -1 || endIndex === -1) {\n      return undefined;\n    }\n\n    const pathToStart = path.slice(0, startIndex);\n    const pathToEnd = path.slice(endIndex);\n\n    return {\n      start: {\n        x: path[startIndex][0],\n        y: path[startIndex][1]\n      },\n      end: {\n        x: path[endIndex][0],\n        y: path[endIndex][1]\n      },\n      pathToStart,\n      pathToEnd\n    };\n  }\n\n  /**\n   * Puts everything together: merges the paths from/to the centre of the ports,\n   * with the path calculated around other elements.\n   */\n  calculateDynamicPath(\n    routingMatrix: number[][],\n    start: {\n      x: number;\n      y: number;\n    },\n    end: {\n      x: number;\n      y: number;\n    },\n    pathToStart: number[][],\n    pathToEnd: number[][]\n  ) {\n    // generate the path based on the matrix with obstacles\n    const grid = new PF.Grid(routingMatrix);\n    const dynamicPath = this.pathFinderInstance.findPath(start.x, start.y, end.x, end.y, grid);\n\n    // aggregate everything to have the calculated path ready for rendering\n    const pathCoords = pathToStart\n      .concat(dynamicPath, pathToEnd)\n      .map((coords) => [\n        this.diagramEngine.translateRoutingX(coords[0], true),\n        this.diagramEngine.translateRoutingY(coords[1], true)\n      ]);\n\n    return PF.Util.compressPath(pathCoords);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine"
                    },
                    {
                        "name": "heuristic",
                        "type": "",
                        "defaultValue": "PF.Heuristic.manhattan"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "heuristic",
                        "type": "",
                        "defaultValue": "PF.Heuristic.manhattan",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "pathFinderInstance",
                    "type": "PF.JPFNeverMoveDiagonally | PF.JPFAlwaysMoveDiagonally | PF.JPFMoveDiagonallyIfNoObstacles | PF.JPFMoveDiagonallyIfAtMostOneObstacle",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "calculateDirectPath",
                    "args": [
                        {
                            "name": "from",
                            "type": "literal type"
                        },
                        {
                            "name": "to",
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "[][]",
                    "typeParameters": [],
                    "line": 25,
                    "description": "<p>Taking as argument a fully unblocked walking matrix, this method\nfinds a direct path from point A to B.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "from",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "to",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calculateDynamicPath",
                    "args": [
                        {
                            "name": "routingMatrix",
                            "type": "number[][]"
                        },
                        {
                            "name": "start",
                            "type": "literal type"
                        },
                        {
                            "name": "end",
                            "type": "literal type"
                        },
                        {
                            "name": "pathToStart",
                            "type": "number[][]"
                        },
                        {
                            "name": "pathToEnd",
                            "type": "number[][]"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 103,
                    "description": "<p>Puts everything together: merges the paths from/to the centre of the ports,\nwith the path calculated around other elements.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "routingMatrix",
                            "type": "number[][]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "start",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "end",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pathToStart",
                            "type": "number[][]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pathToEnd",
                            "type": "number[][]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calculateLinkStartEndCoords",
                    "args": [
                        {
                            "name": "matrix",
                            "type": "number[][]"
                        },
                        {
                            "name": "path",
                            "type": "number[][]"
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 52,
                    "description": "<p>Using @link{#calculateDirectPath}&#39;s result as input, we here\ndetermine the first walkable point found in the matrix that includes\nblocked paths.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "matrix",
                            "type": "number[][]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "type": "number[][]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TemplateVarContext",
            "id": "class-TemplateVarContext-adff97d20031c06a8d3472e4695578f7",
            "file": "libs/angular/src/lib/utils/template-var.directive.ts",
            "type": "class",
            "sourceCode": "import { Directive, EmbeddedViewRef, Input, TemplateRef, ViewContainerRef } from '@angular/core';\n\nclass TemplateVarContext {\n  $implicit: any;\n  templateVar: any;\n}\n\n@Directive({\n  selector: '[templateVar]'\n})\nexport class TemplateVarDirective {\n  view: EmbeddedViewRef<any>;\n\n  protected context = new TemplateVarContext();\n\n  @Input()\n  set templateVar(context: any) {\n    this.context.$implicit = this.context.templateVar = context;\n    this.updateView();\n  }\n\n  constructor(protected vcRef: ViewContainerRef, protected templateRef: TemplateRef<any>) {}\n\n  updateView() {\n    if (!this.view) {\n      this.vcRef.clear();\n      this.view = this.vcRef.createEmbeddedView(this.templateRef, this.context);\n    } else {\n      this.view.markForCheck();\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "$implicit",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "templateVar",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "TemplateVarDirective",
            "id": "directive-TemplateVarDirective-adff97d20031c06a8d3472e4695578f7",
            "file": "libs/angular/src/lib/utils/template-var.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, EmbeddedViewRef, Input, TemplateRef, ViewContainerRef } from '@angular/core';\n\nclass TemplateVarContext {\n  $implicit: any;\n  templateVar: any;\n}\n\n@Directive({\n  selector: '[templateVar]'\n})\nexport class TemplateVarDirective {\n  view: EmbeddedViewRef<any>;\n\n  protected context = new TemplateVarContext();\n\n  @Input()\n  set templateVar(context: any) {\n    this.context.$implicit = this.context.templateVar = context;\n    this.updateView();\n  }\n\n  constructor(protected vcRef: ViewContainerRef, protected templateRef: TemplateRef<any>) {}\n\n  updateView() {\n    if (!this.view) {\n      this.vcRef.clear();\n      this.view = this.vcRef.createEmbeddedView(this.templateRef, this.context);\n    } else {\n      this.view.markForCheck();\n    }\n  }\n}\n",
            "selector": "[templateVar]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "templateVar",
                    "line": 17,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "context",
                    "defaultValue": "new TemplateVarContext()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "view",
                    "type": "EmbeddedViewRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "updateView",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "vcRef",
                        "type": "ViewContainerRef"
                    },
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "vcRef",
                        "type": "ViewContainerRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "templateVar": {
                    "name": "templateVar",
                    "setSignature": {
                        "name": "templateVar",
                        "type": "void",
                        "args": [
                            {
                                "name": "context",
                                "type": "any"
                            }
                        ],
                        "returnType": "void",
                        "line": 17,
                        "jsdoctags": [
                            {
                                "name": "context",
                                "type": "any",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        }
    ],
    "components": [
        {
            "name": "AutoArrangeExampleStoryComponent",
            "id": "component-AutoArrangeExampleStoryComponent-50974f9cb26419dcb3064068a9673116",
            "file": "libs/angular/stories/examples/auto-arrange/auto-arrange.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "../demo-diagram.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"action-bar\">\n  <button (click)=\"autoArrange()\">Auto Arrange</button>\n</div>\n<ngdx-diagram class=\"demo-diagram\" [model]=\"diagramModel\"></ngdx-diagram>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "diagramModel",
                    "type": "DiagramModel",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "autoArrange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {\n  DiagramEngine,\n  DiagramModel,\n  DefaultNodeModel,\n  DagreEngine,\n} from 'ngx-diagrams';\n\n@Component({\n  selector: 'app-root',\n  template: `\n    <div class=\"action-bar\">\n      <button (click)=\"autoArrange()\">Auto Arrange</button>\n    </div>\n    <ngdx-diagram class=\"demo-diagram\" [model]=\"diagramModel\"></ngdx-diagram>\n  `,\n  styleUrls: ['../demo-diagram.component.scss'],\n})\nexport class AutoArrangeExampleStoryComponent implements OnInit {\n  diagramModel: DiagramModel;\n\n  constructor(\n    private diagramEngine: DiagramEngine,\n    private dagreEngine: DagreEngine\n  ) {}\n\n  ngOnInit() {\n    const nodesDefaultDimensions = { height: 200, width: 200 };\n    this.diagramEngine.registerDefaultFactories();\n\n    this.diagramModel = this.diagramEngine.createDiagram();\n\n    const node1 = new DefaultNodeModel();\n    node1.setCoords({ x: 500, y: 300 });\n    node1.setDimensions(nodesDefaultDimensions);\n    const outport1 = node1.addOutPort({ name: 'outport1' });\n\n    const node2 = new DefaultNodeModel();\n    node2.setCoords({ x: 1000, y: 0 });\n    node2.setDimensions(nodesDefaultDimensions);\n    const inport = node2.addInPort({ name: 'inport2' });\n\n    for (let index = 0; index < 2; index++) {\n      const nodeLoop = new DefaultNodeModel();\n      nodeLoop.setCoords({\n        x: 1000 * (Math.random() * 10),\n        y: 300 + index * (Math.random() * 10) * 300,\n      });\n      nodeLoop.setDimensions(nodesDefaultDimensions);\n      const inportLoop = nodeLoop.addInPort({ name: `inport${index + 3}` });\n\n      this.diagramModel.addNode(nodeLoop);\n\n      const linkLoop = outport1.link(inportLoop);\n      this.diagramModel.addLink(linkLoop);\n    }\n\n    const link = outport1.link(inport);\n\n    this.diagramModel.addAll(node1, node2, link);\n\n    this.diagramEngine.zoomToFit();\n  }\n\n  autoArrange() {\n    this.dagreEngine.redistribute(this.diagramModel, {\n      graph: { align: 'DL', rankdir: 'LR', ranksep: 150 },\n    });\n    this.diagramEngine.zoomToFit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".demo-diagram {\n  display: flex;\n  height: 100%;\n  min-height: 100vh;\n  background-color: #3c3c3c;\n  background-image: linear-gradient(\n      0deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    ),\n    linear-gradient(\n      90deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    );\n  background-size: 50px 50px;\n}\n\n.action-bar {\n  position: relative;\n  width: 100%;\n  height: 40px;\n  z-index: 2000;\n  background-color: white;\n  display: flex;\n  align-items: center;\n  * {\n    margin: 0 10px;\n  }\n}\n",
                    "styleUrl": "../demo-diagram.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine"
                    },
                    {
                        "name": "dagreEngine",
                        "type": "DagreEngine"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dagreEngine",
                        "type": "DagreEngine",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "BasicExampleStoryComponent",
            "id": "component-BasicExampleStoryComponent-2c1d05713f488f3bbd712bc79d0d3599",
            "file": "libs/angular/stories/examples/basic/basic.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "../demo-diagram.component.scss"
            ],
            "styles": [],
            "template": "<ngdx-diagram    class=\"demo-diagram\"\n    [model]=\"diagramModel\"\n  ></ngdx-diagram>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "diagramModel",
                    "type": "DiagramModel",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { DiagramEngine, DiagramModel, DefaultNodeModel } from 'ngx-diagrams';\n\n@Component({\n  selector: 'app-root',\n  template: `<ngdx-diagram\n    class=\"demo-diagram\"\n    [model]=\"diagramModel\"\n  ></ngdx-diagram>`,\n  styleUrls: ['../demo-diagram.component.scss'],\n})\nexport class BasicExampleStoryComponent implements OnInit {\n  diagramModel: DiagramModel;\n\n  constructor(private diagramEngine: DiagramEngine) {}\n\n  ngOnInit() {\n    const nodesDefaultDimensions = { height: 200, width: 200 };\n    this.diagramEngine.registerDefaultFactories();\n\n    this.diagramModel = this.diagramEngine.createDiagram();\n\n    const node1 = new DefaultNodeModel();\n    node1.setCoords({ x: 500, y: 300 });\n    node1.setDimensions(nodesDefaultDimensions);\n    const outport1 = node1.addOutPort({ name: 'outport1' });\n\n    const node2 = new DefaultNodeModel();\n    node2.setCoords({ x: 1000, y: 0 });\n    node2.setDimensions(nodesDefaultDimensions);\n    const inport = node2.addInPort({ name: 'inport2' });\n\n    for (let index = 0; index < 2; index++) {\n      const nodeLoop = new DefaultNodeModel();\n      nodeLoop.setCoords({ x: 1000, y: 300 + index * 300 });\n      nodeLoop.setDimensions(nodesDefaultDimensions);\n      nodeLoop.addInPort({ name: `inport${index + 3}` });\n\n      this.diagramModel.addNode(nodeLoop);\n    }\n\n    const link = outport1.link(inport);\n    link.setLocked();\n\n    this.diagramModel.addAll(node1, node2, link);\n\n    this.diagramModel.getDiagramEngine().zoomToFit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".demo-diagram {\n  display: flex;\n  height: 100%;\n  min-height: 100vh;\n  background-color: #3c3c3c;\n  background-image: linear-gradient(\n      0deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    ),\n    linear-gradient(\n      90deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    );\n  background-size: 50px 50px;\n}\n\n.action-bar {\n  position: relative;\n  width: 100%;\n  height: 40px;\n  z-index: 2000;\n  background-color: white;\n  display: flex;\n  align-items: center;\n  * {\n    margin: 0 10px;\n  }\n}\n",
                    "styleUrl": "../demo-diagram.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "CustomLabelComponent",
            "id": "component-CustomLabelComponent-bc7023234e48054b2e73f54e0c4c98cc",
            "file": "libs/angular/stories/label/custom/custom-label.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "custom-label",
            "styleUrls": [
                "./custom-label.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./custom-label.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "label$",
                    "defaultValue": "createValueState<string>('', this.entityPipe('label'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "DefaultLabelModel"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "getLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 16,
                    "inheritance": {
                        "file": "DefaultLabelModel"
                    }
                },
                {
                    "name": "selectLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 20,
                    "inheritance": {
                        "file": "DefaultLabelModel"
                    }
                },
                {
                    "name": "setLabel",
                    "args": [
                        {
                            "name": "label",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "jsdoctags": [
                        {
                            "name": "label",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DefaultLabelModel"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { DefaultLabelModel } from 'ngx-diagrams';\n\n@Component({\n  selector: 'custom-label',\n  templateUrl: './custom-label.component.html',\n  styleUrls: ['./custom-label.component.scss'],\n})\nexport class CustomLabelComponent extends DefaultLabelModel {\n  constructor() {\n    super('custom');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".default-label {\n  background-image: linear-gradient(to left, violet, indigo, blue, green, yellow, orange, red);\n  background-clip: text;\n  color: transparent;\n  font-size: 24px;\n  user-select: none;\n}\n",
                    "styleUrl": "./custom-label.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "extends": "DefaultLabelModel",
            "templateData": "<div\n  class=\"default-label\"\n  [ngStyle]=\"{\n    transform:\n      'translate(' +\n      (selectCoords() | async).x +\n      'px, ' +\n      (selectCoords() | async).y +\n      'px)' +\n      'rotate(' +\n      (selectRotation() | async) +\n      'deg)'\n  }\">\n  {{ selectLabel() | async }}\n</div>\n"
        },
        {
            "name": "CustomLabelDiagramComponent",
            "id": "component-CustomLabelDiagramComponent-b3c2e996c037c9dbaaefe85d857dfd6a",
            "file": "libs/angular/stories/label/custom/diagram.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "../demo-diagram.component.scss"
            ],
            "styles": [],
            "template": "<ngdx-diagram    class=\"demo-diagram\"\n    [model]=\"diagramModel\"\n  ></ngdx-diagram>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "diagramModel",
                    "type": "DiagramModel",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ComponentFactoryResolver,\n  OnInit,\n  Renderer2,\n} from '@angular/core';\nimport {\n  DiagramEngine,\n  DiagramModel,\n  DefaultNodeModel,\n  DefaultLabelModel,\n} from 'ngx-diagrams';\nimport { CustomLabelFactory } from './custom.factory';\n\n@Component({\n  selector: 'app-root',\n  template: `<ngdx-diagram\n    class=\"demo-diagram\"\n    [model]=\"diagramModel\"\n  ></ngdx-diagram>`,\n  styleUrls: ['../demo-diagram.component.scss'],\n})\nexport class CustomLabelDiagramComponent implements OnInit {\n  diagramModel: DiagramModel;\n\n  constructor(\n    private diagramEngine: DiagramEngine,\n    private resolver: ComponentFactoryResolver,\n    private renderer: Renderer2\n  ) {}\n\n  ngOnInit() {\n    const nodesDefaultDimensions = { height: 200, width: 200 };\n    this.diagramEngine.registerDefaultFactories();\n    this.diagramEngine.registerLabelFactory(\n      new CustomLabelFactory(this.resolver, this.renderer)\n    );\n\n    this.diagramModel = this.diagramEngine.createDiagram();\n\n    const node1 = new DefaultNodeModel();\n    node1.setCoords({ x: 500, y: 300 });\n    node1.setDimensions(nodesDefaultDimensions);\n    const outport1 = node1.addOutPort({ name: 'outport1' });\n\n    const node2 = new DefaultNodeModel();\n    node2.setCoords({ x: 1500, y: 300 });\n    node2.setDimensions(nodesDefaultDimensions);\n    const inport = node2.addInPort({ name: 'inport2' });\n\n    const link = outport1.link(inport);\n    const label = new DefaultLabelModel(\"I'm a custom label\", 'custom-label');\n    link.setLabel(label);\n    link.setLocked();\n\n    this.diagramModel.addAll(node1, node2, link);\n\n    this.diagramModel.getDiagramEngine().zoomToFit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".demo-diagram {\n  display: flex;\n  height: 100%;\n  min-height: 100vh;\n  background-color: #3c3c3c;\n  background-image: linear-gradient(\n      0deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    ),\n    linear-gradient(\n      90deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    );\n  background-size: 50px 50px;\n}\n",
                    "styleUrl": "../demo-diagram.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine"
                    },
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "CustomLinkComponent",
            "id": "component-CustomLinkComponent-8da361bc77a3ddc848d896e20d50c8af",
            "file": "libs/angular/stories/link/custom/custom-link.component.ts",
            "changeDetection": "ChangeDetectionStrategy.Default",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "custom-link",
            "styleUrls": [
                "./custom-link.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./custom-link.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_path$",
                    "defaultValue": "new BehaviorSubject('')",
                    "type": "BehaviorSubject<string>",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "hover",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "labelLayer",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'labelLayer', {read: ViewContainerRef, static: true}"
                        }
                    ]
                },
                {
                    "name": "path$",
                    "defaultValue": "this._path$.pipe(\n    this.entityPipe('path'),\n    tap(() => this.cd.detectChanges())\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "color$",
                    "defaultValue": "createValueState<string>('rgba(255, 255, 255, 0.5)', this.entityPipe('color'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "DefaultLinkModel"
                    }
                },
                {
                    "name": "curvyness$",
                    "defaultValue": "createValueState<number>(50, this.entityPipe('curvyness'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "inheritance": {
                        "file": "DefaultLinkModel"
                    }
                },
                {
                    "name": "width$",
                    "defaultValue": "createValueState<number>(3, this.entityPipe('width'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "inheritance": {
                        "file": "DefaultLinkModel"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "calcCenterOfPath",
                    "args": [],
                    "optional": false,
                    "returnType": "Coords",
                    "typeParameters": [],
                    "line": 57
                },
                {
                    "name": "deleteLink",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                },
                {
                    "name": "selectColor",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 29,
                    "inheritance": {
                        "file": "DefaultLinkModel"
                    }
                },
                {
                    "name": "selectWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 25,
                    "inheritance": {
                        "file": "DefaultLinkModel"
                    }
                },
                {
                    "name": "setColor",
                    "args": [
                        {
                            "name": "color",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DefaultLinkModel"
                    }
                },
                {
                    "name": "setCurvyness",
                    "args": [
                        {
                            "name": "curvyness",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "jsdoctags": [
                        {
                            "name": "curvyness",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DefaultLinkModel"
                    }
                },
                {
                    "name": "setWidth",
                    "args": [
                        {
                            "name": "width",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "jsdoctags": [
                        {
                            "name": "width",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DefaultLinkModel"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ViewChild,\n  ViewContainerRef\n} from '@angular/core';\nimport { Coords, DefaultLinkModel, generateCurvePath } from 'ngx-diagrams';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'custom-link',\n  templateUrl: './custom-link.component.html',\n  styleUrls: ['./custom-link.component.scss'],\n  changeDetection: ChangeDetectionStrategy.Default\n})\nexport class CustomLinkComponent extends DefaultLinkModel implements AfterViewInit {\n  @ViewChild('labelLayer', { read: ViewContainerRef, static: true })\n  labelLayer: ViewContainerRef;\n\n  _path$: BehaviorSubject<string> = new BehaviorSubject('');\n  path$ = this._path$.pipe(\n    this.entityPipe('path'),\n    tap(() => this.cd.detectChanges())\n  );\n\n  hover = false;\n\n  constructor(private cd: ChangeDetectorRef) {\n    super({ type: 'custom-link', logPrefix: '[CustomLink]' });\n  }\n\n  ngAfterViewInit() {\n    const firstPCoords$ = this.getFirstPoint().selectCoords();\n    const lastPCoords$ = this.getLastPoint().selectCoords();\n\n    combineLatest([firstPCoords$, lastPCoords$]).subscribe(([firstPCoords, lastPCoords]) => {\n      const points = [firstPCoords, lastPCoords];\n\n      const isHorizontal = Math.abs(firstPCoords.x - lastPCoords.x) > Math.abs(firstPCoords.y - lastPCoords.y);\n      const xOrY = isHorizontal ? 'x' : 'y';\n\n      // draw the smoothing\n      // if the points are too close, just draw a straight line\n      let isStraight = false;\n      if (Math.abs(points[0][xOrY] - points[1][xOrY]) < 150) {\n        isStraight = true;\n      }\n\n      const path = generateCurvePath(firstPCoords, lastPCoords, isStraight ? 0 : 200);\n      this._path$.next(path);\n    });\n  }\n\n  calcCenterOfPath(): Coords {\n    const firstPointCoords = this.getFirstPoint().getCoords();\n    const lastPointCoords = this.getLastPoint().getCoords();\n    return { x: (firstPointCoords.x + lastPointCoords.x) / 2, y: (firstPointCoords.y + lastPointCoords.y) / 2 };\n  }\n\n  deleteLink() {\n    this.destroy();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".custom-link {\n  #triangle {\n    path {\n      fill: currentColor;\n    }\n  }\n}\n\n.custom-link-container {\n  position: relative;\n  fill: none;\n  overflow: visible;\n  pointer-events: all;\n}\n\n.default-point {\n  color: lightgray;\n  overflow: visible;\n  pointer-events: all;\n\n  &.hovered {\n    color: rgb(0, 192, 255);\n  }\n}\n\n.delete-icon {\n  color: white;\n  cursor: pointer;\n  display: flex;\n  pointer-events: all;\n}\n",
                    "styleUrl": "./custom-link.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "DefaultLinkModel",
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<!-- Label Host -->\n<ng-template #labelLayer></ng-template>\n\n<svg class=\"custom-link-container\" [ngStyle]=\"{ color: selectColor() | async }\">\n  <g>\n    <defs>\n      <marker\n        id=\"triangle\"\n        viewBox=\"0 0 20 20\"\n        refX=\"15\"\n        refY=\"4\"\n        markerUnits=\"strokeWidth\"\n        markerWidth=\"1\"\n        markerHeight=\"1\"\n        orient=\"auto\"\n      >\n        <path\n          d=\"M 0 0 L 10 5 L 0 10 z\"\n          fill=\"currentcolor\"\n          stroke=\"currentcolor\"\n        />\n      </marker>\n    </defs>\n    <path\n      [attr.stroke-width]=\"width\"\n      [attr.stroke]=\"selectColor() | async\"\n      [attr.d]=\"path$ | async\"\n      class=\"custom-link\"\n      (mouseleave)=\"setHovered(false)\"\n      (mouseenter)=\"setHovered()\"\n      [ngClass]=\"{ hovered: selectHovered() | async }\"\n      marker-end=\"url(#triangle)\"\n    ></path>\n    <path\n      class=\"custom-link\"\n      (mouseleave)=\"setHovered(false)\"\n      (mouseenter)=\"setHovered()\"\n      [attr.stroke-width]=\"20\"\n      [attr.stroke]=\"selectColor() | async\"\n      [attr.stroke-linecap]=\"'round'\"\n      [attr.data-linkid]=\"id\"\n      [attr.stroke-opacity]=\"(selectHovered() | async) ? '0.1' : '0'\"\n      [attr.d]=\"path$ | async\"\n      marker-end=\"url(#triangle)\"\n    ></path>\n  </g>\n\n  <!-- Points -->\n  <g *ngFor=\"let point of getPoints()\" [id]=\"point.id\">\n    <circle\n      fill=\"currentColor\"\n      [attr.cx]=\"point.selectX() | async\"\n      [attr.cy]=\"point.selectY() | async\"\n      r=\"5\"\n      class=\"default-point\"\n      [ngClass]=\"{ hovered: point.selectHovered() | async }\"\n    />\n    <circle\n      [attr.data-pointid]=\"point.id\"\n      [attr.data-linkid]=\"id\"\n      (mouseleave)=\"point.setHovered(false); setHovered(false)\"\n      (mouseenter)=\"point.setHovered(); setHovered()\"\n      [attr.cx]=\"point.selectX() | async\"\n      [attr.cy]=\"point.selectY() | async\"\n      r=\"15\"\n      [attr.opacity]=\"0\"\n      [ngClass]=\"{ selected: point.selectSelected() | async }\"\n    />\n  </g>\n</svg>\n\n<div\n  (click)=\"deleteLink()\"\n  class=\"delete-icon\"\n  [ngStyle]=\"{\n    transform:\n      'translate(' +\n      calcCenterOfPath().x +\n      'px, ' +\n      (calcCenterOfPath().y - 200) +\n      'px)'\n  }\"\n>\n  <svg\n    fill=\"currentcolor\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    height=\"30px\"\n    viewBox=\"-47 0 512 512\"\n    width=\"30px\"\n  >\n    <path\n      fill=\"currentcolor\"\n      d=\"m416.875 114.441406-11.304688-33.886718c-4.304687-12.90625-16.339843-21.578126-29.941406-21.578126h-95.011718v-30.933593c0-15.460938-12.570313-28.042969-28.027344-28.042969h-87.007813c-15.453125 0-28.027343 12.582031-28.027343 28.042969v30.933593h-95.007813c-13.605469 0-25.640625 8.671876-29.945313 21.578126l-11.304687 33.886718c-2.574219 7.714844-1.2695312 16.257813 3.484375 22.855469 4.753906 6.597656 12.445312 10.539063 20.578125 10.539063h11.816406l26.007813 321.605468c1.933594 23.863282 22.183594 42.558594 46.109375 42.558594h204.863281c23.921875 0 44.175781-18.695312 46.105469-42.5625l26.007812-321.601562h6.542969c8.132812 0 15.824219-3.941407 20.578125-10.535157 4.753906-6.597656 6.058594-15.144531 3.484375-22.859375zm-249.320312-84.441406h83.0625v28.976562h-83.0625zm162.804687 437.019531c-.679687 8.402344-7.796875 14.980469-16.203125 14.980469h-204.863281c-8.40625 0-15.523438-6.578125-16.203125-14.980469l-25.816406-319.183593h288.898437zm-298.566406-349.183593 9.269531-27.789063c.210938-.640625.808594-1.070313 1.484375-1.070313h333.082031c.675782 0 1.269532.429688 1.484375 1.070313l9.269531 27.789063zm0 0\"\n    />\n    <path\n      fill=\"currentcolor\"\n      d=\"m282.515625 465.957031c.265625.015625.527344.019531.792969.019531 7.925781 0 14.550781-6.210937 14.964844-14.21875l14.085937-270.398437c.429687-8.273437-5.929687-15.332031-14.199219-15.761719-8.292968-.441406-15.328125 5.925782-15.761718 14.199219l-14.082032 270.398437c-.429687 8.273438 5.925782 15.332032 14.199219 15.761719zm0 0\"\n    />\n    <path\n      fill=\"currentcolor\"\n      d=\"m120.566406 451.792969c.4375 7.996093 7.054688 14.183593 14.964844 14.183593.273438 0 .554688-.007812.832031-.023437 8.269531-.449219 14.609375-7.519531 14.160157-15.792969l-14.753907-270.398437c-.449219-8.273438-7.519531-14.613281-15.792969-14.160157-8.269531.449219-14.609374 7.519532-14.160156 15.792969zm0 0\"\n    />\n    <path\n      fill=\"currentcolor\"\n      d=\"m209.253906 465.976562c8.285156 0 15-6.714843 15-15v-270.398437c0-8.285156-6.714844-15-15-15s-15 6.714844-15 15v270.398437c0 8.285157 6.714844 15 15 15zm0 0\"\n    />\n  </svg>\n</div>\n"
        },
        {
            "name": "CustomLinkDiagramComponent",
            "id": "component-CustomLinkDiagramComponent-3ee85126971241fbcfc59768d7ba1a81",
            "file": "libs/angular/stories/link/custom/diagram.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "../demo-diagram.component.scss"
            ],
            "styles": [],
            "template": "<ngdx-diagram    class=\"demo-diagram\"\n    [model]=\"diagramModel\"\n  ></ngdx-diagram>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "nodeHeight",
                    "defaultValue": "200",
                    "line": 26
                },
                {
                    "name": "nodeWidth",
                    "defaultValue": "200",
                    "line": 27
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "diagramModel",
                    "type": "DiagramModel",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ComponentFactoryResolver,\n  Input,\n  OnInit,\n  Renderer2,\n} from '@angular/core';\nimport {\n  DiagramEngine,\n  DiagramModel,\n  DefaultNodeModel,\n  DefaultLinkModel,\n} from 'ngx-diagrams';\nimport { CustomLinkFactory } from './custom.factory';\n\n@Component({\n  selector: 'app-root',\n  template: `<ngdx-diagram\n    class=\"demo-diagram\"\n    [model]=\"diagramModel\"\n  ></ngdx-diagram>`,\n  styleUrls: ['../demo-diagram.component.scss'],\n})\nexport class CustomLinkDiagramComponent implements OnInit {\n  diagramModel: DiagramModel;\n  @Input() nodeHeight = 200;\n  @Input() nodeWidth = 200;\n\n  constructor(\n    private diagramEngine: DiagramEngine,\n    private resolver: ComponentFactoryResolver,\n    private renderer: Renderer2\n  ) {}\n\n  ngOnInit() {\n    const nodesDefaultDimensions = {\n      height: this.nodeHeight,\n      width: this.nodeWidth,\n    };\n    this.diagramEngine.registerDefaultFactories();\n    this.diagramEngine.registerLinkFactory(\n      new CustomLinkFactory(this.resolver, this.renderer)\n    );\n\n    this.diagramModel = this.diagramEngine.createDiagram();\n\n    const node1 = new DefaultNodeModel();\n    node1.setCoords({ x: 500, y: 300 });\n    node1.setDimensions(nodesDefaultDimensions);\n    const outport1 = node1.addOutPort({\n      name: 'outport1',\n      linkType: 'custom-link',\n      maximumLinks: 3,\n    });\n\n    const node2 = new DefaultNodeModel();\n    node2.setCoords({ x: 1000, y: 300 });\n    node2.setDimensions(nodesDefaultDimensions);\n    const inport = node2.addInPort({ name: 'inport2' });\n\n    const link = new DefaultLinkModel({ type: 'custom-link' });\n\n    link.setSourcePort(outport1);\n    link.setTargetPort(inport);\n\n    this.diagramModel.addAll(node1, node2, link);\n\n    this.diagramModel.getDiagramEngine().zoomToFit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".demo-diagram {\n  display: flex;\n  height: 100%;\n  min-height: 100vh;\n  background-color: #3c3c3c;\n  background-image: linear-gradient(\n      0deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    ),\n    linear-gradient(\n      90deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    );\n  background-size: 50px 50px;\n}\n",
                    "styleUrl": "../demo-diagram.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine"
                    },
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "CustomNodeComponent",
            "id": "component-CustomNodeComponent-002b65712ca81b36119f8aef260fed76",
            "file": "libs/angular/stories/node/custom/custom.component.ts",
            "changeDetection": "ChangeDetectionStrategy.Default",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "custom-node",
            "styleUrls": [
                "./custom.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./custom.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "destroyed$",
                    "defaultValue": "new ReplaySubject(1)",
                    "type": "ReplaySubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "nodeContent",
                    "defaultValue": "'Pick me!'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "portsLayer",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'portsLayer', {read: ViewContainerRef, static: true}"
                        }
                    ]
                },
                {
                    "name": "color",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "inheritance": {
                        "file": "DefaultNodeModel"
                    }
                },
                {
                    "name": "height$",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "inheritance": {
                        "file": "DefaultNodeModel"
                    }
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "DefaultNodeModel"
                    }
                },
                {
                    "name": "width$",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "inheritance": {
                        "file": "DefaultNodeModel"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "generatePort",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31
                },
                {
                    "name": "addInPort",
                    "args": [
                        {
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29,
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DefaultNodeModel"
                    }
                },
                {
                    "name": "addOutPort",
                    "args": [
                        {
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 52,
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DefaultNodeModel"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  ViewChild,\n  ViewContainerRef,\n  ChangeDetectionStrategy,\n  OnDestroy,\n} from '@angular/core';\nimport { PortModel, DefaultNodeModel } from 'ngx-diagrams';\nimport { ReplaySubject } from 'rxjs';\n\n@Component({\n  selector: 'custom-node',\n  templateUrl: './custom.component.html',\n  styleUrls: ['./custom.component.scss'],\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class CustomNodeComponent\n  extends DefaultNodeModel\n  implements OnInit, OnDestroy {\n  destroyed$: ReplaySubject<boolean> = new ReplaySubject(1);\n  @ViewChild('portsLayer', { read: ViewContainerRef, static: true })\n  portsLayer: ViewContainerRef;\n\n  nodeContent = 'Pick me!';\n\n  constructor() {\n    super({ type: 'custom-node' });\n  }\n\n  ngOnInit() {\n    this.selectPorts().subscribe((ports) => {\n      ports.forEach((port) => {\n        if (!port.getPainted()) {\n          port.setLocked(this.getLocked());\n          this.generatePort(port);\n        }\n      });\n    });\n\n    this.selectSelected().subscribe((selected) => {\n      this.nodeContent = selected ? 'Thank you 🙏' : 'Pick me!';\n    });\n  }\n\n  ngOnDestroy() {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n\n  generatePort(port: PortModel) {\n    this.getDiagramEngine().generateWidgetForPort(port, this.portsLayer);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  &.selected {\n    .custom-node {\n      &:after {\n        box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\n        border-color: #86d8b9;\n      }\n    }\n  }\n\n  .custom-node {\n    user-select: none;\n    pointer-events: all;\n    background-color: white !important;\n    border-radius: 16px;\n    transition: all 0.3s ease-in-out;\n    padding: 20px;\n    cursor: auto;\n    border: 1px solid #e1e2e6;\n\n    &:hover {\n      cursor: pointer;\n      border-color: #86d8b9;\n    }\n\n    &:after {\n      transition: all 0.3s ease-in-out;\n      content: '';\n      position: absolute;\n      top: 12px;\n      right: 4px;\n      bottom: 4px;\n      left: 12px;\n      z-index: -1;\n      margin: -9px;\n      border-radius: 16px;\n    }\n\n    &:after {\n      background: #86d8b9;\n    }\n  }\n}\n",
                    "styleUrl": "./custom.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 25
            },
            "extends": "DefaultNodeModel",
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"custom-node\">\n  <div>{{ nodeContent }}</div>\n\n  <div class=\"ports\">\n    <ng-template #portsLayer></ng-template>\n  </div>\n</div>\n"
        },
        {
            "name": "CustomNodeDiagramComponent",
            "id": "component-CustomNodeDiagramComponent-121c689dec4f52a6759b5f35f8ae7ff4",
            "file": "libs/angular/stories/node/custom/diagram.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "../demo-diagram.component.scss"
            ],
            "styles": [],
            "template": "<ngdx-diagram    class=\"demo-diagram\"\n    [model]=\"diagramModel\"\n  ></ngdx-diagram>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "nodeHeight",
                    "defaultValue": "200",
                    "line": 23
                },
                {
                    "name": "nodeWidth",
                    "defaultValue": "200",
                    "line": 24
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "diagramModel",
                    "type": "DiagramModel",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "e",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ComponentFactoryResolver,\n  Input,\n  OnChanges,\n  OnInit,\n  Renderer2,\n  SimpleChanges,\n} from '@angular/core';\nimport { DiagramEngine, DiagramModel, DefaultNodeModel } from 'ngx-diagrams';\nimport { CustomNodeFactory } from './custom.factory';\n\n@Component({\n  selector: 'app-root',\n  template: `<ngdx-diagram\n    class=\"demo-diagram\"\n    [model]=\"diagramModel\"\n  ></ngdx-diagram>`,\n  styleUrls: ['../demo-diagram.component.scss'],\n})\nexport class CustomNodeDiagramComponent implements OnInit, OnChanges {\n  diagramModel: DiagramModel;\n  @Input() nodeHeight = 200;\n  @Input() nodeWidth = 200;\n\n  constructor(\n    private diagramEngine: DiagramEngine,\n    private resolver: ComponentFactoryResolver,\n    private renderer: Renderer2\n  ) {}\n\n  ngOnInit() {\n    const nodesDefaultDimensions = {\n      height: this.nodeHeight,\n      width: this.nodeWidth,\n    };\n    this.diagramEngine.registerDefaultFactories();\n    this.diagramEngine.registerNodeFactory(\n      new CustomNodeFactory(this.resolver, this.renderer)\n    );\n\n    this.diagramModel = this.diagramEngine.createDiagram();\n\n    const node1 = new DefaultNodeModel({ type: 'custom-node' });\n    node1.setCoords({ x: 500, y: 300 });\n    node1.setDimensions(nodesDefaultDimensions);\n\n    this.diagramModel.addAll(node1);\n\n    this.diagramModel.getDiagramEngine().zoomToFit();\n  }\n\n  ngOnChanges(e: SimpleChanges) {\n    if (this.diagramModel) {\n      if (e.nodeHeight) {\n        Object.values(this.diagramModel.getNodes()).forEach((node) => {\n          node.setHeight(e.nodeHeight.currentValue);\n        });\n      }\n\n      if (e.nodeWidth) {\n        Object.values(this.diagramModel.getNodes()).forEach((node) => {\n          node.setWidth(e.nodeWidth.currentValue);\n        });\n      }\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".demo-diagram {\n  display: flex;\n  height: 100%;\n  min-height: 100vh;\n  background-color: #3c3c3c;\n  background-image: linear-gradient(\n      0deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    ),\n    linear-gradient(\n      90deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    );\n  background-size: 50px 50px;\n}\n",
                    "styleUrl": "../demo-diagram.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine"
                    },
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ]
        },
        {
            "name": "CustomPortComponent",
            "id": "component-CustomPortComponent-dafa931a86c542522e7a1bc76e6c89e6",
            "file": "libs/angular/stories/port/custom/custom.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "custom-port",
            "styleUrls": [
                "./custom.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./custom.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "in",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "inheritance": {
                        "file": "DefaultPortModel"
                    }
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "inheritance": {
                        "file": "DefaultPortModel"
                    }
                },
                {
                    "name": "links",
                    "type": "HashMap<DefaultLinkModel>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "inheritance": {
                        "file": "DefaultPortModel"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "createLinkModel",
                    "args": [],
                    "optional": false,
                    "returnType": "DefaultLinkModel",
                    "typeParameters": [],
                    "line": 14
                },
                {
                    "name": "canLinkToPort",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 57,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DefaultPortModel"
                    }
                },
                {
                    "name": "createLinkModel",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 51,
                    "inheritance": {
                        "file": "DefaultPortModel"
                    }
                },
                {
                    "name": "link",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "LinkModel",
                    "typeParameters": [],
                    "line": 40,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DefaultPortModel"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { DefaultPortModel, DefaultLinkModel } from 'ngx-diagrams';\n\n@Component({\n  selector: 'custom-port',\n  templateUrl: './custom.component.html',\n  styleUrls: ['./custom.component.scss'],\n})\nexport class CustomPortComponent extends DefaultPortModel {\n  constructor() {\n    super();\n  }\n\n  createLinkModel(): DefaultLinkModel {\n    return new DefaultLinkModel();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  position: absolute;\n\n  &.in {\n    left: 45%;\n    top: -10px;\n  }\n}\n",
                    "styleUrl": "./custom.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "extends": "DefaultPortModel",
            "templateData": "<svg\n  class=\"in\"\n  *ngIf=\"in\"\n  width=\"24\"\n  height=\"16\"\n  viewBox=\"0 0 24 16\"\n  fill=\"none\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n>\n  <path\n    d=\"M23.4092 0.839456L23.4096 0.839967C23.4709 0.93801 23.5 1.04467 23.5 1.14951C23.5 1.24656 23.4748 1.34624 23.421 1.44004L12.6823 15.1163L12.6657 15.1375L12.6514 15.1603C12.5272 15.3593 12.2828 15.5 11.9998 15.5C11.7164 15.5 11.4727 15.3596 11.3489 15.1608L11.3345 15.1377L11.3177 15.1163L0.578554 1.44007C0.470045 1.25053 0.474001 1.02677 0.590099 0.84006C0.714827 0.640412 0.959347 0.499999 1.2421 0.499999L22.7579 0.5C23.041 0.5 23.285 0.640261 23.4092 0.839456Z\"\n    fill=\"white\"\n    stroke=\"#B0B0B0\"\n  />\n</svg>\n"
        },
        {
            "name": "CustomPortDiagramComponent",
            "id": "component-CustomPortDiagramComponent-ec7f1e69d562f9ff7812b36e6a998987",
            "file": "libs/angular/stories/port/custom/diagram.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "../demo-diagram.component.scss"
            ],
            "styles": [],
            "template": "<ngdx-diagram    class=\"demo-diagram\"\n    [model]=\"diagramModel\"\n  ></ngdx-diagram>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "diagramModel",
                    "type": "DiagramModel",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ComponentFactoryResolver,\n  OnInit,\n  Renderer2,\n} from '@angular/core';\nimport {\n  DiagramEngine,\n  DiagramModel,\n  DefaultNodeModel,\n  DefaultPortModel,\n} from 'ngx-diagrams';\nimport { CustomPortFactory } from './custom.factory';\n\n@Component({\n  selector: 'app-root',\n  template: `<ngdx-diagram\n    class=\"demo-diagram\"\n    [model]=\"diagramModel\"\n  ></ngdx-diagram>`,\n  styleUrls: ['../demo-diagram.component.scss'],\n})\nexport class CustomPortDiagramComponent implements OnInit {\n  diagramModel: DiagramModel;\n\n  constructor(\n    private diagramEngine: DiagramEngine,\n    private resolver: ComponentFactoryResolver,\n    private renderer: Renderer2\n  ) {}\n\n  ngOnInit() {\n    const nodesDefaultDimensions = { height: 200, width: 200 };\n    this.diagramEngine.registerDefaultFactories();\n    this.diagramEngine.registerPortFactory(\n      new CustomPortFactory(this.resolver, this.renderer)\n    );\n\n    this.diagramModel = this.diagramEngine.createDiagram();\n\n    const node1 = new DefaultNodeModel();\n    node1.setCoords({ x: 500, y: 300 });\n    node1.setDimensions(nodesDefaultDimensions);\n    const port1 = new DefaultPortModel({ type: 'custom-port' });\n    node1.addPort(port1);\n\n    this.diagramModel.addAll(node1);\n\n    this.diagramModel.getDiagramEngine().zoomToFit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".demo-diagram {\n  display: flex;\n  height: 100%;\n  min-height: 100vh;\n  background-color: #3c3c3c;\n  background-image: linear-gradient(\n      0deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    ),\n    linear-gradient(\n      90deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    );\n  background-size: 50px 50px;\n}\n",
                    "styleUrl": "../demo-diagram.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine"
                    },
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "DefaultLabelComponent",
            "id": "component-DefaultLabelComponent-7f4162f2df1117942f590facc95e60a0",
            "file": "libs/angular/src/lib/defaults/components/default-label/default-label.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ngdx-default-label",
            "styleUrls": [
                "./default-label.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./default-label.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "label$",
                    "defaultValue": "createValueState<string>('', this.entityPipe('label'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "DefaultLabelModel"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "getLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 16,
                    "inheritance": {
                        "file": "DefaultLabelModel"
                    }
                },
                {
                    "name": "selectLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 20,
                    "inheritance": {
                        "file": "DefaultLabelModel"
                    }
                },
                {
                    "name": "setLabel",
                    "args": [
                        {
                            "name": "label",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "jsdoctags": [
                        {
                            "name": "label",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DefaultLabelModel"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { DefaultLabelModel } from '../../models/default-label.model';\n\n@Component({\n  selector: 'ngdx-default-label',\n  templateUrl: './default-label.component.html',\n  styleUrls: ['./default-label.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DefaultLabelComponent extends DefaultLabelModel {\n  constructor() {\n    super('ngdx-default-label');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".default-label {\n  color: white;\n  user-select: none;\n}\n",
                    "styleUrl": "./default-label.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 10
            },
            "extends": "DefaultLabelModel",
            "templateData": "<div\n  class=\"default-label\"\n  [ngStyle]=\"{\n    transform:\n      'translate(' +\n      (selectCoords() | async).x +\n      'px, ' +\n      (selectCoords() | async).y +\n      'px)' +\n      'rotate(' +\n      (selectRotation() | async) +\n      'deg)'\n  }\"\n>\n  {{ selectLabel() | async }}\n</div>\n"
        },
        {
            "name": "DefaultLabelStoryComponent",
            "id": "component-DefaultLabelStoryComponent-b0e39b2449a5a52d11b5ae61e50ae5b2",
            "file": "libs/angular/stories/label/default/default.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "../demo-diagram.component.scss"
            ],
            "styles": [],
            "template": "<ngdx-diagram    class=\"demo-diagram\"\n    [model]=\"diagramModel\"\n  ></ngdx-diagram>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "diagramModel",
                    "type": "DiagramModel",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {\n  DiagramEngine,\n  DiagramModel,\n  DefaultNodeModel,\n  DefaultLabelModel,\n} from 'ngx-diagrams';\n\n@Component({\n  selector: 'app-root',\n  template: `<ngdx-diagram\n    class=\"demo-diagram\"\n    [model]=\"diagramModel\"\n  ></ngdx-diagram>`,\n  styleUrls: ['../demo-diagram.component.scss'],\n})\nexport class DefaultLabelStoryComponent implements OnInit {\n  diagramModel: DiagramModel;\n\n  constructor(private diagramEngine: DiagramEngine) {}\n\n  ngOnInit() {\n    const nodesDefaultDimensions = { height: 200, width: 200 };\n    this.diagramEngine.registerDefaultFactories();\n\n    this.diagramModel = this.diagramEngine.createDiagram();\n\n    const node1 = new DefaultNodeModel();\n    node1.setCoords({ x: 500, y: 300 });\n    node1.setDimensions(nodesDefaultDimensions);\n    const outport1 = node1.addOutPort({ name: 'outport1' });\n\n    const node2 = new DefaultNodeModel();\n    node2.setCoords({ x: 1000, y: 300 });\n    node2.setDimensions(nodesDefaultDimensions);\n    const inport = node2.addInPort({ name: 'inport2' });\n\n    const link = outport1.link(inport);\n    const label = new DefaultLabelModel(\"I'm a label\");\n    link.setLabel(label);\n    link.setLocked();\n\n    this.diagramModel.addAll(node1, node2, link);\n\n    this.diagramModel.getDiagramEngine().zoomToFit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".demo-diagram {\n  display: flex;\n  height: 100%;\n  min-height: 100vh;\n  background-color: #3c3c3c;\n  background-image: linear-gradient(\n      0deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    ),\n    linear-gradient(\n      90deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    );\n  background-size: 50px 50px;\n}\n",
                    "styleUrl": "../demo-diagram.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "DefaultLinkComponent",
            "id": "component-DefaultLinkComponent-ada185da71d49006770bc298a840ceaf",
            "file": "libs/angular/src/lib/defaults/components/default-link/default-link.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ngdx-default-link",
            "styleUrls": [
                "./default-link.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./default-link.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "labelLayer",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'labelLayer', {read: ViewContainerRef, static: true}"
                        }
                    ]
                },
                {
                    "name": "path$",
                    "defaultValue": "createValueState<string>(null, this.entityPipe('path'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "points$",
                    "defaultValue": "createValueState<PointModel[]>([], this.entityPipe('points'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "color$",
                    "defaultValue": "createValueState<string>('rgba(255, 255, 255, 0.5)', this.entityPipe('color'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "DefaultLinkModel"
                    }
                },
                {
                    "name": "curvyness$",
                    "defaultValue": "createValueState<number>(50, this.entityPipe('curvyness'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "inheritance": {
                        "file": "DefaultLinkModel"
                    }
                },
                {
                    "name": "width$",
                    "defaultValue": "createValueState<number>(3, this.entityPipe('width'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "inheritance": {
                        "file": "DefaultLinkModel"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "calcCenterOfPath",
                    "args": [
                        {
                            "name": "firstPoint",
                            "type": "Coords"
                        },
                        {
                            "name": "secondPoint",
                            "type": "Coords"
                        }
                    ],
                    "optional": false,
                    "returnType": "Coords",
                    "typeParameters": [],
                    "line": 91,
                    "jsdoctags": [
                        {
                            "name": "firstPoint",
                            "type": "Coords",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "secondPoint",
                            "type": "Coords",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calcLabelIncline",
                    "args": [
                        {
                            "name": "firstPoint",
                            "type": "Coords"
                        },
                        {
                            "name": "secondPoint",
                            "type": "Coords"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 74,
                    "jsdoctags": [
                        {
                            "name": "firstPoint",
                            "type": "Coords",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "secondPoint",
                            "type": "Coords",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                },
                {
                    "name": "selectPath",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 95
                },
                {
                    "name": "trackByPoints",
                    "args": [
                        {
                            "name": "i",
                            "type": "number"
                        },
                        {
                            "name": "point",
                            "type": "PointModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 31,
                    "jsdoctags": [
                        {
                            "name": "i",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "point",
                            "type": "PointModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectColor",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 29,
                    "inheritance": {
                        "file": "DefaultLinkModel"
                    }
                },
                {
                    "name": "selectWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 25,
                    "inheritance": {
                        "file": "DefaultLinkModel"
                    }
                },
                {
                    "name": "setColor",
                    "args": [
                        {
                            "name": "color",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DefaultLinkModel"
                    }
                },
                {
                    "name": "setCurvyness",
                    "args": [
                        {
                            "name": "curvyness",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "jsdoctags": [
                        {
                            "name": "curvyness",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DefaultLinkModel"
                    }
                },
                {
                    "name": "setWidth",
                    "args": [
                        {
                            "name": "width",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "jsdoctags": [
                        {
                            "name": "width",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DefaultLinkModel"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ViewChild,\n  ViewContainerRef\n} from '@angular/core';\nimport { createValueState, PointModel, generateCurvePath, Coords } from '@ngx-diagrams/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { DefaultLinkModel } from '../../models/default-link.model';\n\n@Component({\n  selector: 'ngdx-default-link',\n  templateUrl: './default-link.component.html',\n  styleUrls: ['./default-link.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DefaultLinkComponent extends DefaultLinkModel implements AfterViewInit {\n  @ViewChild('labelLayer', { read: ViewContainerRef, static: true })\n  labelLayer: ViewContainerRef;\n\n  path$ = createValueState<string>(null, this.entityPipe('path'));\n  points$ = createValueState<PointModel[]>([], this.entityPipe('points'));\n\n  constructor(private cdRef: ChangeDetectorRef) {\n    super({ type: 'ngdx-default-link' });\n  }\n\n  trackByPoints(i: number, point: PointModel) {\n    return point.id;\n  }\n\n  ngAfterViewInit() {\n    const firstPCoords$ = this.getFirstPoint().selectCoords();\n    const lastPCoords$ = this.getLastPoint().selectCoords();\n\n    // Observe link coords and update drawing accordingly\n    combineLatest([firstPCoords$, lastPCoords$])\n      .pipe(takeUntil(this.onEntityDestroy()))\n      .subscribe(([firstPCoords, lastPCoords]) => {\n        const points = [firstPCoords, lastPCoords];\n\n        // handle regular links\n        // draw the smoothing\n        // if the points are too close, just draw a straight line\n        const isHorizontal = Math.abs(firstPCoords.x - lastPCoords.x) > Math.abs(firstPCoords.y - lastPCoords.y);\n        const xOrY = isHorizontal ? 'x' : 'y';\n        let isStraight = false;\n        if (Math.abs(points[0][xOrY] - points[1][xOrY]) < 50) {\n          isStraight = true;\n        }\n\n        const path = generateCurvePath(firstPCoords, lastPCoords, isStraight ? 0 : this.curvyness);\n        this.path$.set(path).emit();\n\n        const label = this.getLabel();\n        // update label position\n        if (label) {\n          label.setCoords(this.calcCenterOfPath(firstPCoords, lastPCoords));\n\n          // TODO: check whether we want the label to rotate along with the line\n          // label.setRotation(this.calcLabelIncline(firstPCoords, lastPCoords));\n        }\n\n        // TODO: handle the multiple lines in between the points\n        // https://github.com/projectstorm/react-diagrams/blob/master/src/defaults/widgets/DefaultLinkWidget.tsx#L344-L371\n\n        this.cdRef.detectChanges();\n      });\n  }\n\n  calcLabelIncline(firstPoint: Coords, secondPoint: Coords): number {\n    const dy = secondPoint.y - firstPoint.y;\n    const dx = secondPoint.x - firstPoint.x;\n\n    if (dx === 0) {\n      return 0;\n    }\n\n    let inclineAngel = (Math.atan(dy / dx) * 180) / Math.PI;\n\n    if (inclineAngel < 0) {\n      inclineAngel += 180;\n    }\n\n    return inclineAngel;\n  }\n\n  calcCenterOfPath(firstPoint: Coords, secondPoint: Coords): Coords {\n    return { x: (firstPoint.x + secondPoint.x) / 2 + 20, y: (firstPoint.y + secondPoint.y) / 2 + 20 };\n  }\n\n  selectPath(): Observable<string> {\n    return this.path$.value$;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".link-container {\n  position: relative;\n  fill: none;\n  overflow: visible;\n  pointer-events: all;\n}\n\n.default-link {\n  fill: none;\n  overflow: visible;\n\n  @keyframes dash {\n    from {\n      stroke-dashoffset: 24;\n    }\n    to {\n      stroke-dashoffset: 0;\n    }\n  }\n\n  &.hovered {\n    stroke: rgb(0, 192, 255);\n    stroke-dasharray: 10, 2;\n    animation: dash 1s linear infinite;\n  }\n}\n\n.default-point {\n  color: lightgray;\n  overflow: visible;\n  pointer-events: all;\n\n  &.hovered {\n    color: rgb(0, 192, 255);\n  }\n}\n",
                    "styleUrl": "./default-link.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "DefaultLinkModel",
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<!-- Label Host -->\n<ng-template #labelLayer></ng-template>\n\n<svg class=\"link-container\">\n  <!-- Link -->\n  <g [id]=\"id\">\n    <path\n      [attr.stroke-width]=\"width\"\n      [attr.stroke]=\"selectColor() | async\"\n      [attr.d]=\"selectPath() | async\"\n      class=\"default-link\"\n      (mouseleave)=\"setHovered(false)\"\n      (mouseenter)=\"setHovered()\"\n      [ngClass]=\"{ hovered: selectHovered() | async }\"\n    ></path>\n    <path\n      class=\"default-link\"\n      (mouseleave)=\"setHovered(false)\"\n      (mouseenter)=\"setHovered()\"\n      [attr.stroke-width]=\"20\"\n      [attr.stroke]=\"selectColor() | async\"\n      [attr.stroke-linecap]=\"'round'\"\n      [attr.data-linkid]=\"id\"\n      [attr.stroke-opacity]=\"(selectHovered() | async) ? '0.1' : '0'\"\n      [attr.d]=\"selectPath() | async\"\n    ></path>\n  </g>\n\n  <!-- Points -->\n  <g *ngFor=\"let point of getPoints(); trackBy: trackByPoints\" [id]=\"point.id\">\n    <circle\n      fill=\"currentColor\"\n      [attr.cx]=\"point.selectX() | async\"\n      [attr.cy]=\"point.selectY() | async\"\n      r=\"5\"\n      class=\"default-point\"\n      [ngClass]=\"{ hovered: point.selectHovered() | async }\"\n    />\n    <circle\n      [attr.data-pointid]=\"point.id\"\n      [attr.data-linkid]=\"id\"\n      (mouseleave)=\"point.setHovered(false); setHovered(false)\"\n      (mouseenter)=\"point.setHovered(); setHovered()\"\n      [attr.cx]=\"point.selectX() | async\"\n      [attr.cy]=\"point.selectY() | async\"\n      r=\"15\"\n      [attr.opacity]=\"0\"\n      [ngClass]=\"{ selected: point.selectSelected() | async }\"\n    />\n  </g>\n</svg>\n"
        },
        {
            "name": "DefaultLinkStoryComponent",
            "id": "component-DefaultLinkStoryComponent-1a2cab84ce4567ab5dcd0a370ec119db",
            "file": "libs/angular/stories/link/default/default.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "../demo-diagram.component.scss"
            ],
            "styles": [],
            "template": "<ngdx-diagram    class=\"demo-diagram\"\n    [model]=\"diagramModel\"\n  ></ngdx-diagram>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "diagramModel",
                    "type": "DiagramModel",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { DiagramEngine, DiagramModel, DefaultNodeModel } from 'ngx-diagrams';\n\n@Component({\n  selector: 'app-root',\n  template: `<ngdx-diagram\n    class=\"demo-diagram\"\n    [model]=\"diagramModel\"\n  ></ngdx-diagram>`,\n  styleUrls: ['../demo-diagram.component.scss'],\n})\nexport class DefaultLinkStoryComponent implements OnInit {\n  diagramModel: DiagramModel;\n\n  constructor(private diagramEngine: DiagramEngine) {}\n\n  ngOnInit() {\n    const nodesDefaultDimensions = { height: 200, width: 200 };\n    this.diagramEngine.registerDefaultFactories();\n\n    this.diagramModel = this.diagramEngine.createDiagram();\n\n    const node1 = new DefaultNodeModel();\n    node1.setCoords({ x: 500, y: 300 });\n    node1.setDimensions(nodesDefaultDimensions);\n    const outport1 = node1.addOutPort({ name: 'outport1' });\n\n    const node2 = new DefaultNodeModel();\n    node2.setCoords({ x: 1000, y: 0 });\n    node2.setDimensions(nodesDefaultDimensions);\n    const inport = node2.addInPort({ name: 'inport2' });\n\n    for (let index = 0; index < 2; index++) {\n      const nodeLoop = new DefaultNodeModel();\n      nodeLoop.setCoords({ x: 1000, y: 300 + index * 300 });\n      nodeLoop.setDimensions(nodesDefaultDimensions);\n      nodeLoop.addInPort({ name: `inport${index + 3}` });\n\n      this.diagramModel.addNode(nodeLoop);\n    }\n\n    const link = outport1.link(inport);\n    link.setLocked();\n\n    this.diagramModel.addAll(node1, node2, link);\n\n    this.diagramModel.getDiagramEngine().zoomToFit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".demo-diagram {\n  display: flex;\n  height: 100%;\n  min-height: 100vh;\n  background-color: #3c3c3c;\n  background-image: linear-gradient(\n      0deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    ),\n    linear-gradient(\n      90deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    );\n  background-size: 50px 50px;\n}\n",
                    "styleUrl": "../demo-diagram.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "DefaultNodeComponent",
            "id": "component-DefaultNodeComponent-48783ae7ac933b7f9da313dd86a734cc",
            "file": "libs/angular/stories/node/default/default.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "../demo-diagram.component.scss"
            ],
            "styles": [],
            "template": "<ngdx-diagram    class=\"demo-diagram\"\n    [model]=\"diagramModel\"\n  ></ngdx-diagram>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "diagramModel",
                    "type": "DiagramModel",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "e",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnChanges, OnInit, SimpleChanges } from '@angular/core';\nimport { DiagramEngine, DiagramModel, DefaultNodeModel } from 'ngx-diagrams';\n\n@Component({\n  selector: 'app-root',\n  template: `<ngdx-diagram\n    class=\"demo-diagram\"\n    [model]=\"diagramModel\"\n  ></ngdx-diagram>`,\n  styleUrls: ['../demo-diagram.component.scss'],\n})\nexport class DefaultNodeComponent implements OnInit, OnChanges {\n  diagramModel: DiagramModel;\n\n  constructor(private diagramEngine: DiagramEngine) {}\n\n  ngOnInit() {\n    const nodesDefaultDimensions = { height: 200, width: 200 };\n    this.diagramEngine.registerDefaultFactories();\n\n    this.diagramModel = this.diagramEngine.createDiagram();\n\n    const node1 = new DefaultNodeModel();\n    node1.setCoords({ x: 500, y: 300 });\n    node1.setDimensions(nodesDefaultDimensions);\n\n    this.diagramModel.addAll(node1);\n\n    this.diagramModel.getDiagramEngine().zoomToFit();\n  }\n\n  ngOnChanges(e: SimpleChanges) {\n    if (this.diagramModel) {\n      if (e.nodeHeight) {\n        Object.values(this.diagramModel.getNodes()).forEach((node) => {\n          node.setHeight(e.nodeHeight.currentValue);\n        });\n      }\n\n      if (e.nodeWidth) {\n        Object.values(this.diagramModel.getNodes()).forEach((node) => {\n          node.setWidth(e.nodeWidth.currentValue);\n        });\n      }\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".demo-diagram {\n  display: flex;\n  height: 100%;\n  min-height: 100vh;\n  background-color: #3c3c3c;\n  background-image: linear-gradient(\n      0deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    ),\n    linear-gradient(\n      90deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    );\n  background-size: 50px 50px;\n}\n",
                    "styleUrl": "../demo-diagram.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ]
        },
        {
            "name": "DefaultNodeComponent",
            "id": "component-DefaultNodeComponent-13704b475d7ec2ed5cade7598248ac1c-1",
            "file": "libs/angular/src/lib/defaults/components/default-node/default-node.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ngdx-default-node",
            "styleUrls": [
                "./default-node.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./default-node.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "portsLayer",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'portsLayer', {read: ViewContainerRef, static: true}"
                        }
                    ]
                },
                {
                    "name": "color",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "inheritance": {
                        "file": "DefaultNodeModel"
                    }
                },
                {
                    "name": "height$",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "inheritance": {
                        "file": "DefaultNodeModel"
                    }
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "DefaultNodeModel"
                    }
                },
                {
                    "name": "width$",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "inheritance": {
                        "file": "DefaultNodeModel"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "addInPort",
                    "args": [
                        {
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29,
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DefaultNodeModel"
                    }
                },
                {
                    "name": "addOutPort",
                    "args": [
                        {
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 52,
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DefaultNodeModel"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, ViewChild, ViewContainerRef } from '@angular/core';\nimport { DefaultNodeModel } from '../../models/default-node.model';\n\n@Component({\n  selector: 'ngdx-default-node',\n  templateUrl: './default-node.component.html',\n  styleUrls: ['./default-node.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DefaultNodeComponent extends DefaultNodeModel {\n  @ViewChild('portsLayer', { read: ViewContainerRef, static: true })\n  portsLayer: ViewContainerRef;\n\n  constructor() {\n    super({ type: 'ngdx-default-node' });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  &.selected {\n    .default-node {\n      background-color: white !important;\n      border-color: blue;\n    }\n  }\n\n  .default-node {\n    pointer-events: all;\n    width: 100%;\n    border-radius: 10px;\n    transition: all 0.3s ease-in-out;\n\n    cursor: auto;\n    .title {\n      padding: 10px;\n      text-align: center;\n      border-bottom: 1px solid blue;\n    }\n  }\n\n  .ports {\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column;\n  }\n}\n",
                    "styleUrl": "./default-node.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 12
            },
            "extends": "DefaultNodeModel",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "DefaultNodeComponent-1",
            "templateData": "<div\n  class=\"default-node\"\n  [ngStyle]=\"{\n    'height.px': height$ | async,\n    'width.px': width$ | async,\n    'background-color': color\n  }\"\n>\n  <div class=\"ports\">\n    <ng-template #portsLayer></ng-template>\n  </div>\n</div>\n"
        },
        {
            "name": "DefaultPortComponent",
            "id": "component-DefaultPortComponent-9817f7879dfa0a7cad0906090258f2fd",
            "file": "libs/angular/stories/port/default/default.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "../demo-diagram.component.scss"
            ],
            "styles": [],
            "template": "<ngdx-diagram    class=\"demo-diagram\"\n    [model]=\"diagramModel\"\n  ></ngdx-diagram>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "diagramModel",
                    "type": "DiagramModel",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { DiagramEngine, DiagramModel, DefaultNodeModel } from 'ngx-diagrams';\n\n@Component({\n  selector: 'app-root',\n  template: `<ngdx-diagram\n    class=\"demo-diagram\"\n    [model]=\"diagramModel\"\n  ></ngdx-diagram>`,\n  styleUrls: ['../demo-diagram.component.scss'],\n})\nexport class DefaultPortComponent implements OnInit {\n  diagramModel: DiagramModel;\n\n  constructor(private diagramEngine: DiagramEngine) {}\n\n  ngOnInit() {\n    const nodesDefaultDimensions = { height: 200, width: 200 };\n    this.diagramEngine.registerDefaultFactories();\n\n    this.diagramModel = this.diagramEngine.createDiagram();\n\n    const node1 = new DefaultNodeModel();\n    node1.setCoords({ x: 500, y: 300 });\n    node1.setDimensions(nodesDefaultDimensions);\n    node1.addInPort({ name: 'inport1' });\n    node1.addOutPort({ name: 'outport1' });\n\n    this.diagramModel.addAll(node1);\n\n    this.diagramModel.getDiagramEngine().zoomToFit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".demo-diagram {\n  display: flex;\n  height: 100%;\n  min-height: 100vh;\n  background-color: #3c3c3c;\n  background-image: linear-gradient(\n      0deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    ),\n    linear-gradient(\n      90deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    );\n  background-size: 50px 50px;\n}\n",
                    "styleUrl": "../demo-diagram.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "DefaultPortComponent",
            "id": "component-DefaultPortComponent-d258fcf85dd7648256339c15d1ca2599-1",
            "file": "libs/angular/src/lib/defaults/components/default-port/default-port.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ngdx-default-port",
            "styleUrls": [
                "./default-port.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./default-port.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "in",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "inheritance": {
                        "file": "DefaultPortModel"
                    }
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "inheritance": {
                        "file": "DefaultPortModel"
                    }
                },
                {
                    "name": "links",
                    "type": "HashMap<DefaultLinkModel>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "inheritance": {
                        "file": "DefaultPortModel"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "canLinkToPort",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 57,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DefaultPortModel"
                    }
                },
                {
                    "name": "createLinkModel",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 51,
                    "inheritance": {
                        "file": "DefaultPortModel"
                    }
                },
                {
                    "name": "link",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "LinkModel",
                    "typeParameters": [],
                    "line": 40,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DefaultPortModel"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { DefaultPortModel } from '../../models/default-port.model';\n\n@Component({\n  selector: 'ngdx-default-port',\n  templateUrl: './default-port.component.html',\n  styleUrls: ['./default-port.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DefaultPortComponent extends DefaultPortModel {\n  constructor() {\n    super({ type: 'ngdx-default-port' });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  position: relative;\n  width: 10px;\n  height: 10px;\n  border-radius: 60px;\n  border: 1px solid gray;\n  background-color: lightgray;\n  margin: 10px 0;\n\n  &:hover {\n    background-color: green;\n  }\n\n  &.out {\n    right: -195px;\n  }\n\n  &.in {\n    left: -5px;\n  }\n}\n",
                    "styleUrl": "./default-port.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 10
            },
            "extends": "DefaultPortModel",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "DefaultPortComponent-1",
            "templateData": "<div [ngClass]=\"in ? 'in' : 'out'\" draggable=\"false\"></div>\n"
        },
        {
            "name": "NgxDiagramComponent",
            "id": "component-NgxDiagramComponent-240c132f852cb9d8651204c452e97fd0",
            "file": "libs/angular/src/lib/containers/diagram/diagram.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ngdx-diagram",
            "styleUrls": [
                "diagram.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "diagram.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "allowCanvasTranslation",
                    "defaultValue": "true",
                    "line": 49
                },
                {
                    "name": "allowCanvasZoom",
                    "defaultValue": "true",
                    "line": 48
                },
                {
                    "name": "allowLooseLinks",
                    "defaultValue": "true",
                    "line": 51
                },
                {
                    "name": "inverseZoom",
                    "defaultValue": "true",
                    "line": 50
                },
                {
                    "name": "maxZoomIn",
                    "defaultValue": "null",
                    "line": 53,
                    "type": "number"
                },
                {
                    "name": "maxZoomOut",
                    "defaultValue": "null",
                    "line": 52,
                    "type": "number"
                },
                {
                    "name": "model",
                    "line": 47,
                    "type": "DiagramModel"
                },
                {
                    "name": "portMagneticRadius",
                    "defaultValue": "30",
                    "line": 54
                },
                {
                    "name": "smartRouting",
                    "defaultValue": "false",
                    "line": 55
                }
            ],
            "outputsClass": [
                {
                    "name": "actionStartedFiring",
                    "defaultValue": "new EventEmitter<BaseAction>()",
                    "line": 57,
                    "type": "EventEmitter"
                },
                {
                    "name": "actionStillFiring",
                    "defaultValue": "new EventEmitter<BaseAction>()",
                    "line": 58,
                    "type": "EventEmitter"
                },
                {
                    "name": "actionStoppedFiring",
                    "defaultValue": "new EventEmitter<BaseAction>()",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "action$",
                    "defaultValue": "new BehaviorSubject<BaseAction>(null)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "canvas",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'canvas', {read: ElementRef}"
                        }
                    ]
                },
                {
                    "name": "destroyed$",
                    "defaultValue": "new ReplaySubject<boolean>(1)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "links$",
                    "type": "Observable<EntityMap<LinkModel>>",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "linksLayer",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'linksLayer', {read: ViewContainerRef}"
                        }
                    ]
                },
                {
                    "name": "ngZone",
                    "type": "NgZone",
                    "optional": false,
                    "description": "",
                    "line": 82,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "nodes$",
                    "type": "Observable<EntityMap<NodeModel>>",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "nodesLayer",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'nodesLayer', {read: ViewContainerRef}"
                        }
                    ]
                },
                {
                    "name": "nodesRendered$",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        113
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "createMouseListeners",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 627,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "fireAction",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "description": "<p>fire the action registered and notify subscribers</p>\n"
                },
                {
                    "name": "getLinksLayer",
                    "args": [],
                    "optional": false,
                    "returnType": "HTMLDivElement",
                    "typeParameters": [],
                    "line": 623,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "getMouseElement",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 142,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNodesLayer",
                    "args": [],
                    "optional": false,
                    "returnType": "HTMLDivElement",
                    "typeParameters": [],
                    "line": 619,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "initLinks",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 572,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "initNodes",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 550,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "initSubs",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 606,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97
                },
                {
                    "name": "onMouseDown",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 419,
                    "decorators": [
                        {
                            "name": "OutsideZone"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMouseMove",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 306,
                    "description": "",
                    "decorators": [
                        {
                            "name": "OutsideZone"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 9148,
                                "end": 9153,
                                "flags": 0,
                                "escapedText": "event"
                            },
                            "type": "MouseEvent",
                            "tagName": {
                                "pos": 9142,
                                "end": 9147,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>MouseEvent</p>\n"
                        }
                    ]
                },
                {
                    "name": "onMouseUp",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 192,
                    "decorators": [
                        {
                            "name": "OutsideZone"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMouseWheel",
                    "args": [
                        {
                            "name": "event",
                            "type": "WheelEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 485,
                    "decorators": [
                        {
                            "name": "OutsideZone"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "WheelEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectAction",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 129
                },
                {
                    "name": "setLayerStyles",
                    "args": [
                        {
                            "name": "x",
                            "type": "number"
                        },
                        {
                            "name": "y",
                            "type": "number"
                        },
                        {
                            "name": "zoom",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 539,
                    "decorators": [
                        {
                            "name": "OutsideZone"
                        }
                    ],
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "x",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "y",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "zoom",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "shouldDrawSelectionBox",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 133
                },
                {
                    "name": "startFiringAction",
                    "args": [
                        {
                            "name": "action",
                            "type": "BaseAction"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "description": "<p>Register the new action, pre firing and notify subscribers</p>\n",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "BaseAction",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "stopFiringAction",
                    "args": [
                        {
                            "name": "shouldSkipEvent",
                            "type": "boolean",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "description": "<p>Unregister the action, post firing and notify subscribers</p>\n",
                    "jsdoctags": [
                        {
                            "name": "shouldSkipEvent",
                            "type": "boolean",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { DOCUMENT } from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  Renderer2,\n  ViewChild,\n  ViewContainerRef\n} from '@angular/core';\nimport { BehaviorSubject, combineLatest, fromEvent, merge, Observable, ReplaySubject } from 'rxjs';\nimport { filter, take, takeUntil, tap } from 'rxjs/operators';\nimport {\n  BaseAction,\n  BaseModel,\n  Coords,\n  DiagramModel,\n  EntityMap,\n  InvalidLinkDestroyed,\n  LinkCreatedAction,\n  LinkModel,\n  LooseLinkDestroyed,\n  MoveCanvasAction,\n  MoveItemsAction,\n  NodeModel,\n  PointModel,\n  PortModel,\n  SelectingAction\n} from '@ngx-diagrams/core';\nimport { ZonedClass, OutsideZone } from '../../utils/decorators';\nimport { FactoriesService } from '../../services/factories.service';\n\n@Component({\n  selector: 'ngdx-diagram',\n  templateUrl: 'diagram.component.html',\n  styleUrls: ['diagram.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxDiagramComponent implements AfterViewInit, OnDestroy, ZonedClass {\n  @Input('model') diagramModel: DiagramModel;\n  @Input() allowCanvasZoom = true;\n  @Input() allowCanvasTranslation = true;\n  @Input() inverseZoom = true;\n  @Input() allowLooseLinks = true;\n  @Input() maxZoomOut: number = null;\n  @Input() maxZoomIn: number = null;\n  @Input() portMagneticRadius = 30;\n  @Input() smartRouting = false;\n\n  @Output() actionStartedFiring = new EventEmitter<BaseAction>();\n  @Output() actionStillFiring = new EventEmitter<BaseAction>();\n  @Output() actionStoppedFiring = new EventEmitter<BaseAction>();\n\n  @ViewChild('nodesLayer', { read: ViewContainerRef })\n  nodesLayer: ViewContainerRef;\n\n  @ViewChild('linksLayer', { read: ViewContainerRef })\n  linksLayer: ViewContainerRef;\n\n  @ViewChild('canvas', { read: ElementRef })\n  canvas: ElementRef;\n\n  protected nodes$: Observable<EntityMap<NodeModel>>;\n  protected links$: Observable<EntityMap<LinkModel>>;\n  protected action$ = new BehaviorSubject<BaseAction>(null);\n  protected nodesRendered$ = new BehaviorSubject<boolean>(false);\n  protected destroyed$ = new ReplaySubject<boolean>(1);\n\n  get host(): HTMLElement {\n    return this.elRef.nativeElement;\n  }\n\n  constructor(\n    @Inject(DOCUMENT) protected document: Document,\n    public ngZone: NgZone,\n    protected renderer: Renderer2,\n    protected factoriesService: FactoriesService,\n    protected cdRef: ChangeDetectorRef,\n    protected elRef: ElementRef<HTMLElement>\n  ) {}\n\n  ngAfterViewInit() {\n    if (this.diagramModel) {\n      this.initNodes();\n      this.initLinks();\n      this.initSubs();\n    }\n  }\n\n  ngOnDestroy() {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n\n  /**\n   * fire the action registered and notify subscribers\n   */\n  fireAction() {\n    if (this.action$.value) {\n      this.actionStillFiring.emit(this.action$.value);\n    }\n  }\n\n  /**\n   * Unregister the action, post firing and notify subscribers\n   */\n  stopFiringAction(shouldSkipEvent?: boolean) {\n    if (!shouldSkipEvent) {\n      this.actionStoppedFiring.emit(this.action$.value);\n    }\n    this.action$.next(null);\n  }\n\n  /**\n   * Register the new action, pre firing and notify subscribers\n   */\n  startFiringAction(action: BaseAction) {\n    this.action$.next(action);\n    this.actionStartedFiring.emit(action);\n  }\n\n  selectAction() {\n    return this.action$ as BehaviorSubject<SelectingAction>;\n  }\n\n  shouldDrawSelectionBox() {\n    const action = this.action$.getValue();\n    if (action instanceof SelectingAction) {\n      action.getBoxDimensions();\n      return true;\n    }\n    return false;\n  }\n\n  getMouseElement(event: MouseEvent): { model: BaseModel; element: Element } {\n    const target = event.target as Element;\n\n    // is it a port?\n    let element = target.closest('[data-portid]');\n    if (element) {\n      // get the relevant node and return the port.\n      const nodeEl = target.closest('[data-nodeid]');\n      return {\n        model: this.diagramModel\n          .getNode(nodeEl.getAttribute('data-nodeid'))\n          .getPort(element.getAttribute('data-portid')),\n        element\n      };\n    }\n\n    // look for a point\n    element = target.closest('[data-pointid]');\n    if (element) {\n      return {\n        model: this.diagramModel\n          .getLink(element.getAttribute('data-linkid'))\n          .getPointModel(element.getAttribute('data-pointid')),\n        element\n      };\n    }\n\n    // look for a link\n    element = target.closest('[data-linkid]');\n    if (element) {\n      return {\n        model: this.diagramModel.getLink(element.getAttribute('data-linkid')),\n        element\n      };\n    }\n\n    // a node maybe\n    element = target.closest('[data-nodeid]');\n    if (element) {\n      return {\n        model: this.diagramModel.getNode(element.getAttribute('data-nodeid')),\n        element\n      };\n    }\n\n    // just the canvas\n    return null;\n  }\n\n  @OutsideZone\n  onMouseUp(event: MouseEvent) {\n    const diagramEngine = this.diagramModel.getDiagramEngine();\n    const action = this.action$.getValue();\n    // are we going to connect a link to something?\n    if (action instanceof MoveItemsAction) {\n      const element = this.getMouseElement(event);\n      action.selectionModels.forEach((model) => {\n        // only care about points connecting to things\n        if (!model || !(model.model instanceof PointModel)) {\n          return;\n        }\n\n        let el: BaseModel;\n        if (model.magnet) {\n          el = model.magnet;\n        } else if (element && element.model) {\n          el = element.model;\n        }\n\n        if (el instanceof PortModel && !diagramEngine.isModelLocked(el)) {\n          const link = model.model.getLink();\n          if (link.getTargetPort() !== null) {\n            // if this was a valid link already and we are adding a node in the middle, create 2 links from the original\n            if (link.getTargetPort() !== el && link.getSourcePort() !== el) {\n              const targetPort = link.getTargetPort();\n              const newLink = link.clone({});\n              newLink.setSourcePort(el);\n              newLink.setTargetPort(targetPort);\n              link.setTargetPort(el);\n              targetPort.removeLink(link);\n              newLink.removePointsBefore(newLink.getPoints()[link.getPointIndex(model.model)]);\n              link.removePointsAfter(model.model);\n              diagramEngine.getDiagramModel().addLink(newLink);\n              // if we are connecting to the same target or source, destroy tweener points\n            } else if (link.getTargetPort() === el) {\n              link.removePointsAfter(model.model);\n            } else if (link.getSourcePort() === el) {\n              link.removePointsBefore(model.model);\n            }\n          } else {\n            link.setTargetPort(el);\n            const targetPort = link.getTargetPort();\n            const srcPort = link.getSourcePort();\n\n            if (targetPort.id !== srcPort.id && srcPort.canLinkToPort(targetPort)) {\n              // link is valid, fire the event\n              this.startFiringAction(new LinkCreatedAction(event.clientX, event.clientY, link));\n            }\n          }\n        }\n\n        // reset current magent\n        model.magnet = undefined;\n      });\n\n      // check for / destroy any loose links in any models which have been moved\n      if (!this.allowLooseLinks) {\n        action.selectionModels.forEach((model) => {\n          // only care about points connecting to things\n          if (!model || !(model.model instanceof PointModel)) {\n            return;\n          }\n\n          const selectedPoint: PointModel = model.model;\n          const link: LinkModel = selectedPoint.getLink();\n          if (link.getSourcePort() === null || link.getTargetPort() === null) {\n            link.destroy();\n            this.startFiringAction(new LooseLinkDestroyed(event.clientX, event.clientY, link));\n          }\n        });\n      }\n\n      // destroy any invalid links\n      action.selectionModels.forEach((model) => {\n        // only care about points connecting to things\n        if (!model || !(model.model instanceof PointModel)) {\n          return;\n        }\n\n        const link: LinkModel = model.model.getLink();\n        const sourcePort: PortModel = link.getSourcePort();\n        const targetPort: PortModel = link.getTargetPort();\n\n        if (sourcePort !== null && targetPort !== null) {\n          if (!sourcePort.canLinkToPort(targetPort)) {\n            // link not allowed\n            link.destroy();\n            this.startFiringAction(new InvalidLinkDestroyed(event.clientX, event.clientY, link));\n          } else if (\n            targetPort\n              .getLinksArray()\n              .some(\n                (link) => link !== link && (link.getSourcePort() === sourcePort || link.getTargetPort() === sourcePort)\n              )\n          ) {\n            // link is a duplicate\n            link.destroy();\n          }\n        }\n      });\n\n      this.stopFiringAction();\n    } else {\n      this.stopFiringAction();\n    }\n\n    this.action$.next(null);\n  }\n\n  /**\n   * @description Mouse Move Event Handler\n   * @param event MouseEvent\n   */\n  @OutsideZone\n  onMouseMove(event: MouseEvent) {\n    const action = this.action$.getValue();\n\n    if (action === null || action === undefined) {\n      return;\n    }\n\n    if (action instanceof SelectingAction) {\n      const relative = this.diagramModel.getDiagramEngine().getRelativePoint(event.clientX, event.clientY);\n\n      this.diagramModel.getNodes().forEach((node) => {\n        if ((action as SelectingAction).containsElement(node.getCoords(), this.diagramModel)) {\n          node.setSelected();\n        } else {\n          node.setSelected(false);\n        }\n      });\n\n      this.diagramModel.getLinks().forEach((link) => {\n        let allSelected = true;\n\n        link.getPoints().forEach((point) => {\n          if ((action as SelectingAction).containsElement(point.getCoords(), this.diagramModel)) {\n            point.setSelected();\n          } else {\n            point.setSelected(false);\n            allSelected = false;\n          }\n        });\n\n        if (allSelected) {\n          link.setSelected();\n        }\n      });\n\n      action.mouseX2 = relative.x;\n      action.mouseY2 = relative.y;\n\n      this.fireAction();\n      this.action$.next(action);\n      return;\n    } else if (action instanceof MoveItemsAction) {\n      const coords: Coords = {\n        x: event.clientX - action.mouseX,\n        y: event.clientY - action.mouseY\n      };\n      const amountZoom = this.diagramModel.getZoomLevel() / 100;\n      action.selectionModels.forEach((selectionModel) => {\n        // reset all previous magnets if any\n        selectionModel.magnet = undefined;\n\n        // in this case we need to also work out the relative grid position\n        if (\n          selectionModel.model instanceof NodeModel ||\n          (selectionModel.model instanceof PointModel && !selectionModel.model.isConnectedToPort())\n        ) {\n          const newCoords = {\n            x: selectionModel.initialX + coords.x / amountZoom,\n            y: selectionModel.initialY + coords.y / amountZoom\n          };\n          const gridRelativeCoords = this.diagramModel.getGridPosition(newCoords);\n\n          // magnetic inputs handling\n          if (selectionModel.model instanceof PointModel && this.portMagneticRadius) {\n            // get all ports on canvas, check distances, if smaller then defined radius, magnetize!\n            const portsMap = this.diagramModel.getAllPorts({ filter: (p) => p.getMagnetic() });\n\n            for (const port of portsMap.values()) {\n              const portCoords = port.getCoords();\n              const distance = Math.hypot(portCoords.x - newCoords.x, portCoords.y - newCoords.y);\n              if (distance <= this.portMagneticRadius) {\n                const portCenter = this.diagramModel.getDiagramEngine().getPortCenter(port);\n                selectionModel.model.setCoords(portCenter);\n                selectionModel.magnet = port;\n                return;\n              }\n            }\n          }\n\n          selectionModel.model.setCoords(gridRelativeCoords);\n\n          if (selectionModel.model instanceof NodeModel) {\n            // update port coordinates as well\n            selectionModel.model.getPorts().forEach((port) => {\n              const portCoords = this.diagramModel.getDiagramEngine().getPortCoords(port);\n              port.updateCoords(portCoords);\n            });\n          }\n        } else if (selectionModel.model instanceof PointModel) {\n          // will only run here when trying to create a point on an existing link\n          // we want points that are connected to ports, to not necessarily snap to grid\n          // this stuff needs to be pixel perfect, dont touch it\n          const newCoords = this.diagramModel.getGridPosition({ x: coords.x / amountZoom, y: coords.y / amountZoom });\n          selectionModel.model.setCoords({\n            x: selectionModel.initialX + newCoords.x,\n            y: selectionModel.initialY + newCoords.y\n          });\n        }\n      });\n\n      this.fireAction();\n    } else if (action instanceof MoveCanvasAction) {\n      if (this.allowCanvasTranslation) {\n        this.diagramModel.setOffset(\n          action.initialOffsetX + (event.clientX - action.mouseX),\n          action.initialOffsetY + (event.clientY - action.mouseY)\n        );\n        this.fireAction();\n      }\n    }\n  }\n\n  @OutsideZone\n  onMouseDown(event: MouseEvent) {\n    if (event.button === 3) {\n      return;\n    }\n\n    const selectedModel = this.getMouseElement(event);\n\n    // canvas selected\n    if (selectedModel === null) {\n      // multiple selection\n      if (event.shiftKey) {\n        // initiate multiple selection selector\n        const relative = this.diagramModel.getDiagramEngine().getRelativePoint(event.clientX, event.clientY);\n        this.startFiringAction(new SelectingAction(relative.x, relative.y));\n      } else {\n        // drag canvas action\n        this.diagramModel.clearSelection();\n        this.startFiringAction(new MoveCanvasAction(event.clientX, event.clientY, this.diagramModel));\n      }\n    } else if (selectedModel.model instanceof PortModel) {\n      // its a port element, we want to drag a link\n      if (!selectedModel.model.isLocked() && selectedModel.model.getCanCreateLinks()) {\n        const relative = this.diagramModel.getDiagramEngine().getRelativeMousePoint(event);\n        const sourcePort = selectedModel.model;\n        const link = sourcePort.createLinkModel();\n\n        // if we don't have a link then we have reached the max amount, or we cannot create new ones\n        if (link) {\n          link.setSourcePort(sourcePort);\n          link.removeMiddlePoints();\n          if (link.getSourcePort() !== sourcePort) {\n            link.setSourcePort(sourcePort);\n          }\n          link.setTargetPort(null);\n\n          link.getFirstPoint().setCoords(relative);\n          link.getLastPoint().setCoords(relative);\n\n          this.diagramModel.clearSelection();\n          link.getLastPoint().setSelected();\n          this.diagramModel.addLink(link);\n\n          this.startFiringAction(\n            new MoveItemsAction(event.clientX, event.clientY, this.diagramModel.getDiagramEngine())\n          );\n        }\n      } else {\n        this.diagramModel.clearSelection();\n      }\n    } else if (selectedModel.model instanceof PointModel && selectedModel.model.isConnectedToPort()) {\n      this.diagramModel.clearSelection();\n    } else {\n      // its some other element, probably want to move it\n      if (!event.shiftKey && !selectedModel.model.getSelected()) {\n        this.diagramModel.clearSelection();\n      }\n\n      selectedModel.model.setSelected();\n\n      this.startFiringAction(new MoveItemsAction(event.clientX, event.clientY, this.diagramModel.getDiagramEngine()));\n    }\n\n    this.createMouseListeners();\n  }\n\n  @OutsideZone\n  onMouseWheel(event: WheelEvent) {\n    if (!this.allowCanvasZoom) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n    const currentZoomLevel = this.diagramModel.getZoomLevel();\n\n    const oldZoomFactor = currentZoomLevel / 100;\n    let scrollDelta = this.inverseZoom ? -event.deltaY : event.deltaY;\n\n    // check if it is pinch gesture\n    if (event.ctrlKey && scrollDelta % 1 !== 0) {\n      /* Chrome and Firefox sends wheel event with deltaY that\n\t\t\t\t\t\t have fractional part, also `ctrlKey` prop of the event is true\n\t\t\t\t\t\t though ctrl isn't pressed\n\t\t\t\t\t*/\n      scrollDelta /= 3;\n    } else {\n      scrollDelta /= 60;\n    }\n\n    if (currentZoomLevel + scrollDelta > 10) {\n      const newZoomLvl = currentZoomLevel + scrollDelta;\n      this.diagramModel.setZoomLevel(newZoomLvl);\n    }\n\n    const updatedZoomLvl = this.diagramModel.getZoomLevel();\n    const zoomFactor = updatedZoomLvl / 100;\n\n    const boundingRect = (event.currentTarget as Element).getBoundingClientRect();\n    const clientWidth = boundingRect.width;\n    const clientHeight = boundingRect.height;\n\n    // compute difference between rect before and after scroll\n    const widthDiff = clientWidth * zoomFactor - clientWidth * oldZoomFactor;\n    const heightDiff = clientHeight * zoomFactor - clientHeight * oldZoomFactor;\n\n    // compute mouse coords relative to canvas\n    const clientX = event.clientX - boundingRect.left;\n    const clientY = event.clientY - boundingRect.top;\n\n    // compute width and height increment factor\n    const xFactor = (clientX - this.diagramModel.getOffsetX()) / oldZoomFactor / clientWidth;\n    const yFactor = (clientY - this.diagramModel.getOffsetY()) / oldZoomFactor / clientHeight;\n\n    const updatedXOffset = this.diagramModel.getOffsetX() - widthDiff * xFactor;\n    const updatedYOffset = this.diagramModel.getOffsetY() - heightDiff * yFactor;\n\n    this.diagramModel.setOffset(updatedXOffset, updatedYOffset);\n  }\n\n  @OutsideZone\n  protected setLayerStyles(x: number, y: number, zoom: number): void {\n    const nodesLayer = this.getNodesLayer();\n    const linksLayer = this.getLinksLayer();\n\n    const style = 'transform';\n    const value = `translate(${x}px, ${y}px) scale(${zoom / 100.0})`;\n\n    this.renderer.setStyle(nodesLayer, style, value);\n    this.renderer.setStyle(linksLayer, style, value);\n  }\n\n  protected initNodes() {\n    this.nodes$ = this.diagramModel.selectNodes();\n\n    this.diagramModel.getDiagramEngine().setCanvas(this.canvas.nativeElement);\n\n    this.diagramModel.setMaxZoomIn(this.maxZoomIn);\n    this.diagramModel.setMaxZoomOut(this.maxZoomOut);\n\n    this.nodes$.pipe(takeUntil(this.destroyed$)).subscribe((nodes) => {\n      this.nodesRendered$.next(false);\n\n      for (const node of nodes.values()) {\n        if (!node.getPainted()) {\n          this.factoriesService.generateWidgetForNode(node, this.nodesLayer);\n          this.cdRef.detectChanges();\n        }\n      }\n\n      this.nodesRendered$.next(true);\n    });\n  }\n\n  protected initLinks() {\n    this.links$ = this.diagramModel.selectLinks();\n\n    combineLatest([this.nodesRendered$, this.links$])\n      .pipe(\n        filter(([nodesRendered]) => !!nodesRendered),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe(([, links]) => {\n        for (const link of links.values()) {\n          if (!link.getPainted() && link.getSourcePort().getPainted()) {\n            if (link.getSourcePort() !== null) {\n              const portCenter = this.diagramModel.getDiagramEngine().getPortCenter(link.getSourcePort());\n              link.getPoints()[0].setCoords(portCenter);\n\n              const portCoords = this.diagramModel.getDiagramEngine().getPortCoords(link.getSourcePort());\n              link.getSourcePort().updateCoords(portCoords);\n            }\n\n            if (link.getTargetPort() !== null) {\n              const portCenter = this.diagramModel.getDiagramEngine().getPortCenter(link.getTargetPort());\n              link.getPoints()[link.getPoints().length - 1].setCoords(portCenter);\n\n              const portCoords = this.diagramModel.getDiagramEngine().getPortCoords(link.getTargetPort());\n              link.getTargetPort().updateCoords(portCoords);\n            }\n\n            this.factoriesService.generateWidgetForLink(link, this.linksLayer);\n            this.cdRef.detectChanges();\n          }\n        }\n      });\n  }\n\n  protected initSubs() {\n    combineLatest([\n      this.diagramModel.selectOffsetX(),\n      this.diagramModel.selectOffsetY(),\n      this.diagramModel.selectZoomLevel()\n    ])\n      .pipe(\n        tap(([x, y, zoom]) => this.setLayerStyles(x, y, zoom)),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe();\n  }\n\n  protected getNodesLayer(): HTMLDivElement {\n    return this.host.querySelector('.ngdx-nodes-layer');\n  }\n\n  protected getLinksLayer(): HTMLDivElement {\n    return this.host.querySelector('.ngdx-links-layer');\n  }\n\n  protected createMouseListeners() {\n    const mouseUp$ = fromEvent<MouseEvent>(this.document, 'mouseup').pipe(\n      tap((e) => this.onMouseUp(e)),\n      take(1)\n    );\n\n    const mouseMove$ = fromEvent<MouseEvent>(this.document, 'mousemove').pipe(\n      tap((e) => this.onMouseMove(e)),\n      takeUntil(mouseUp$)\n    );\n\n    merge(mouseMove$, mouseUp$).subscribe();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".ngdx-diagram {\n  position: relative;\n  flex-grow: 1;\n  display: flex;\n  cursor: move;\n  overflow: hidden;\n\n  .selector {\n    position: absolute;\n    background-color: rgba(0, 192, 255, 0.2);\n    border: solid 2px rgb(0, 192, 255);\n  }\n\n  .ngdx-nodes-layer {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    transform-origin: 0 0;\n    overflow: visible !important;\n    pointer-events: none;\n    z-index: 150;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n  }\n\n  .ngdx-links-layer {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    transform-origin: 0 0;\n    overflow: visible !important;\n    pointer-events: none;\n    z-index: 100;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n  }\n}\n",
                    "styleUrl": "diagram.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "document",
                        "type": "Document"
                    },
                    {
                        "name": "ngZone",
                        "type": "NgZone"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "factoriesService",
                        "type": "FactoriesService"
                    },
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "elRef",
                        "type": "ElementRef<HTMLElement>"
                    }
                ],
                "line": 78,
                "jsdoctags": [
                    {
                        "name": "document",
                        "type": "Document",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ngZone",
                        "type": "NgZone",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "factoriesService",
                        "type": "FactoriesService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "elRef",
                        "type": "ElementRef<HTMLElement>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit",
                "OnDestroy",
                "ZonedClass"
            ],
            "accessors": {
                "host": {
                    "name": "host",
                    "getSignature": {
                        "name": "host",
                        "type": "",
                        "returnType": "HTMLElement",
                        "line": 76
                    }
                }
            },
            "templateData": "<div class=\"ngdx-diagram\" #canvas (mousedown)=\"onMouseDown($event)\" (wheel)=\"onMouseWheel($event)\">\n  <!-- Nodes Layer -->\n  <div class=\"ngdx-nodes-layer\">\n    <ng-template #nodesLayer></ng-template>\n  </div>\n\n  <!-- Links Layer -->\n  <div class=\"ngdx-links-layer\">\n    <ng-template #linksLayer></ng-template>\n  </div>\n\n  <!-- Selection Box -->\n  <div\n    *ngIf=\"shouldDrawSelectionBox() && selectAction() | async as action\"\n    class=\"selector\"\n    [ngStyle]=\"{\n      top: action.dimensions.top + 'px',\n      left: action.dimensions.left + 'px',\n      width: action.dimensions.width + 'px',\n      height: action.dimensions.height + 'px'\n    }\"\n  ></div>\n</div>\n"
        },
        {
            "name": "PerformanceExampleStoryComponent",
            "id": "component-PerformanceExampleStoryComponent-d8f10b04025790aaea44c6a4bf9b9cdc",
            "file": "libs/angular/stories/examples/performance/performance.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "../demo-diagram.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"action-bar\">\n\t<button (click)=\"resetDiagram()\" *ngIf=\"isResseted === false\">Reset</button\n\t><button (click)=\"createDiagram()\" *ngIf=\"isResseted\">Recreate</button>Rendered {{ numberOfNodes }} nodes and links in\n\t{{ initialRenderTimer }} ms\n</div>\n<ngdx-diagram class=\"demo-diagram\" [model]=\"diagramModel\"></ngdx-diagram>\n\t",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "serialized",
                    "defaultValue": "new EventEmitter()",
                    "line": 23,
                    "type": "EventEmitter<SerializedDiagramModel>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "diagramModel",
                    "type": "DiagramModel",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "initialRenderTimer",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "isCreated",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "isResseted",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "numberOfNodes",
                    "defaultValue": "200",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "clearGraph",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75
                },
                {
                    "name": "createDiagram",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36
                },
                {
                    "name": "createNodes",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                },
                {
                    "name": "recreateDiagram",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45
                },
                {
                    "name": "resetDiagram",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { DiagramEngine, DiagramModel, DefaultNodeModel, SerializedDiagramModel } from 'ngx-diagrams';\n\n@Component({\n\tselector: 'app-root',\n\ttemplate: `\n\t\t<div class=\"action-bar\">\n\t\t\t<button (click)=\"resetDiagram()\" *ngIf=\"isResseted === false\">Reset</button\n\t\t\t><button (click)=\"createDiagram()\" *ngIf=\"isResseted\">Recreate</button>Rendered {{ numberOfNodes }} nodes and links in\n\t\t\t{{ initialRenderTimer }} ms\n\t\t</div>\n\t\t<ngdx-diagram class=\"demo-diagram\" [model]=\"diagramModel\"></ngdx-diagram>\n\t`,\n\tstyleUrls: ['../demo-diagram.component.scss'],\n})\nexport class PerformanceExampleStoryComponent implements OnInit {\n\tdiagramModel: DiagramModel;\n\tinitialRenderTimer: number;\n\tisResseted = false;\n\tisCreated = true;\n\tnumberOfNodes = 200;\n\n\t@Output() serialized: EventEmitter<SerializedDiagramModel> = new EventEmitter();\n\n\tconstructor(private diagramEngine: DiagramEngine) {}\n\n\tngOnInit() {\n\t\tthis.diagramEngine.registerDefaultFactories();\n\t\tthis.diagramModel = this.diagramEngine.createDiagram();\n\n\t\tthis.createNodes();\n\n\t\tthis.diagramEngine.zoomToFit();\n\t}\n\n\tcreateDiagram() {\n\t\tthis.createNodes();\n\t}\n\n\tresetDiagram() {\n\t\tthis.diagramModel.reset();\n\t\tthis.isResseted = true;\n\t}\n\n\trecreateDiagram() {\n\t\tthis.createNodes();\n\t}\n\n\tcreateNodes() {\n\t\tthis.isResseted = false;\n\t\tconst startTime = performance.now();\n\t\tconst nodesDefaultDimensions = { height: 200, width: 200 };\n\n\t\tfor (let index = 0; index < this.numberOfNodes; index++) {\n\t\t\tconst nodeLoop = new DefaultNodeModel({ id: index.toString() });\n\t\t\tconst row = index % 10;\n\t\t\tconst col = Math.floor(index / 10);\n\t\t\tnodeLoop.setCoords({ x: 1000 * row, y: 300 * col });\n\t\t\tnodeLoop.setDimensions(nodesDefaultDimensions);\n\t\t\tnodeLoop.addInPort({ name: `inport${index}`, id: `inport${index}` });\n\t\t\tconst outport = nodeLoop.addOutPort({ name: `outport${index}`, id: `outport${index}` });\n\n\t\t\tif (index > 0) {\n\t\t\t\tconst link = outport.link(this.diagramModel.getNode(`${index - 1}`).getPort(`inport${index - 1}`));\n\t\t\t\tthis.diagramModel.addLink(link);\n\t\t\t}\n\n\t\t\tthis.diagramModel.addNode(nodeLoop);\n\t\t}\n\n\t\tconst endTime = performance.now();\n\t\tthis.initialRenderTimer = endTime - startTime;\n\t}\n\n\tclearGraph() {\n\t\tthis.diagramModel.reset();\n\t}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".demo-diagram {\n  display: flex;\n  height: 100%;\n  min-height: 100vh;\n  background-color: #3c3c3c;\n  background-image: linear-gradient(\n      0deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    ),\n    linear-gradient(\n      90deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    );\n  background-size: 50px 50px;\n}\n\n.action-bar {\n  position: relative;\n  width: 100%;\n  height: 40px;\n  z-index: 2000;\n  background-color: white;\n  display: flex;\n  align-items: center;\n  * {\n    margin: 0 10px;\n  }\n}\n",
                    "styleUrl": "../demo-diagram.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "SerializationExampleStoryComponent",
            "id": "component-SerializationExampleStoryComponent-921b233ef670cfea5cf2cf4d397faa29",
            "file": "libs/angular/stories/examples/serialization/serialization.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "../demo-diagram.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"action-bar\">\n  <button (click)=\"serialize()\">Serialize Diagram Model</button>\n  <button (click)=\"clearGraph()\">Clear Graph</button>\n</div>\n<ngdx-diagram class=\"demo-diagram\" [model]=\"diagramModel\"></ngdx-diagram>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "serialized",
                    "defaultValue": "new EventEmitter()",
                    "line": 23,
                    "type": "EventEmitter<SerializedDiagramModel>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "diagramModel",
                    "type": "DiagramModel",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "clearGraph",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport {\n  DiagramEngine,\n  DiagramModel,\n  DefaultNodeModel,\n  SerializedDiagramModel,\n} from 'ngx-diagrams';\n\n@Component({\n  selector: 'app-root',\n  template: `\n    <div class=\"action-bar\">\n      <button (click)=\"serialize()\">Serialize Diagram Model</button>\n      <button (click)=\"clearGraph()\">Clear Graph</button>\n    </div>\n    <ngdx-diagram class=\"demo-diagram\" [model]=\"diagramModel\"></ngdx-diagram>\n  `,\n  styleUrls: ['../demo-diagram.component.scss'],\n})\nexport class SerializationExampleStoryComponent implements OnInit {\n  diagramModel: DiagramModel;\n\n  @Output() serialized: EventEmitter<\n    SerializedDiagramModel\n  > = new EventEmitter();\n\n  constructor(private diagramEngine: DiagramEngine) {}\n\n  ngOnInit() {\n    const nodesDefaultDimensions = { height: 200, width: 200 };\n    this.diagramEngine.registerDefaultFactories();\n\n    this.diagramModel = this.diagramEngine.createDiagram();\n\n    const node1 = new DefaultNodeModel();\n    node1.setCoords({ x: 500, y: 300 });\n    node1.setDimensions(nodesDefaultDimensions);\n    const outport1 = node1.addOutPort({ name: 'outport1' });\n\n    const node2 = new DefaultNodeModel();\n    node2.setCoords({ x: 1000, y: 0 });\n    node2.setDimensions(nodesDefaultDimensions);\n    const inport = node2.addInPort({ name: 'inport2' });\n\n    for (let index = 0; index < 2; index++) {\n      const nodeLoop = new DefaultNodeModel();\n      nodeLoop.setCoords({ x: 1000, y: 300 + index * 300 });\n      nodeLoop.setDimensions(nodesDefaultDimensions);\n      nodeLoop.addInPort({ name: `inport${index + 3}` });\n\n      this.diagramModel.addNode(nodeLoop);\n    }\n\n    const link = outport1.link(inport);\n    link.setLocked();\n\n    this.diagramModel.addAll(node1, node2, link);\n\n    this.diagramModel.getDiagramEngine().zoomToFit();\n  }\n\n  serialize() {\n    const serializedModel = this.diagramModel.serialize();\n    this.serialized.emit(serializedModel);\n  }\n\n  clearGraph() {\n    this.diagramModel.reset();\n  }\n\n  // deserialize() {\n  // \tconst JSONModel = {\n  // \t\tid: 'ab04adcc-ebce-41a1-9c8f-de914cb3186c',\n  // \t\tlocked: false,\n  // \t\tnodes: [\n  // \t\t\t{\n  // \t\t\t\tid: 'e50e8d29-b90c-4907-8f7a-a82f8fbc7051',\n  // \t\t\t\tlocked: false,\n  // \t\t\t\ttype: 'default',\n  // \t\t\t\tnodeType: 'default',\n  // \t\t\t\textras: {},\n  // \t\t\t\twidth: 200,\n  // \t\t\t\theight: 200,\n  // \t\t\t\tx: 1000,\n  // \t\t\t\ty: 300,\n  // \t\t\t\tports: [\n  // \t\t\t\t\t{\n  // \t\t\t\t\t\tid: '57ba33ad-b539-4491-9358-056db9cfb474',\n  // \t\t\t\t\t\tlocked: false,\n  // \t\t\t\t\t\ttype: 'default',\n  // \t\t\t\t\t\tname: 'inport3',\n  // \t\t\t\t\t\tlinkType: 'default',\n  // \t\t\t\t\t\tmaximumLinks: null,\n  // \t\t\t\t\t\tmagnetic: true,\n  // \t\t\t\t\t\theight: 12,\n  // \t\t\t\t\t\twidth: 12,\n  // \t\t\t\t\t\tcanCreateLinks: false,\n  // \t\t\t\t\t\tx: 995,\n  // \t\t\t\t\t\ty: 310,\n  // \t\t\t\t\t},\n  // \t\t\t\t],\n  // \t\t\t},\n  // \t\t\t{\n  // \t\t\t\tid: 'a0cb9388-ffb4-470a-a020-0a3256c0dd1c',\n  // \t\t\t\tlocked: false,\n  // \t\t\t\ttype: 'default',\n  // \t\t\t\tnodeType: 'default',\n  // \t\t\t\textras: {},\n  // \t\t\t\twidth: 200,\n  // \t\t\t\theight: 200,\n  // \t\t\t\tx: 1000,\n  // \t\t\t\ty: 600,\n  // \t\t\t\tports: [\n  // \t\t\t\t\t{\n  // \t\t\t\t\t\tid: 'd0866699-9922-47ab-812a-36d3bde6b513',\n  // \t\t\t\t\t\tlocked: false,\n  // \t\t\t\t\t\ttype: 'default',\n  // \t\t\t\t\t\tname: 'inport4',\n  // \t\t\t\t\t\tlinkType: 'default',\n  // \t\t\t\t\t\tmaximumLinks: null,\n  // \t\t\t\t\t\tmagnetic: true,\n  // \t\t\t\t\t\theight: 12,\n  // \t\t\t\t\t\twidth: 12,\n  // \t\t\t\t\t\tcanCreateLinks: false,\n  // \t\t\t\t\t\tx: 995,\n  // \t\t\t\t\t\ty: 610,\n  // \t\t\t\t\t},\n  // \t\t\t\t],\n  // \t\t\t},\n  // \t\t\t{\n  // \t\t\t\tid: 'de1eac05-4782-4bf2-8620-241562501db4',\n  // \t\t\t\tlocked: false,\n  // \t\t\t\ttype: 'default',\n  // \t\t\t\tnodeType: 'default',\n  // \t\t\t\textras: {},\n  // \t\t\t\twidth: 200,\n  // \t\t\t\theight: 200,\n  // \t\t\t\tx: 500,\n  // \t\t\t\ty: 300,\n  // \t\t\t\tports: [\n  // \t\t\t\t\t{\n  // \t\t\t\t\t\tid: '74bcbcfe-e5ca-4f49-8a00-9eb15916cd3c',\n  // \t\t\t\t\t\tlocked: false,\n  // \t\t\t\t\t\ttype: 'default',\n  // \t\t\t\t\t\tname: 'outport1',\n  // \t\t\t\t\t\tlinkType: 'default',\n  // \t\t\t\t\t\tmaximumLinks: null,\n  // \t\t\t\t\t\tmagnetic: false,\n  // \t\t\t\t\t\theight: 12,\n  // \t\t\t\t\t\twidth: 12,\n  // \t\t\t\t\t\tcanCreateLinks: true,\n  // \t\t\t\t\t\tx: 695,\n  // \t\t\t\t\t\ty: 310,\n  // \t\t\t\t\t},\n  // \t\t\t\t],\n  // \t\t\t},\n  // \t\t\t{\n  // \t\t\t\tid: '86d44ae3-bcc8-4d1a-b0ea-2fc295aa2da2',\n  // \t\t\t\tlocked: false,\n  // \t\t\t\ttype: 'default',\n  // \t\t\t\tnodeType: 'default',\n  // \t\t\t\textras: {},\n  // \t\t\t\twidth: 200,\n  // \t\t\t\theight: 200,\n  // \t\t\t\tx: 1000,\n  // \t\t\t\ty: 0,\n  // \t\t\t\tports: [\n  // \t\t\t\t\t{\n  // \t\t\t\t\t\tid: '6f2857d4-5fd2-4b0a-878b-730dec5afcdf',\n  // \t\t\t\t\t\tlocked: false,\n  // \t\t\t\t\t\ttype: 'default',\n  // \t\t\t\t\t\tname: 'inport2',\n  // \t\t\t\t\t\tlinkType: 'default',\n  // \t\t\t\t\t\tmaximumLinks: null,\n  // \t\t\t\t\t\tmagnetic: true,\n  // \t\t\t\t\t\theight: 12,\n  // \t\t\t\t\t\twidth: 12,\n  // \t\t\t\t\t\tcanCreateLinks: false,\n  // \t\t\t\t\t\tx: 995,\n  // \t\t\t\t\t\ty: 10,\n  // \t\t\t\t\t},\n  // \t\t\t\t],\n  // \t\t\t},\n  // \t\t],\n  // \t\tlinks: [\n  // \t\t\t{\n  // \t\t\t\tid: '635cb9cd-09bd-4693-b746-760b8fbf51ae',\n  // \t\t\t\tlocked: true,\n  // \t\t\t\ttype: 'default',\n  // \t\t\t\tsourcePort: '74bcbcfe-e5ca-4f49-8a00-9eb15916cd3c',\n  // \t\t\t\ttargetPort: '6f2857d4-5fd2-4b0a-878b-730dec5afcdf',\n  // \t\t\t\textras: {},\n  // \t\t\t\tpoints: [\n  // \t\t\t\t\t{ id: 'b085cdea-f1f1-4f26-8989-585a310004f9', locked: true, type: 'default', coords: { x: 701, y: 316 } },\n  // \t\t\t\t\t{ id: 'edccec32-2290-4290-a7b3-66e3598c07f5', locked: true, type: 'default', coords: { x: 1001, y: 16 } },\n  // \t\t\t\t],\n  // \t\t\t},\n  // \t\t],\n  // \t};\n\n  // \tthis.diagramModel.deserialize(JSONModel);\n  // }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".demo-diagram {\n  display: flex;\n  height: 100%;\n  min-height: 100vh;\n  background-color: #3c3c3c;\n  background-image: linear-gradient(\n      0deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    ),\n    linear-gradient(\n      90deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    );\n  background-size: 50px 50px;\n}\n\n.action-bar {\n  position: relative;\n  width: 100%;\n  height: 40px;\n  z-index: 2000;\n  background-color: white;\n  display: flex;\n  align-items: center;\n  * {\n    margin: 0 10px;\n  }\n}\n",
                    "styleUrl": "../demo-diagram.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine"
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "SmartRoutingExampleStoryComponent",
            "id": "component-SmartRoutingExampleStoryComponent-6b131d1e06597880bae8c41f3d9d0fc4",
            "file": "libs/angular/stories/examples/smart-routing/smart-routing.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "../demo-diagram.component.scss"
            ],
            "styles": [],
            "template": "<ngdx-diagram\n  class=\"demo-diagram\"\n  [model]=\"diagramModel\"\n  [smartRouting]=\"true\"\n></ngdx-diagram>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "diagramModel",
                    "type": "DiagramModel",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { DiagramEngine, DiagramModel, DefaultNodeModel } from 'ngx-diagrams';\n\n@Component({\n  selector: 'app-root',\n  template: `\n    <ngdx-diagram\n      class=\"demo-diagram\"\n      [model]=\"diagramModel\"\n      [smartRouting]=\"true\"\n    ></ngdx-diagram>\n  `,\n  styleUrls: ['../demo-diagram.component.scss'],\n})\nexport class SmartRoutingExampleStoryComponent implements OnInit {\n  diagramModel: DiagramModel;\n\n  constructor(private diagramEngine: DiagramEngine) {}\n\n  ngOnInit() {\n    const nodesDefaultDimensions = { height: 200, width: 200 };\n    this.diagramEngine.registerDefaultFactories();\n\n    this.diagramModel = this.diagramEngine.createDiagram();\n\n    const node1 = new DefaultNodeModel();\n    node1.setCoords({ x: 500, y: 300 });\n    node1.setDimensions(nodesDefaultDimensions);\n    const outport1 = node1.addOutPort({ name: 'outport1' });\n\n    for (let index = 0; index < 5; index++) {\n      const nodeLoop = new DefaultNodeModel();\n      nodeLoop.setCoords({ x: 1500, y: index * 300 });\n      nodeLoop.setDimensions(nodesDefaultDimensions);\n      const inportLoop = nodeLoop.addInPort({ name: `inport${index + 3}` });\n\n      this.diagramModel.addNode(nodeLoop);\n\n      const linkLoop = outport1.link(inportLoop);\n      this.diagramModel.addLink(linkLoop);\n    }\n\n    const blockingNode = new DefaultNodeModel();\n    blockingNode.setCoords({ x: 1000, y: 300 });\n    blockingNode.setDimensions(nodesDefaultDimensions);\n\n    this.diagramModel.addAll(node1, blockingNode);\n\n    this.diagramEngine.zoomToFit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".demo-diagram {\n  display: flex;\n  height: 100%;\n  min-height: 100vh;\n  background-color: #3c3c3c;\n  background-image: linear-gradient(\n      0deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    ),\n    linear-gradient(\n      90deg,\n      transparent 24%,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.05) 26%,\n      transparent 27%,\n      transparent 74%,\n      rgba(255, 255, 255, 0.05) 75%,\n      rgba(255, 255, 255, 0.05) 76%,\n      transparent 77%,\n      transparent\n    );\n  background-size: 50px 50px;\n}\n\n.action-bar {\n  position: relative;\n  width: 100%;\n  height: 40px;\n  z-index: 2000;\n  background-color: white;\n  display: flex;\n  align-items: center;\n  * {\n    margin: 0 10px;\n  }\n}\n",
                    "styleUrl": "../demo-diagram.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        }
    ],
    "modules": [
        {
            "name": "DefaultLabelModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DefaultLabelComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DefaultLabelComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DefaultLinkModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DefaultLinkComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DefaultLinkComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DefaultNodeModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DefaultNodeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DefaultPortModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DefaultPortComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgxDiagramsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NgxDiagramComponent"
                        },
                        {
                            "name": "TemplateVarDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NgxDiagramComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "AutoArrange",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/angular/stories/examples/examples.stories.ts",
                "type": "",
                "defaultValue": "AutoArrangeDiagramTemplate.bind({})"
            },
            {
                "name": "AutoArrangeDiagramTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/angular/stories/examples/examples.template.ts",
                "type": "Story<AutoArrangeExampleStoryComponent>",
                "defaultValue": "(\n  args: any\n) => ({\n  component: AutoArrangeExampleStoryComponent,\n  props: args,\n})"
            },
            {
                "name": "Basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/angular/stories/examples/examples.stories.ts",
                "type": "",
                "defaultValue": "BasicDiagramTemplate.bind({})"
            },
            {
                "name": "BasicDiagramTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/angular/stories/examples/examples.template.ts",
                "type": "Story<BasicExampleStoryComponent>",
                "defaultValue": "(\n  args: any\n) => ({\n  component: BasicExampleStoryComponent,\n  props: args,\n})"
            },
            {
                "name": "Custom",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/angular/stories/label/label.stories.ts",
                "type": "",
                "defaultValue": "CustomLinkTemplate.bind({})"
            },
            {
                "name": "Custom",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/angular/stories/link/link.stories.ts",
                "type": "",
                "defaultValue": "CustomLinkTemplate.bind({})"
            },
            {
                "name": "Custom",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/angular/stories/port/port.stories.ts",
                "type": "",
                "defaultValue": "CustomNodeTemplate.bind({})"
            },
            {
                "name": "Custom",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/angular/stories/node/node.stories.ts",
                "type": "",
                "defaultValue": "CustomNodeTemplate.bind({})"
            },
            {
                "name": "CustomLinkTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/angular/stories/label/label.template.ts",
                "type": "Story<CustomLabelDiagramComponent>",
                "defaultValue": "(\n  args: any\n) => ({\n  component: CustomLabelDiagramComponent,\n  props: args,\n})"
            },
            {
                "name": "CustomLinkTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/angular/stories/link/link.template.ts",
                "type": "Story<CustomLinkDiagramComponent>",
                "defaultValue": "(\n  args: any\n) => ({\n  component: CustomLinkDiagramComponent,\n  props: args,\n})"
            },
            {
                "name": "CustomNodeTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/angular/stories/port/port.template.ts",
                "type": "Story<CustomPortDiagramComponent>",
                "defaultValue": "(\n  args: any\n) => ({\n  component: CustomPortDiagramComponent,\n  props: args,\n})"
            },
            {
                "name": "CustomNodeTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/angular/stories/node/node.template.ts",
                "type": "Story<CustomNodeDiagramComponent>",
                "defaultValue": "(\n  args: any\n) => ({\n  component: CustomNodeDiagramComponent,\n  props: args,\n})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/angular/stories/label/label.stories.ts",
                "type": "",
                "defaultValue": "DefaultLinkTemplate.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/angular/stories/link/link.stories.ts",
                "type": "",
                "defaultValue": "DefaultLinkTemplate.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/angular/stories/port/port.stories.ts",
                "type": "",
                "defaultValue": "DefaultNodeTemplate.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/angular/stories/node/node.stories.ts",
                "type": "",
                "defaultValue": "DefaultNodeTemplate.bind({})"
            },
            {
                "name": "DefaultLinkTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/angular/stories/label/label.template.ts",
                "type": "Story<DefaultLabelStoryComponent>",
                "defaultValue": "(\n  args: any\n) => ({\n  component: DefaultLabelStoryComponent,\n  props: args,\n})"
            },
            {
                "name": "DefaultLinkTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/angular/stories/link/link.template.ts",
                "type": "Story<DefaultLinkStoryComponent>",
                "defaultValue": "(\n  args: any\n) => ({\n  component: DefaultLinkStoryComponent,\n  props: args,\n})"
            },
            {
                "name": "DefaultNodeTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/angular/stories/port/port.template.ts",
                "type": "Story<DefaultPortComponent>",
                "defaultValue": "(\n  args: any\n) => ({\n  component: DefaultPortComponent,\n  props: args,\n})"
            },
            {
                "name": "DefaultNodeTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/angular/stories/node/node.template.ts",
                "type": "Story<DefaultNodeComponent>",
                "defaultValue": "(\n  args: any\n) => ({\n  component: DefaultNodeComponent,\n  props: args,\n})"
            },
            {
                "name": "Performance",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/angular/stories/examples/examples.stories.ts",
                "type": "",
                "defaultValue": "PerformanceDiagramTemplate.bind({})"
            },
            {
                "name": "PerformanceDiagramTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/angular/stories/examples/examples.template.ts",
                "type": "Story<PerformanceExampleStoryComponent>",
                "defaultValue": "(args: any) => ({\n\tcomponent: PerformanceExampleStoryComponent,\n\tprops: args,\n})"
            },
            {
                "name": "ROUTING_SCALING_FACTOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/angular/src/lib/plugins/smart-routing.plugin.ts",
                "type": "number",
                "defaultValue": "10"
            },
            {
                "name": "Serialization",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/angular/stories/examples/examples.stories.ts",
                "type": "",
                "defaultValue": "SerializationDiagramTemplate.bind({})"
            },
            {
                "name": "SerializationDiagramTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/angular/stories/examples/examples.template.ts",
                "type": "Story<SerializationExampleStoryComponent>",
                "defaultValue": "(\n  args: any\n) => ({\n  component: SerializationExampleStoryComponent,\n  props: { ...args, serialized: action('serialized') },\n})"
            },
            {
                "name": "SmartRouting",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/angular/stories/examples/examples.stories.ts",
                "type": "",
                "defaultValue": "SmartRoutingDiagramTemplate.bind({})"
            },
            {
                "name": "SmartRoutingDiagramTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/angular/stories/examples/examples.template.ts",
                "type": "Story<SmartRoutingExampleStoryComponent>",
                "defaultValue": "(\n  args: any\n) => ({\n  component: SmartRoutingExampleStoryComponent,\n  props: args,\n})"
            }
        ],
        "functions": [
            {
                "name": "OutsideZone",
                "file": "libs/angular/src/lib/utils/decorators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "targetClass"
                    },
                    {
                        "name": "functionName"
                    },
                    {
                        "name": "descriptor",
                        "type": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "targetClass",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "functionName",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "descriptor",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "libs/angular/stories/examples/examples.stories.ts": [
                {
                    "name": "AutoArrange",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/angular/stories/examples/examples.stories.ts",
                    "type": "",
                    "defaultValue": "AutoArrangeDiagramTemplate.bind({})"
                },
                {
                    "name": "Basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/angular/stories/examples/examples.stories.ts",
                    "type": "",
                    "defaultValue": "BasicDiagramTemplate.bind({})"
                },
                {
                    "name": "Performance",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/angular/stories/examples/examples.stories.ts",
                    "type": "",
                    "defaultValue": "PerformanceDiagramTemplate.bind({})"
                },
                {
                    "name": "Serialization",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/angular/stories/examples/examples.stories.ts",
                    "type": "",
                    "defaultValue": "SerializationDiagramTemplate.bind({})"
                },
                {
                    "name": "SmartRouting",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/angular/stories/examples/examples.stories.ts",
                    "type": "",
                    "defaultValue": "SmartRoutingDiagramTemplate.bind({})"
                }
            ],
            "libs/angular/stories/examples/examples.template.ts": [
                {
                    "name": "AutoArrangeDiagramTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/angular/stories/examples/examples.template.ts",
                    "type": "Story<AutoArrangeExampleStoryComponent>",
                    "defaultValue": "(\n  args: any\n) => ({\n  component: AutoArrangeExampleStoryComponent,\n  props: args,\n})"
                },
                {
                    "name": "BasicDiagramTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/angular/stories/examples/examples.template.ts",
                    "type": "Story<BasicExampleStoryComponent>",
                    "defaultValue": "(\n  args: any\n) => ({\n  component: BasicExampleStoryComponent,\n  props: args,\n})"
                },
                {
                    "name": "PerformanceDiagramTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/angular/stories/examples/examples.template.ts",
                    "type": "Story<PerformanceExampleStoryComponent>",
                    "defaultValue": "(args: any) => ({\n\tcomponent: PerformanceExampleStoryComponent,\n\tprops: args,\n})"
                },
                {
                    "name": "SerializationDiagramTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/angular/stories/examples/examples.template.ts",
                    "type": "Story<SerializationExampleStoryComponent>",
                    "defaultValue": "(\n  args: any\n) => ({\n  component: SerializationExampleStoryComponent,\n  props: { ...args, serialized: action('serialized') },\n})"
                },
                {
                    "name": "SmartRoutingDiagramTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/angular/stories/examples/examples.template.ts",
                    "type": "Story<SmartRoutingExampleStoryComponent>",
                    "defaultValue": "(\n  args: any\n) => ({\n  component: SmartRoutingExampleStoryComponent,\n  props: args,\n})"
                }
            ],
            "libs/angular/stories/label/label.stories.ts": [
                {
                    "name": "Custom",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/angular/stories/label/label.stories.ts",
                    "type": "",
                    "defaultValue": "CustomLinkTemplate.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/angular/stories/label/label.stories.ts",
                    "type": "",
                    "defaultValue": "DefaultLinkTemplate.bind({})"
                }
            ],
            "libs/angular/stories/link/link.stories.ts": [
                {
                    "name": "Custom",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/angular/stories/link/link.stories.ts",
                    "type": "",
                    "defaultValue": "CustomLinkTemplate.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/angular/stories/link/link.stories.ts",
                    "type": "",
                    "defaultValue": "DefaultLinkTemplate.bind({})"
                }
            ],
            "libs/angular/stories/port/port.stories.ts": [
                {
                    "name": "Custom",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/angular/stories/port/port.stories.ts",
                    "type": "",
                    "defaultValue": "CustomNodeTemplate.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/angular/stories/port/port.stories.ts",
                    "type": "",
                    "defaultValue": "DefaultNodeTemplate.bind({})"
                }
            ],
            "libs/angular/stories/node/node.stories.ts": [
                {
                    "name": "Custom",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/angular/stories/node/node.stories.ts",
                    "type": "",
                    "defaultValue": "CustomNodeTemplate.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/angular/stories/node/node.stories.ts",
                    "type": "",
                    "defaultValue": "DefaultNodeTemplate.bind({})"
                }
            ],
            "libs/angular/stories/label/label.template.ts": [
                {
                    "name": "CustomLinkTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/angular/stories/label/label.template.ts",
                    "type": "Story<CustomLabelDiagramComponent>",
                    "defaultValue": "(\n  args: any\n) => ({\n  component: CustomLabelDiagramComponent,\n  props: args,\n})"
                },
                {
                    "name": "DefaultLinkTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/angular/stories/label/label.template.ts",
                    "type": "Story<DefaultLabelStoryComponent>",
                    "defaultValue": "(\n  args: any\n) => ({\n  component: DefaultLabelStoryComponent,\n  props: args,\n})"
                }
            ],
            "libs/angular/stories/link/link.template.ts": [
                {
                    "name": "CustomLinkTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/angular/stories/link/link.template.ts",
                    "type": "Story<CustomLinkDiagramComponent>",
                    "defaultValue": "(\n  args: any\n) => ({\n  component: CustomLinkDiagramComponent,\n  props: args,\n})"
                },
                {
                    "name": "DefaultLinkTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/angular/stories/link/link.template.ts",
                    "type": "Story<DefaultLinkStoryComponent>",
                    "defaultValue": "(\n  args: any\n) => ({\n  component: DefaultLinkStoryComponent,\n  props: args,\n})"
                }
            ],
            "libs/angular/stories/port/port.template.ts": [
                {
                    "name": "CustomNodeTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/angular/stories/port/port.template.ts",
                    "type": "Story<CustomPortDiagramComponent>",
                    "defaultValue": "(\n  args: any\n) => ({\n  component: CustomPortDiagramComponent,\n  props: args,\n})"
                },
                {
                    "name": "DefaultNodeTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/angular/stories/port/port.template.ts",
                    "type": "Story<DefaultPortComponent>",
                    "defaultValue": "(\n  args: any\n) => ({\n  component: DefaultPortComponent,\n  props: args,\n})"
                }
            ],
            "libs/angular/stories/node/node.template.ts": [
                {
                    "name": "CustomNodeTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/angular/stories/node/node.template.ts",
                    "type": "Story<CustomNodeDiagramComponent>",
                    "defaultValue": "(\n  args: any\n) => ({\n  component: CustomNodeDiagramComponent,\n  props: args,\n})"
                },
                {
                    "name": "DefaultNodeTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/angular/stories/node/node.template.ts",
                    "type": "Story<DefaultNodeComponent>",
                    "defaultValue": "(\n  args: any\n) => ({\n  component: DefaultNodeComponent,\n  props: args,\n})"
                }
            ],
            "libs/angular/src/lib/plugins/smart-routing.plugin.ts": [
                {
                    "name": "ROUTING_SCALING_FACTOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/angular/src/lib/plugins/smart-routing.plugin.ts",
                    "type": "number",
                    "defaultValue": "10"
                }
            ]
        },
        "groupedFunctions": {
            "libs/angular/src/lib/utils/decorators.ts": [
                {
                    "name": "OutsideZone",
                    "file": "libs/angular/src/lib/utils/decorators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "targetClass"
                        },
                        {
                            "name": "functionName"
                        },
                        {
                            "name": "descriptor",
                            "type": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "targetClass",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "functionName",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "descriptor",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "libs/angular/src/lib/containers/diagram/diagram.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgxDiagramComponent",
                "coveragePercent": 7,
                "coverageCount": "3/42",
                "status": "low"
            },
            {
                "filePath": "libs/angular/src/lib/defaults/components/default-label/default-label.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DefaultLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "libs/angular/src/lib/defaults/components/default-link/default-link.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DefaultLinkComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "libs/angular/src/lib/defaults/components/default-node/default-node.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DefaultNodeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "libs/angular/src/lib/defaults/components/default-port/default-port.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DefaultPortComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "libs/angular/src/lib/defaults/factories/default-label.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DefaultLabelFactory",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "libs/angular/src/lib/defaults/factories/default-link.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DefaultLinkFactory",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "libs/angular/src/lib/defaults/factories/default-node.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DefaultNodeFactory",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "libs/angular/src/lib/defaults/factories/default-port.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DefaultPortFactory",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "libs/angular/src/lib/defaults/models/default-label.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DefaultLabelModel",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "libs/angular/src/lib/defaults/models/default-link.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DefaultLinkModel",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "libs/angular/src/lib/defaults/models/default-node.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DefaultNodeModel",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "libs/angular/src/lib/defaults/models/default-port.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DefaultPortModel",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "libs/angular/src/lib/defaults/models/default-port.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DefaultPortModelConfig",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "libs/angular/src/lib/factories/label.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AbstractLabelFactory",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "libs/angular/src/lib/factories/link.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AbstractLinkFactory",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "libs/angular/src/lib/factories/node.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AbstractNodeFactory",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "libs/angular/src/lib/factories/port.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AbstractPortFactory",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "libs/angular/src/lib/plugins/dagre-engine.plugin.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DagreEngine",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/angular/src/lib/plugins/dagre-engine.plugin.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DagreEngineOptions",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "libs/angular/src/lib/plugins/smart-routing.plugin.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PathFinding",
                "coveragePercent": 50,
                "coverageCount": "3/6",
                "status": "medium"
            },
            {
                "filePath": "libs/angular/src/lib/plugins/smart-routing.plugin.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ROUTING_SCALING_FACTOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/angular/src/lib/services/engine.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DiagramEngine",
                "coveragePercent": 27,
                "coverageCount": "6/22",
                "status": "medium"
            },
            {
                "filePath": "libs/angular/src/lib/services/factories.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FactoriesService",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "libs/angular/src/lib/utils/decorators.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ZonedClass",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "libs/angular/src/lib/utils/decorators.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "OutsideZone",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/angular/src/lib/utils/template-var.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "TemplateVarDirective",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "libs/angular/src/lib/utils/template-var.directive.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TemplateVarContext",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/examples/auto-arrange/auto-arrange.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AutoArrangeExampleStoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/examples/basic/basic.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BasicExampleStoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/examples/examples.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AutoArrange",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/examples/examples.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/examples/examples.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Performance",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/examples/examples.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Serialization",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/examples/examples.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SmartRouting",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/examples/examples.template.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AutoArrangeDiagramTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/examples/examples.template.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BasicDiagramTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/examples/examples.template.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PerformanceDiagramTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/examples/examples.template.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SerializationDiagramTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/examples/examples.template.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SmartRoutingDiagramTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/examples/performance/performance.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PerformanceExampleStoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/examples/serialization/serialization.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SerializationExampleStoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/examples/smart-routing/smart-routing.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SmartRoutingExampleStoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/label/custom/custom-label.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/label/custom/custom.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CustomLabelFactory",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/label/custom/diagram.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomLabelDiagramComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/label/default/default.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DefaultLabelStoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/label/label.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Custom",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/label/label.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/label/label.template.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CustomLinkTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/label/label.template.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultLinkTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/link/custom/custom-link.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomLinkComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/link/custom/custom.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CustomLinkFactory",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/link/custom/diagram.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomLinkDiagramComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/link/default/default.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DefaultLinkStoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/link/link.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Custom",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/link/link.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/link/link.template.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CustomLinkTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/link/link.template.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultLinkTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/node/custom/custom.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomNodeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/node/custom/custom.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CustomNodeFactory",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/node/custom/diagram.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomNodeDiagramComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/node/default/default.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DefaultNodeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/node/node.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Custom",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/node/node.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/node/node.template.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CustomNodeTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/node/node.template.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultNodeTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/port/custom/custom.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomPortComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/port/custom/custom.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CustomPortFactory",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/port/custom/diagram.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomPortDiagramComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/port/default/default.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DefaultPortComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/port/port.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Custom",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/port/port.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/port/port.template.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CustomNodeTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/angular/stories/port/port.template.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultNodeTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}